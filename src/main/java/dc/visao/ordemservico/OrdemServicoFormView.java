package dc.visao.ordemservico;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import org.vaadin.easyuploads.MultiFileUpload;
import org.vaadin.tepi.imageviewer.ImageViewer;
import org.vaadin.tepi.imageviewer.ImageViewer.ImageSelectedEvent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.converter.Converter;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.MouseEvents.ClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FileResource;
import com.vaadin.server.Page;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.DragAndDropWrapper.DragStartMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.Link;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Slider;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.Slider.ValueOutOfBoundsException;
import com.vaadin.ui.VerticalLayout;

import dc.controller.ordemservico.OrdemServicoFormController;
import dc.entidade.financeiro.ContaCaixa;
import dc.entidade.financeiro.TipoPagamento;
import dc.entidade.ged.DocumentoArquivo;
import dc.entidade.ordemservico.Acessorio;
import dc.entidade.ordemservico.AcessorioOs;
import dc.entidade.ordemservico.Carro;
import dc.entidade.ordemservico.Cor;
import dc.entidade.ordemservico.EntradaServico;
import dc.entidade.ordemservico.Equipamento;
import dc.entidade.ordemservico.InformacaoGeral;
import dc.entidade.ordemservico.Marca;
import dc.entidade.ordemservico.MaterialServico;
import dc.entidade.ordemservico.Modelo;
import dc.entidade.ordemservico.OrdemServico;
import dc.entidade.ordemservico.Revenda;
import dc.entidade.ordemservico.ServicoOs;
import dc.entidade.ordemservico.SituacaoServico;
import dc.entidade.ordemservico.StatusOs;
import dc.entidade.ordemservico.TipoServico;
import dc.entidade.ordemservico.VendaPeca;
import dc.entidade.pessoal.Cliente;
import dc.entidade.pessoal.Colaborador;
import dc.entidade.produto.Produto;
import dc.servicos.util.Util;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class OrdemServicoFormView extends CustomComponent {

	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private GridLayout gridLayoutFoto;
	@AutoGenerated
	private Link linkDonwload;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_4_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_5_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_6_info;
	@AutoGenerated
	private TabSheet subForms;
	@AutoGenerated
	private TabSheet grInformacaoGeral;
	@AutoGenerated
	private GridLayout grLaudoTecnico;
	@AutoGenerated
	private GridLayout grEntradaServico;
	@AutoGenerated
	private GridLayout grVendaPeca;
	@AutoGenerated
	private GridLayout grMaterialServico;
	@AutoGenerated
	private GridLayout grGarantia;
	@AutoGenerated
	private GridLayout grAcessorios;
	@AutoGenerated
	private GridLayout grObservacao;
	@AutoGenerated
	private GridLayout grFotos;
	@AutoGenerated
	private GridLayout grListaAgrupado;
	@AutoGenerated
	private GridLayout grInformacaoFinanceira;
	
	@AutoGenerated
	private SlowMultiFileUpload upArquivo;
	private GridLayout sources;
	private Window subwindow;
	private Panel nPanel;
	private String nomeArquivoVisualizacao;
	private String idEmpresa = "";
	private String idDocumento = "";
	private 	String homePath = System.getProperty("user.home");
	private   String customCompanyBaseFolder = "dc-erp";
	private  ImageViewer imageViewer = new ImageViewer();
	private final TextField selectedImage = new TextField();
	private List<String> listArquivos = new ArrayList<String>();
	
	private OrdemServicoFormController controller;

	private SubFormComponent<EntradaServico, Integer> entradaServicoSubForm;

	private SubFormComponent<EntradaServico, Integer> entradaServicoFinanceiraSubForm;

	private SubFormComponent<VendaPeca, Integer> vendaPecaSubForm;

	private SubFormComponent<VendaPeca, Integer> vendaPecaFinanceiraSubForm;

	private SubFormComponent<MaterialServico, Integer> materialServicoSubForm;

	private SubFormComponent<AcessorioOs, Integer> acessorioOsSubForm;

	private SubFormComponent<OrdemServico, Integer> osAgrupadaSubForm;
	
	private PopupDateField pdfDataEntrada,pdfDataEfetiv, pdfProximaRevisao, pdfEntrega, pdfDataNotaFiscal;
	 
	private TextField tfNumeroOS,tfNumeroComanda, tfRazao, tfEndereco, tfCidade, tfBairro, tfUf, tfFone, tfkm, tfData;
	 
	private TextField tfCliente, tfNumOsFabricante, tfNumNotaFiscal, tfApelido, tfSerial, tfMarca, tfModelo, tfAno, tfMotorizacao, tfCombustivel, tfChassi;

	private TextArea taObservacaoLaudoTecnico,taObservacaoLaudoFerramentas, taTermoGarantia,taObservacaoLocal, taObservacaoOS, taObservacaoDefeito,taObservacaoFoto;

	private TextField tfTotalServicoGeral,tfTotalProdutoGeral,tfTotalFreteGeral,tfTotalOutrosGeral,tfDescontoGeral,tfTotalGeral;
	
	private TextField tfTotalPeca, tfLucroPeca, tfTotalServico, tfLucroServico, tfComissaoTecnico, tfComissaoVendedor, tfComissaoAtendente,
	                  tfDesconto, tfLucroParcialServico;

	private Label lblTotalPeca, lblLucroPeca,lblTotalServico, lblLucroServico, lblComissaoTecnico, lblComissaoVendedor,
	              lblComissaoAtendente, lblDesconto, lblLucroParcialServico;
	
	private ManyToOneCombo<Cliente> cbCliente;

	private ManyToOneCombo<Carro> cbPlaca;

	private ManyToOneCombo<Revenda> cbRevenda;

	private ManyToOneCombo<Equipamento> cbEquipamento;

	private ManyToOneCombo<Equipamento> cbEquipamentoGarantia;

	private ManyToOneCombo<Marca> cbMarca;
	private ManyToOneCombo<Marca> cbMarcaGarantia;

	private ManyToOneCombo<Modelo> cbModelo;
	private ManyToOneCombo<Cor> cbCor;
	private ManyToOneCombo<Modelo> cbModeloGarantia;
	private ManyToOneCombo<Cor> cbCorGarantia;
	
	private ManyToOneCombo<StatusOs> cbStatus;
	private ManyToOneCombo<SituacaoServico> cbSituacaoServico;
	private ManyToOneCombo<Colaborador> cbAtendente;
	
	private ManyToOneCombo<TipoServico> cbTipoServico;
	private ManyToOneCombo<TipoPagamento> cbFormaPagamento;

	public OrdemServicoFormView(OrdemServicoFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		setWidth("100.0%");
		
		// common part: create layout
		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
		mainLayout.addComponent(subForms);

		buildAbaInformacaoGeral();
		buildAbaLaudoTecnico();
		buildAbaEntradaServico();
		buildAbaVendaPeca();
		buildAbaMaterialServico();
		buildAbaGarantia();
		buildAbaAcessorio();
		buildAbaObservacao();
		buildAbaFoto();
//		buildAbaOsAgrupada();
		buildAbaInformacaoFinanceira();

		
		
		return mainLayout;
	}

	public void buildAbaInformacaoGeral() {

		GridLayout gridLayout_1 = new GridLayout(7, 7);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(7);
		gridLayout_1.setColumns(7);


		cbCliente = new ManyToOneCombo<Cliente>();
		cbCliente.setCaption("Cliente");
		cbCliente.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				Cliente cli = new Cliente();
				cli = cbCliente.getValue();
				
				if(cli!=null){
					tfRazao.setValue(cli.getPessoa().getNome());
					tfEndereco.setValue(cli.getPessoa().getEnderecos().get(0).getLogradouro());
					tfCidade.setValue(cli.getPessoa().getEnderecos().get(0).getCidade());
					tfBairro.setValue(cli.getPessoa().getEnderecos().get(0).getBairro());
					tfUf.setValue(cli.getPessoa().getEnderecos().get(0).getUf().getSigla());
//					controller.buscarOsAgrupada(cli);			
				}
			}
			
		});
		gridLayout_1.addComponent(cbCliente,0,1,1,1);

		tfRazao = ComponentUtil.buildTextField("Raz√£o");
		gridLayout_1.addComponent(tfRazao,2,1);
		
		tfEndereco = ComponentUtil.buildTextField("Endere√ßo");
		gridLayout_1.addComponent(tfEndereco,3,1);

		tfCidade = ComponentUtil.buildTextField("Cidade");
		gridLayout_1.addComponent(tfCidade,4,1,4,1);

		tfBairro = ComponentUtil.buildTextField("Bairro");
		gridLayout_1.addComponent(tfBairro,5,1,5,1);

		tfUf = ComponentUtil.buildTextField("Uf");
		gridLayout_1.addComponent(tfUf,6,1,6,1);

		cbAtendente = new ManyToOneCombo<Colaborador>();
		cbAtendente.setCaption("Atendente");
		gridLayout_1.addComponent(cbAtendente,0,2,1,2);


		// Data de entrada
		pdfDataEntrada = ComponentUtil.buildPopupDateField("Data de entrada");
		gridLayout_1.addComponent(pdfDataEntrada,2,2);

		// Data de entrada
		pdfDataEfetiv = ComponentUtil.buildPopupDateField("Data efetiva√ß√£o");
		gridLayout_1.addComponent(pdfDataEfetiv,3,2);

		tfNumeroComanda = ComponentUtil.buildTextField("Nr. comanda");
		gridLayout_1.addComponent(tfNumeroComanda,4,2);

		// status
		cbStatus = new ManyToOneCombo<StatusOs>();
		cbStatus.setCaption("Status");
		gridLayout_1.addComponent(cbStatus,0,3,1,3);

		// Situa√ß√£o do servi√ßo
		cbSituacaoServico = new ManyToOneCombo<SituacaoServico>();
		cbSituacaoServico.setCaption("Situa√ß√£o do servi√ßo");
		gridLayout_1.addComponent(cbSituacaoServico,2,3,3,3);
		
		tfFone = ComponentUtil.buildTextField("Telefone");
		gridLayout_1.addComponent(tfFone,4,3,4,3);

		 
		// Placa do ve√≠culo
		cbPlaca = new ManyToOneCombo<Carro>();
		cbPlaca.setCaption("Placa");
		cbPlaca.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				Carro carro = new Carro();
				carro = cbPlaca.getValue();
				tfMarca.setValue(carro.getMarca().getNome());
				tfModelo.setValue(carro.getModelo().getNome());
				tfAno.setValue(carro.getAno().toString());
				tfMotorizacao.setValue(carro.getMotorizacao());
				tfCombustivel.setValue(carro.getCombustivel().getNome());
				tfChassi.setValue(carro.getChassi());
			}
			
		});
		gridLayout_1.addComponent(cbPlaca,0,4,1,4);
		

		//Km rodado\hor√≠metro
		tfkm = ComponentUtil.buildTextField("Km rodado/hor√≠metro");
		gridLayout_1.addComponent(tfkm,2,4);

//		tfData = ComponentUtil.buildTextField("Data");
//		gridLayout_1.addComponent(tfData,3,4);

		// Data pr√≥xima revis√£o
		pdfProximaRevisao = ComponentUtil.buildPopupDateField("Pr√≥x. revis√£o");
		gridLayout_1.addComponent(pdfProximaRevisao,3,4);

		cbTipoServico = new ManyToOneCombo<TipoServico>();
		cbTipoServico.setCaption("Tipo de Servi√ßo");
		gridLayout_1.addComponent(cbTipoServico,4,4,5,4);

		//Marca do ve√≠culo
		tfMarca = ComponentUtil.buildTextField("Marca");
		gridLayout_1.addComponent(tfMarca,0,5);

		tfModelo = ComponentUtil.buildTextField("Modelo");
		gridLayout_1.addComponent(tfModelo,1,5);

		tfAno = ComponentUtil.buildTextField("Ano");
		gridLayout_1.addComponent(tfAno,2,5);

		tfMotorizacao = ComponentUtil.buildTextField("Motoriza√ß√£o");
		gridLayout_1.addComponent(tfMotorizacao,3,5);

		// Combust√≠vel do ve√≠culo
		tfCombustivel = ComponentUtil.buildTextField("Combust√≠vel");
		gridLayout_1.addComponent(tfCombustivel,4,5);

		// Chassi do ve√≠culo
		tfChassi = ComponentUtil.buildTextField("Chassi");
		gridLayout_1.addComponent(tfChassi,5,5);

		taObservacaoDefeito = ComponentUtil.buildTextArea("Observa√ß√£o do defeito apresentado");
		gridLayout_1.addComponent(taObservacaoDefeito, 0, 6, 2, 6);

		cbFormaPagamento = new ManyToOneCombo<>();
		cbFormaPagamento.setCaption("Forma Pagamento");
		gridLayout_1.addComponent(cbFormaPagamento,3,6,4,6);
		
		// Data pr√≥xima revis√£o
		pdfEntrega = ComponentUtil.buildPopupDateField("Data Entrega");
		gridLayout_1.addComponent(pdfEntrega,5,6);

		subForms.addTab(gridLayout_1, "Informa√ß√£o geral", null);
	}

	public void adicionarComponentes(VerticalLayout grid,
			List<? extends AbstractComponent> componentes) {
		for (Component c : componentes) {
			grid.addComponent(c);
		}
	}

	public GridLayout montaGridLayout(Integer colunas, Integer linhas) {
		GridLayout grid = new GridLayout(colunas, linhas);
		grid.setImmediate(false);
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		return grid;
	}

	public HorizontalLayout montaHorizontal(List<? extends Component> components) {
		HorizontalLayout grid = new HorizontalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;
	}

	public VerticalLayout montaVertical(List<? extends Component> components) {
		VerticalLayout grid = new VerticalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(false);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;

	}

	public void buildAbaLaudoTecnico() {
		GridLayout layout = new GridLayout(8, 7);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);

		// tfObservacaoLaudoTecnico
		taObservacaoLaudoTecnico = new TextArea();
		taObservacaoLaudoTecnico = ComponentUtil.buildTextArea("Observa√ß√£o laudo t√©cnico");
		taObservacaoLaudoTecnico.setNullRepresentation("");
		taObservacaoLaudoTecnico.setImmediate(false);
		taObservacaoLaudoTecnico.setWidth("600px");
		taObservacaoLaudoTecnico.setHeight("200px");
//		tfObservacaoLaudoTecnico.setRequired(true);
		layout.addComponent(taObservacaoLaudoTecnico, 0, 1);
		
		// tfObservacaoLaudoFerramentas
		taObservacaoLaudoFerramentas = new TextArea();
		taObservacaoLaudoFerramentas.setCaption("Observa√ß√£o laudo ferramentas:");
		taObservacaoLaudoFerramentas.setNullRepresentation("");
		taObservacaoLaudoFerramentas.setImmediate(false);
		taObservacaoLaudoFerramentas.setWidth("600px");
		taObservacaoLaudoFerramentas.setHeight("200px");
		layout.addComponent(taObservacaoLaudoFerramentas, 0, 2);

		subForms.addTab(layout, "Laudo t√©cnico", null);
	}

	public void buildAbaEntradaServico() {
		TabSheet abaEntradaServico = buildEntradaServicoSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaEntradaServico);
		subForms.addTab(layout, "Entrada de servi√ßo", null);
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildEntradaServicoSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		entradaServicoSubForm = new SubFormComponent<EntradaServico, Integer>(
				EntradaServico.class, new String[] { "vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal",
					"valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"}, new String[] {
						"Vendedor","T√©cnico","Servi√ßo","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","T√©cnico %","Comiss√£o T√©cnico"}
				, new String[] {"horaTrabalhada","quantidadeServico","valorSubtotal","valorDesconto","valorTotal"}) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> vendedores = controller.getVendedores();
							for (Colaborador vd : vendedores) {
								combobox.addItem(vd);
							}

							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> tecnicos = controller.getTecnicos();
							for (Colaborador tc : tecnicos) {
								combobox.addItem(tc);
							}

							return combobox;
						}else if ("servico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ServicoOs> servicoContainer = new BeanItemContainer<>(ServicoOs.class,controller.buscarServicoOs());

							combobox.setContainerDataSource(servicoContainer);
							combobox.setItemCaptionPropertyId("nome");
							return combobox;
							 
						} else if ("horaTrabalhada".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("quantidadeServico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorCobrado".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							return textField;
						} else if ("dataGarantia".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						} else if ("percentualTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("comissaoTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;

						}
						
						return null;
					}
					
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeServico");
								Property<BigDecimal> valorCobrado = get("valorCobrado");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> percentualDesconto = get("percentualDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<BigDecimal> valorOriginal = get("valorOriginal");
								Property<BigDecimal> horaTrabalhada = get("horaTrabalhada");
								Property<BigDecimal> percentualTecnico = get("percentualTecnico");
								Property<BigDecimal> comissaoTecnico = get("comissaoTecnico");
								Property<ServicoOs> servicoProperty = getServicoOs("servico");
								ServicoOs servicoOs = servicoProperty.getValue();
								
								if(servicoOs!=null){
									valorOriginal.setValue(servicoOs.getValorServico());
								}
								
								if (quantidade.getValue() != null && valorCobrado.getValue() != null) {
									BigDecimal q = BigDecimal.ZERO;
									BigDecimal hr = BigDecimal.ZERO;
									BigDecimal qt = BigDecimal.ZERO;

									if(quantidade.getValue()!=null){
										q = quantidade.getValue();
									}
									if(horaTrabalhada.getValue()!=null){
										hr = horaTrabalhada.getValue();
									}
									
									qt = q.add(hr);
									
									BigDecimal vu = valorCobrado.getValue();
									if(servicoOs.getValorMinimoServico().compareTo(vu) == 1){
										controller.mensagemErro("Valor de servi√ßo menor que o valor m√≠nimo permitido");
										return;
									}else{
										valorSubtotal.setValue(qt.multiply(vu));
									}
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									BigDecimal pd = BigDecimal.ZERO;
									BigDecimal vt = BigDecimal.ZERO;
									
									if(percentualDesconto.getValue()!=null){
										pd = percentualDesconto.getValue().divide(new BigDecimal(100));
									}else{
										percentualDesconto.setValue(BigDecimal.ZERO);
									}
									vt = vs.subtract(pd.multiply(vs));
									valorTotal.setValue(vt);
									
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vt.subtract(vd));
								}
								
								if(percentualTecnico.getValue()!=null){
									BigDecimal pt = BigDecimal.ZERO;
									
									pt = percentualTecnico.getValue().divide(new BigDecimal(100));
									comissaoTecnico.setValue(pt.multiply(valorTotal.getValue()));
								}

							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<ServicoOs> getServicoOs(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
				};
			}
			
			protected EntradaServico getNovo() {
				EntradaServico detalhe = controller.novoEntradaServico();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<EntradaServico> items) {
				return true;
			}
		};

		sub.addTab(entradaServicoSubForm, "Entrada servico", null);

		return sub;
	}
	
	public void buildAbaVendaPeca() {
		TabSheet abaVendaPeca = buildVendaPecaSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaVendaPeca);
		subForms.addTab(layout, "Venda de pe√ßa", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildVendaPecaSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		vendaPecaSubForm = new SubFormComponent<VendaPeca, Integer>(
				VendaPeca.class, new String[] { "vendedor", "tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"}, 
				new String[] {"Vendedor", "T√©cnico", "Descri√ß√£o produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"}
				, new String[] { "valorSubtotal", "valorDesconto","valorTotal" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> vendedores = controller.getVendedores();
							for (Colaborador vd : vendedores) {
								combobox.addItem(vd);
							}

							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> tecnicos = controller.getTecnicos();
							for (Colaborador tc : tecnicos) {
								combobox.addItem(tc);
							}
							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<Produto> produtoContainer = new BeanItemContainer<>(Produto.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							combobox.addBlurListener(getBlurListener(container, itemId, propertyId));
							return combobox;
						}else if("tipoPeca".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							combobox.addItem("GENU√çNA");
							combobox.addItem("NAO GENU√çNA");

							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorUnitarioPago".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							return textField;
						}

						return null;
					}
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeProduto");
								Property<BigDecimal> valorUnitarioPago = get("valorUnitarioPago");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> percentualDesconto = get("percentualDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<Produto> produtoProperty = getProduto("produto");
								Produto produto = produtoProperty.getValue();

								if(produto!=null){
									valorUnitario.setValue(produto.getValorVenda());
								}
								
								if(quantidade.getValue() != null){
									BigDecimal q = quantidade.getValue();
									if(produto!=null){
										if(q.compareTo(produto.getQuantidadeEstoque()) == 1){
											controller.mensagemErro("Quantidade informada √© maior que a estocada");
											return;
										}
									}
								}
								
								if (quantidade.getValue() != null && valorUnitarioPago.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitarioPago.getValue();
									if(produto.getPrecoVendaMinimo().compareTo(vu) == 1){
										controller.mensagemErro("Valor de venda menor que o valor m√≠nimo permitido");
										return;
									}else{
										valorSubtotal.setValue(q.multiply(vu));
									}
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									BigDecimal pd = BigDecimal.ZERO;
									BigDecimal vt = BigDecimal.ZERO;
									
									if(percentualDesconto.getValue()!=null){
										pd = percentualDesconto.getValue().divide(new BigDecimal(100));
									}else{
										percentualDesconto.setValue(BigDecimal.ZERO);
									}
									vt = vs.subtract(pd.multiply(vs));
									valorTotal.setValue(vt);
									
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vt.subtract(vd));
								}
								
								System.out.println("propertyId: "+propertyId);
								System.out.println("ValorTotal: "+valorTotal.getValue());
//								System.out.println("ValorTotal: "+vendaPecaSubForm.getDados().get(0).getValorTotal());
								if(propertyId.equals("valorUnitarioPago")){
									if(valorTotal.getValue()!=null){
										BigDecimal totalp = BigDecimal.ZERO;
										if(tfTotalPeca.getValue()!=null){
											totalp = new BigDecimal(tfTotalPeca.getValue());
										}
										totalp.add(valorTotal.getValue());
										System.out.println("totalp: "+totalp);
										tfTotalPeca.setValue(totalp.toString());
									}
								}
								//vendaPecaSubForm
							}
							
							
							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<Produto> getProduto(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
					
				};
			}

			protected VendaPeca getNovo() {
				VendaPeca detalhe = controller.novoVendaPeca();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<VendaPeca> items) {
				return true;
			}
			

		};

		sub.addTab(vendaPecaSubForm, "Venda Pe√ßa", null);

		return sub;
	}

	public void buildAbaMaterialServico() {
		TabSheet abaMaterialServico = buildMaterialServicoSubForm();
		VerticalLayout layout = montaVertical(Arrays.asList(abaMaterialServico));
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		subForms.addTab(layout, "Material de servi√ßo", null);
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildMaterialServicoSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setSizeFull();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setImmediate(true);

		materialServicoSubForm = new SubFormComponent<MaterialServico, Integer>(
				MaterialServico.class, new String[] { "tecnico","produto","quantidadeProduto","valorUnitario","valorTotal"}, 
				new String[] {"T√©cnico", "Descri√ß√£o do produto","Qtd","Valor unit√°rio","Valor total"}, 
				new String[] { "valorTotal" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
					 
						if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();
	
							List<Colaborador> tecnicos = controller.getTecnicos();
							for (Colaborador tc : tecnicos) {
								combobox.addItem(tc);
							}
							combobox.addBlurListener(getBlurListener(container, itemId, propertyId));
							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<Produto> produtoContainer = new BeanItemContainer<>(Produto.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							return textField;
						}
						return null;
					}
					
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeProduto");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<Produto> produtoProperty = getProduto("produto");
								Produto produto = produtoProperty.getValue();
								
								if(produto!=null){
									valorUnitario.setValue(produto.getValorVenda());
								}
								
								if(quantidade.getValue() != null){
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									if(produto!=null){
										if(q.compareTo(produto.getQuantidadeEstoque()) == 1){
											controller.mensagemErro("Quantidade informada √© maior que a estocada");
											return;
										}else{
											valorTotal.setValue(q.multiply(vu));
										}
									}
								}
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<Produto> getProduto(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
				};
			}

			protected MaterialServico getNovo() {
				MaterialServico detalhe = controller.novoMaterialServico();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<MaterialServico> items) {
				return true;
			}
		};

		sub.addTab(materialServicoSubForm, "Material Servi√ßo", null);

		return sub;
	}

	public void buildAbaGarantia() {

		GridLayout gridLayout_1 = new GridLayout(8, 8);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);

		tfNumOsFabricante = ComponentUtil.buildTextField("Nr. OS Fabricante");
		gridLayout_1.addComponent(tfNumOsFabricante,0,1);

		tfNumNotaFiscal = ComponentUtil.buildTextField("Nr. da Nota Fiscal");
		gridLayout_1.addComponent(tfNumNotaFiscal,1,1);

		// Data pr√≥xima revis√£o
		pdfDataNotaFiscal = ComponentUtil.buildPopupDateField("Data nota fiscal");
		gridLayout_1.addComponent(pdfDataNotaFiscal,2,1);

		cbEquipamentoGarantia = new ManyToOneCombo<>();
		cbEquipamentoGarantia.setCaption("Equipamento");
		gridLayout_1.addComponent(cbEquipamentoGarantia, 0, 2, 1, 2);

		cbMarcaGarantia = new ManyToOneCombo<Marca>();
		cbMarcaGarantia.setCaption("Marca");
		gridLayout_1.addComponent(cbMarcaGarantia, 2, 2, 3, 2);

		cbModeloGarantia = new ManyToOneCombo<Modelo>();
		cbModeloGarantia.setCaption("Modelo");
		gridLayout_1.addComponent(cbModeloGarantia, 4, 2, 5, 2);

		cbCorGarantia = new ManyToOneCombo<Cor>();
		cbCorGarantia.setCaption("Cor");
		gridLayout_1.addComponent(cbCorGarantia, 6, 2, 7, 2);

		tfApelido = ComponentUtil.buildTextField("Apelido");
		gridLayout_1.addComponent(tfApelido,0,3);

		tfSerial = ComponentUtil.buildTextField("Nr. Serial");
		gridLayout_1.addComponent(tfSerial,1,3);

		
		subForms.addTab(gridLayout_1, "Garantia", null);
	}

	public void buildAbaAcessorio() {
		TabSheet abaAcessorio = buildAcessorioSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaAcessorio);
		subForms.addTab(layout, "Acess√≥rio", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildAcessorioSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setSizeFull();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setImmediate(true);

		acessorioOsSubForm = new SubFormComponent<AcessorioOs, Integer>(
				AcessorioOs.class, new String[] { "quantidadeAcessorio","acessorio","observacao"}, 
				new String[] {"Quantidade","Nome do acess√≥rio", "Observa√ß√£o"}) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						

						if ("quantidadeAcessorio".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);

							return textField;
						}else if ("acessorio".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<Acessorio> acessorioContainer = new BeanItemContainer<>(Acessorio.class,controller.buscarAcessorio());

							combobox.setContainerDataSource(acessorioContainer);
							combobox.setItemCaptionPropertyId("nome");
							return combobox;
						}else if ("observacao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}
						return null;

					}
				};
			}

			protected AcessorioOs getNovo() {
				AcessorioOs detalhe = controller.novoAcessorioOs();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<AcessorioOs> items) {
				return true;
			}
		};

		sub.addTab(acessorioOsSubForm, "Acessorio", null);

		return sub;
	}

	public void buildAbaObservacao() {

		GridLayout gridLayout_1 = new GridLayout(8, 5);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);

		// Observa√ß√£o da OS
		taObservacaoOS = new TextArea();
		taObservacaoOS = ComponentUtil.buildTextArea("Observa√ß√£o da OS");
		taObservacaoOS.setNullRepresentation("");
		taObservacaoOS.setImmediate(false);
		taObservacaoOS.setWidth("100%");
		taObservacaoOS.setHeight("200px");
		gridLayout_1.addComponent(taObservacaoOS, 0, 1, 5,1);
		
		// Observa√ß√£o do que est√° ficando no local
		taObservacaoLocal = new TextArea();
		taObservacaoLocal.setCaption("Esta ficando no local");
		taObservacaoLocal.setNullRepresentation("");
		taObservacaoLocal.setImmediate(false);
		taObservacaoLocal.setWidth("100%");
		taObservacaoLocal.setHeight("200px");
		gridLayout_1.addComponent(taObservacaoLocal, 0, 2,5,2);
		
		subForms.addTab(gridLayout_1, "Obs", null);
	}
	
	public void buildAbaFoto() {

		gridLayoutFoto = new GridLayout(8, 8);
		gridLayoutFoto.setImmediate(false);
		gridLayoutFoto.setWidth("100.0%");
		gridLayoutFoto.setMargin(true);
		gridLayoutFoto.setSpacing(true);

		taObservacaoFoto = ComponentUtil.buildTextArea("Informa√ß√£o geral da foto");
		gridLayoutFoto.addComponent(taObservacaoFoto,0,1,3,1);
		
		// upArquivo
		upArquivo = new SlowMultiFileUpload() {
					
			@Override
			protected void handleFile(File file, String fileName, String mimeType,	long length) {
						
				atualizaMiniatura(file, fileName.toLowerCase().trim(), "", 0);
						
				new Notification("Arquivo", "Arquivo enviado com sucesso",
						Notification.TYPE_HUMANIZED_MESSAGE, true).show(Page
						.getCurrent());
			}
		};
		upArquivo.setCaption("Documento");
		upArquivo.setUploadButtonCaption("Selecione o(s) arquivo(s)");
		gridLayoutFoto.addComponent(upArquivo, 0, 2);

		subForms.addTab(gridLayoutFoto, "Foto", null);
	}
	
	public void atualizaMiniatura(List<DocumentoArquivo> documentos) {
		for (DocumentoArquivo documento : documentos) {
			atualizaMiniatura(documento.getFile(), documento.getFile()
					.getName(), "", 0);
		}

	}

	public void buildAbaOsAgrupada() {
		TabSheet abaOsAgrupada = buildOsAgrupadaSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaOsAgrupada);
		subForms.addTab(layout, "OS agrupada", null);
	}
		
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildOsAgrupadaSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
//		osAgrupadaSubForm = new SubFormComponent<OrdemServico, Integer>(OrdemServico.class, new String[] { "id", "informacaoGeral.dataEntrada","informacaoGeral.dataEfetivacao", 
 //           "produto", "servico","valorDesconto", "valorTotalOs", "garantia.equipamento","garantia.marca", "garantia.modelo", "garantia.modelo" },
//	new String[] { "Nr. OS", "Data", "Efetiva√ß√£o","Produto", "Servi√ßo", "Desconto", "Total","Equipamento", "Marca", "Modelo",
//			"Serial" }, new String[] {"valorTotal" }) {

		osAgrupadaSubForm = new SubFormComponent<OrdemServico, Integer>(OrdemServico.class, new String[] { "id"},
				new String[] {"Nr. OS"}, new String[] {"valorTotal" }) {

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
					
						if ("id".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						}else if("ordemServico".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<InformacaoGeral> infoContainer = new BeanItemContainer<>(InformacaoGeral.class,controller.buscarInformacaoGeral());

							combobox.setContainerDataSource(infoContainer);
							combobox.setItemCaptionPropertyId("dataEntrada");

							combobox.setReadOnly(true);
							return combobox;
							
//						}else if ("informacaoGeral".equals(propertyId)) {
//								TextField infoGeralText = ComponentUtil.buildTextField(null);
//
//								infoGeralText.setConverter(new Converter<String, InformacaoGeral>() {
//
//									/**
//									 * 
//									 */
//									private static final long serialVersionUID = 1L;
//
//									@Override
//									public InformacaoGeral convertToModel(String value, Class<? extends InformacaoGeral> targetType, Locale locale)
//											throws com.vaadin.data.util.converter.Converter.ConversionException {
//										return null;
//									}
//
//									@Override
//									public Class<InformacaoGeral> getModelType() {
//										return InformacaoGeral.class;
//									}
//
//									@Override
//									public Class<String> getPresentationType() {
//										return String.class;
//									}
//
//									@Override
//									public String convertToPresentation(
//											InformacaoGeral value,
//											Class<? extends String> targetType,
//											Locale locale)
//											throws com.vaadin.data.util.converter.Converter.ConversionException {
//										// TODO Auto-generated method stub
//										return null;
//									}
//								});
//
//								infoGeralText.setReadOnly(true);
//								return infoGeralText;
//
						}						
						return null;
					}
				};
			}

			@Override
			public boolean validateItems(List<OrdemServico> items) {
				// TODO Auto-generated method stub
				return false;
			}

		};

		sub.addTab(osAgrupadaSubForm, "O.S agrupada", null);

		return sub;
	}
		
		public void buildAbaInformacaoFinanceira() {
		
		TabSheet finForms = new TabSheet();
		finForms.setWidth("100.0%");
		finForms.setHeight("100.0%");
		finForms.setSizeFull();
		finForms.setImmediate(true);

		GridLayout gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(10);
		gridLayout_1.setColumns(5);
		
		lblTotalPeca = new Label();
		lblTotalPeca.setCaption("Total de pe√ßas:");
		lblTotalPeca.setHeight("-1px");
		gridLayout_1.addComponent(lblTotalPeca, 0, 1,0,1);
		
		// Total de pe√ßas
		tfTotalPeca = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfTotalPeca, 1, 1,1,1);

		lblLucroPeca = new Label();
		lblLucroPeca.setCaption("Total lucro de pe√ßas:");
		lblLucroPeca.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroPeca, 0, 2,0,2);

		// Total lucro de pe√ßas
		tfLucroPeca = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroPeca, 1, 2,1,2);

		lblTotalServico = new Label();
		lblTotalServico.setCaption("Total de servi√ßos:");
		lblTotalServico.setHeight("-1px");
		gridLayout_1.addComponent(lblTotalServico, 0, 3,0,3);
		
		// Total de servi√ßo
		tfTotalServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfTotalServico, 1, 3,1,3);


		// Total lucro servi√ßo
		lblLucroServico = new Label();
		lblLucroServico.setCaption("Total lucro de servi√ßos:");
		lblLucroServico.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroServico, 0, 4,0,4);
		
		tfLucroServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroServico, 1, 4,1,4);


		// comiss√£o paga ao t√©cnico
		lblComissaoTecnico = new Label();
		lblComissaoTecnico.setCaption("Comiss√£o paga ao T√©cnico:");
		lblComissaoTecnico.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoTecnico, 0, 5,0,5);
		
		tfComissaoTecnico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoTecnico, 1, 5,1,5);
		
		// Comiss√£o paga ao vendedor
		lblComissaoVendedor = new Label();
		lblComissaoVendedor.setCaption("Comiss√£o paga ao vendedor:");
		lblComissaoVendedor.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoVendedor, 0,6,0,6);
		
		tfComissaoVendedor = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoVendedor, 1, 6,1,6);

		// Comiss√£o paga ao atendente
		lblComissaoAtendente = new Label();
		lblComissaoAtendente.setCaption("Comiss√£o paga ao atendente:");
		lblComissaoAtendente.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoAtendente, 0, 7,0,7);
		
		tfComissaoAtendente = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoAtendente, 1, 7,1,7);

		// Desconto
        lblDesconto = new Label();
        lblDesconto.setCaption("Desconto:");
        lblDesconto.setHeight("-1px");
		gridLayout_1.addComponent(lblDesconto, 0, 8,0,8);

		tfDesconto = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfDesconto, 1, 8,1,8);

		// Lucro parcial de servi√ßo
		lblLucroParcialServico = new Label();
		lblLucroParcialServico.setCaption("Lucro parcial do servi√ßo:");
		lblLucroParcialServico.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroParcialServico, 0, 9,0,9);
		
		tfLucroParcialServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroParcialServico, 1, 9,1,9);

		finForms.addTab(gridLayout_1, "Informa√ß√£o geral", null);

		finForms.addTab(buildEntradaServicoFinanceiraSubForm(), "Detalhe do servi√ßo", null);

		finForms.addTab(buildVendaPecaFinanceiraSubForm(), "Detalhe do produto", null);

		subForms.addTab(finForms, "Informa√ß√£o financeira", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEntradaServicoFinanceiraSubForm() {
		VerticalLayout entradaSevicoLayout = new VerticalLayout();
		entradaSevicoLayout.setImmediate(false);
		entradaSevicoLayout.setSizeFull();
		entradaSevicoLayout.setMargin(false);
		entradaSevicoLayout.setSpacing(true);

		entradaServicoFinanceiraSubForm = new SubFormComponent<EntradaServico, Integer>(
				EntradaServico.class, new String[] { "vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal",
					"valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"}, new String[] {
						"Vendedor","T√©cnico","Servi√ßo","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","T√©cnico %","Comiss√£o T√©cnico"}
				) {
//, new String[] {"horaTrabalhada","quantidadeServico","valorSubtotal","valorDesconto","valorTotal"}
			@Override
			protected void adicionarBotoes(Table table) {

			}
			
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> vendedores = controller.getVendedores();
							for (Colaborador vd : vendedores) {
								combobox.addItem(vd);
							}
							combobox.setReadOnly(true);
							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> tecnicos = controller.getTecnicos();
							for (Colaborador tc : tecnicos) {
								combobox.addItem(tc);
							}

							combobox.setReadOnly(true);
							return combobox;
						}else if ("servico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ServicoOs> servicoContainer = new BeanItemContainer<>(ServicoOs.class,controller.buscarServicoOs());

							combobox.setContainerDataSource(servicoContainer);
							combobox.setItemCaptionPropertyId("nome");

							combobox.setReadOnly(true);
							return combobox;
							 
						} else if ("horaTrabalhada".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("quantidadeServico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorCobrado".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("dataGarantia".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							popupDateField.setReadOnly(true);
							return popupDateField;
						} else if ("percentualTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("comissaoTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;

						}
						
						return null;
					}
				};
			}
			
			@Override
			public boolean validateItems(List<EntradaServico> items) {
				return true;
			}
		};

		entradaSevicoLayout.addComponent(this.entradaServicoFinanceiraSubForm);
		entradaSevicoLayout.setExpandRatio(entradaServicoFinanceiraSubForm, 1);

		return entradaSevicoLayout;

	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildVendaPecaFinanceiraSubForm() {

		VerticalLayout vendaPecaLayout = new VerticalLayout();
		vendaPecaLayout.setImmediate(false);
		vendaPecaLayout.setSizeFull();
		vendaPecaLayout.setMargin(false);
		vendaPecaLayout.setSpacing(true);
		
		vendaPecaFinanceiraSubForm = new SubFormComponent<VendaPeca, Integer>(
				VendaPeca.class, new String[] { "vendedor", "tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"}, 
				new String[] {"Vendedor", "T√©cnico", "Descri√ß√£o produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"}
				) {
//, new String[] { "valorSubtotal", "valorDesconto","valorTotal" }
			@Override
			protected void adicionarBotoes(Table table) {

			}
			

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();
							
							List<Colaborador> vendedores = controller.getVendedores();
							for (Colaborador vd : vendedores) {
								combobox.addItem(vd);
							}
							combobox.setReadOnly(true);
							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<Colaborador> tecnicos = controller.getTecnicos();
							for (Colaborador tc : tecnicos) {
								combobox.addItem(tc);
							}
							combobox.setReadOnly(true);

							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<Produto> produtoContainer = new BeanItemContainer<>(Produto.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							combobox.setReadOnly(true);
							return combobox;
						}else if("tipoPeca".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							combobox.addItem("GENU√çNA");
							combobox.addItem("NAO GENU√çNA");
							combobox.setReadOnly(true);

							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorUnitarioPago".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}

						return null;
					}
				};
				
			}

			@Override
			public boolean validateItems(List<VendaPeca> items) {
				return true;
			}
		};

		vendaPecaLayout.addComponent(this.vendaPecaFinanceiraSubForm);
		vendaPecaLayout.setExpandRatio(vendaPecaFinanceiraSubForm, 1);

		return vendaPecaLayout;
	}

	public enum Tipo {

		GENUINA("GENU√çNA", "G"), NAOGENUINA("N√ÉO GENU√çNA", "N");

		private Tipo(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static Tipo getTipo(String codigo) {
			for (Tipo e : Tipo.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}
		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	@SuppressWarnings("deprecation")
	public void atualizaMiniatura(File arquivo, String nomeArquivo, String acao, int contador) {
  
		 if(arquivo.length() > 0){
		 
				List<String> extensao= new ArrayList<String>();
				extensao.add(".exe");
				extensao.add(".bat");
				extensao.add(".bin");
				
				if(sources == null){
					
					nPanel = new Panel();
					nPanel.setImmediate(true);
					nPanel.setHeight("350px");
					nPanel.setWidth("100%");
					nPanel.setScrollTop(1600);
				    sources = new GridLayout(12,100);
				    nPanel.setContent(sources);
				    gridLayoutFoto.addComponent(nPanel, 0, 3, 5,3);
		           
				}else{
					
					if(acao.equals("A") && contador == 1){
						this.gridLayoutFoto.removeComponent(nPanel);
						this.sources.markAsDirtyRecursive();
						this.gridLayoutFoto.markAsDirtyRecursive();
						this.mainLayout.markAsDirtyRecursive();
						this.markAsDirtyRecursive();
						
						nPanel = new Panel();
						nPanel.setImmediate(true);
						nPanel.setHeight("350px");
						nPanel.setWidth("100%");
						nPanel.setScrollTop(1600);
					    sources = new GridLayout(12,100);
					    nPanel.setContent(sources);
					    gridLayoutFoto.addComponent(nPanel, 0, 3, 5, 3);
					}
					
				}
				
		
				if (!extensao.contains(getExtensao(nomeArquivo))) {
					
		            nomeArquivoVisualizacao = nomeArquivo;
				
					if(!this.idDocumento.equals("")){
						 nomeArquivoVisualizacao = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + this.idDocumento+"/"+ nomeArquivoVisualizacao;
					}
					else{
						nomeArquivoVisualizacao = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + nomeArquivoVisualizacao;
					}
					
					try {
						File tmp = gravarArquivo(nomeArquivoVisualizacao,
								Util.lerBytesArquivo(arquivo));
						nomeArquivoVisualizacao = tmp.getAbsolutePath();
						
						Embedded image = new Embedded();
						if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("doc") != -1){
							image.setSource(new ThemeResource("img/word.png"));
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("xls") != -1){
							image.setSource(new ThemeResource("img/excel.png"));
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("pdf") != -1){
							image.setSource(new ThemeResource("img/pdf.png"));
							
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("txt") != -1){
							image.setSource(new ThemeResource("img/txtfile.png"));
						}else{
							image.setSource(new FileResource(tmp));
						}
						
						image.setWidth("110px");
						image.setHeight("90px");
					
						image.setId(nomeArquivoVisualizacao);
						
						image.addListener(new ClickListener(){
						    @Override
						    public void click(com.vaadin.event.MouseEvents.ClickEvent event){
						    	
						    	VerticalLayout mainLayoutViewer = new VerticalLayout();
						    	mainLayoutViewer.setSizeFull();
						    	mainLayoutViewer.setMargin(true);
						    	mainLayoutViewer.setSpacing(true);
						        
						         imageViewer.setSizeFull();
						         imageViewer.setImages(createImageList());
						         imageViewer.setAnimationEnabled(false);
						         imageViewer.setSideImageRelativeWidth(0.7f);
		
						         imageViewer.addListener(new ImageViewer.ImageSelectionListener() {
									
									@Override
									public void imageSelected(ImageSelectedEvent e) {
										 if (e.getSelectedImageIndex() >= 0) {
						                     selectedImage.setValue(String.valueOf(e
						                             .getSelectedImageIndex()));
						                 } else {
						                     selectedImage.setValue("-");
						                 }
										
									}
							     });
						         HorizontalLayout hl = new HorizontalLayout();
						         hl.setSizeUndefined();
						         hl.setMargin(false);
						         hl.setSpacing(true);
						         mainLayoutViewer.addComponent(hl);
						         mainLayoutViewer.addComponent(imageViewer);
						         mainLayoutViewer.setExpandRatio(imageViewer, 1);
		
						         Layout ctrls = createControls();
						         mainLayoutViewer.addComponent(ctrls);
						         mainLayoutViewer.setComponentAlignment(ctrls, Alignment.BOTTOM_CENTER);
						         
						         
							        
						         // Configure the windws layout; by default a VerticalLayout
						         VerticalLayout layout = new VerticalLayout();
						         layout.setMargin(true);
						         layout.setSpacing(true);
						        
						         com.vaadin.ui.Button close = new com.vaadin.ui.Button("Fechar", new com.vaadin.ui.Button.ClickListener() {
						             // inline click-listener
						             public void buttonClick(ClickEvent event) {
						                 // close the window by removing it from the main window
						             	subwindow.close();
						             }
						         });
						         close.setClickShortcut(KeyCode.ESCAPE, null);
						         
						         // The components added to the window are actually added to the window's
						         // layout; you can use either. Alignments are set using the layout
						         layout.addComponent(close);
						         layout.setComponentAlignment(close, Alignment.BOTTOM_RIGHT);
						         mainLayoutViewer.addComponent(layout);
						        
						         imageViewer.setCenterImageIndex(0);
						         imageViewer.focus();
						         subwindow.setContent(mainLayoutViewer);
						    	
						           subwindow.center();
						           UI.getCurrent().addWindow(subwindow);
						    }
					    });
						
						
						// Wrap it in a Drag and Drop Wrapper
						DragAndDropWrapper wrapper = new DragAndDropWrapper(image);
						wrapper.setSizeUndefined(); // Shrink to fit
						// Enable dragging the wrapper
						wrapper.setDragStartMode(DragStartMode.WRAPPER);
						
		
						linkDonwload = new Link(nomeArquivo, new FileResource(tmp));
						linkDonwload.setTargetName("_blank");
						
						//GridLayout gridImage = new GridLayout(2,2);
						//gridImage.addComponent(wrapper, 0, 1);
						//gridImage.addComponent(linkDonwload, 1, 2);
									           
						//sources.addComponent(gridImage);
						
						sources.addComponent(wrapper);
						sources.addComponent(linkDonwload);
						
						listArquivos.add(nomeArquivoVisualizacao);
				
						
						
					} catch (Exception e) {
						// TODO: handle exception
					}		
					
					this.markAsDirtyRecursive();
					this.requestRepaintAll();
					
					
					
				}
		 }else{
			 try{
				 arquivo.delete();
			 }catch(Exception e){}
		 }
	}

	public PopupDateField getPdfDataEntrada() {
		return pdfDataEntrada;
	}

	public void setPdfDataEntrada(PopupDateField pdfDataEntrada) {
		this.pdfDataEntrada = pdfDataEntrada;
	}

	public PopupDateField getPdfDataEfetiv() {
		return pdfDataEfetiv;
	}

	public void setPdfDataEfetiv(PopupDateField pdfDataEfetiv) {
		this.pdfDataEfetiv = pdfDataEfetiv;
	}

	public void setCbCliente(ManyToOneCombo<Cliente> cbCliente) {
		this.cbCliente = cbCliente;
	}

	public void setCbPlaca(ManyToOneCombo<Carro> cbPlaca) {
		this.cbPlaca = cbPlaca;
	}

	public void setCbRevenda(ManyToOneCombo<Revenda> cbRevenda) {
		this.cbRevenda = cbRevenda;
	}

	public void setCbEquipamento(ManyToOneCombo<Equipamento> cbEquipamento) {
		this.cbEquipamento = cbEquipamento;
	}

	public void setCbMarca(ManyToOneCombo<Marca> cbMarca) {
		this.cbMarca = cbMarca;
	}

	public void setCbModelo(ManyToOneCombo<Modelo> cbModelo) {
		this.cbModelo = cbModelo;
	}

	public void setCbCor(ManyToOneCombo<Cor> cbCor) {
		this.cbCor = cbCor;
	}

	public void setCbStatus(ManyToOneCombo<StatusOs> cbStatus) {
		this.cbStatus = cbStatus;
	}

	public void setCbSituacaoServico(
			ManyToOneCombo<SituacaoServico> cbSituacaoServico) {
		this.cbSituacaoServico = cbSituacaoServico;
	}

	public void setCbAtendente(ManyToOneCombo<Colaborador> cbAtendente) {
		this.cbAtendente = cbAtendente;
	}

	public void setCbTipoServico(ManyToOneCombo<TipoServico> cbTipoServico) {
		this.cbTipoServico = cbTipoServico;
	}

	public void setCbFormaPagamento(ManyToOneCombo<TipoPagamento> cbFormaPagamento) {
		this.cbFormaPagamento = cbFormaPagamento;
	}

	public TextField getTfNumeroOS() {
		return tfNumeroOS;
	}

	public void setTfNumeroOS(TextField tfNumeroOS) {
		this.tfNumeroOS = tfNumeroOS;
	}

	public TextField getTfNumeroComanda() {
		return tfNumeroComanda;
	}

	public void setTfNumeroComanda(TextField tfNumeroComanda) {
		this.tfNumeroComanda = tfNumeroComanda;
	}

	public TextField getTfCliente() {
		return tfCliente;
	}

	public void setTfCliente(TextField tfCliente) {
		this.tfCliente = tfCliente;
	}

	public TextField getTfNumOsFabricante() {
		return tfNumOsFabricante;
	}

	public void setTfNumOsFabricante(TextField tfNumOsFabricante) {
		this.tfNumOsFabricante = tfNumOsFabricante;
	}

	public TextField getTfNumNotaFiscal() {
		return tfNumNotaFiscal;
	}

	public void setTfNumNotaFiscal(TextField tfNumNotaFiscal) {
		this.tfNumNotaFiscal = tfNumNotaFiscal;
	}

	public TextField getTfApelido() {
		return tfApelido;
	}

	public void setTfApelido(TextField tfApelido) {
		this.tfApelido = tfApelido;
	}

	public TextField getTfSerial() {
		return tfSerial;
	}

	public void setTfSerial(TextField tfSerial) {
		this.tfSerial = tfSerial;
	}
	
	public ManyToOneCombo<Revenda> getCbRevenda() {
		return cbRevenda;
	}

	public ManyToOneCombo<Equipamento> getCbEquipamento() {
		return cbEquipamento;
	}

	public ManyToOneCombo<Marca> getCbMarca() {
		return cbMarca;
	}

	public ManyToOneCombo<Modelo> getCbModelo() {
		return cbModelo;
	}

	public ManyToOneCombo<Cor> getCbCor() {
		return cbCor;
	}

	public TextField getTfTotalPeca() {
		return tfTotalPeca;
	}

	public void setTfTotalPeca(TextField tfTotalPeca) {
		this.tfTotalPeca = tfTotalPeca;
	}

	public TextField getTfLucroPeca() {
		return tfLucroPeca;
	}

	public void setTfLucroPeca(TextField tfLucroPeca) {
		this.tfLucroPeca = tfLucroPeca;
	}

	public TextField getTfTotalServico() {
		return tfTotalServico;
	}

	public void setTfTotalServico(TextField tfTotalServico) {
		this.tfTotalServico = tfTotalServico;
	}

	public TextField getTfLucroServico() {
		return tfLucroServico;
	}

	public void setTfLucroServico(TextField tfLucroServico) {
		this.tfLucroServico = tfLucroServico;
	}

	public TextField getTfComissaoTecnico() {
		return tfComissaoTecnico;
	}

	public void setTfComissaoTecnico(TextField tfComissaoTecnico) {
		this.tfComissaoTecnico = tfComissaoTecnico;
	}

	public TextField getTfComissaoVendedor() {
		return tfComissaoVendedor;
	}

	public void setTfComissaoVendedor(TextField tfComissaoVendedor) {
		this.tfComissaoVendedor = tfComissaoVendedor;
	}

	public TextField getTfComissaoAtendente() {
		return tfComissaoAtendente;
	}

	public void setTfComissaoAtendente(TextField tfComissaoAtendente) {
		this.tfComissaoAtendente = tfComissaoAtendente;
	}

	public TextField getTfDesconto() {
		return tfDesconto;
	}

	public void setTfDesconto(TextField tfDesconto) {
		this.tfDesconto = tfDesconto;
	}

	public TextField getTfLucroParcialServico() {
		return tfLucroParcialServico;
	}

	public void setTfLucroParcialServico(TextField tfLucroParcialServico) {
		this.tfLucroParcialServico = tfLucroParcialServico;
	}

	public TextArea getTaObservacaoLaudoTecnico() {
		return taObservacaoLaudoTecnico;
	}

	public void setTaObservacaoLaudoTecnico(TextArea taObservacaoLaudoTecnico) {
		this.taObservacaoLaudoTecnico = taObservacaoLaudoTecnico;
	}

	public TextArea getTaObservacaoLaudoFerramentas() {
		return taObservacaoLaudoFerramentas;
	}

	public void setTaObservacaoLaudoFerramentas(
			TextArea taObservacaoLaudoFerramentas) {
		this.taObservacaoLaudoFerramentas = taObservacaoLaudoFerramentas;
	}

	public TextArea getTaTermoGarantia() {
		return taTermoGarantia;
	}

	public void setTaTermoGarantia(TextArea taTermoGarantia) {
		this.taTermoGarantia = taTermoGarantia;
	}

	public TextArea getTaObservacaoLocal() {
		return taObservacaoLocal;
	}

	public void setTaObservacaoLocal(TextArea taObservacaoLocal) {
		this.taObservacaoLocal = taObservacaoLocal;
	}

	public TextArea getTaObservacaoOS() {
		return taObservacaoOS;
	}

	public void setTaObservacaoOS(TextArea taObservacaoOS) {
		this.taObservacaoOS = taObservacaoOS;
	}

	public ManyToOneCombo<Cliente> getCbCliente() {
		return cbCliente;
	}

	public TextField getTfTotalServicoGeral() {
		return tfTotalServicoGeral;
	}

	public void setTfTotalServicoGeral(TextField tfTotalServicoGeral) {
		this.tfTotalServicoGeral = tfTotalServicoGeral;
	}

	public TextField getTfTotalProdutoGeral() {
		return tfTotalProdutoGeral;
	}

	public void setTfTotalProdutoGeral(TextField tfTotalProdutoGeral) {
		this.tfTotalProdutoGeral = tfTotalProdutoGeral;
	}

	public TextField getTfTotalFreteGeral() {
		return tfTotalFreteGeral;
	}

	public void setTfTotalFreteGeral(TextField tfTotalFreteGeral) {
		this.tfTotalFreteGeral = tfTotalFreteGeral;
	}

	public TextField getTfTotalOutrosGeral() {
		return tfTotalOutrosGeral;
	}

	public void setTfTotalOutrosGeral(TextField tfTotalOutrosGeral) {
		this.tfTotalOutrosGeral = tfTotalOutrosGeral;
	}

	public TextField getTfDescontoGeral() {
		return tfDescontoGeral;
	}

	public void setTfDescontoGeral(TextField tfDescontoGeral) {
		this.tfDescontoGeral = tfDescontoGeral;
	}

	public TextField getTfTotalGeral() {
		return tfTotalGeral;
	}

	public void setTfTotalGeral(TextField tfTotalGeral) {
		this.tfTotalGeral = tfTotalGeral;
	}

	public PopupDateField getPdfProximaRevisao() {
		return pdfProximaRevisao;
	}

	public void setPdfProximaRevisao(PopupDateField pdfProximaRevisao) {
		this.pdfProximaRevisao = pdfProximaRevisao;
	}

	public PopupDateField getPdfEntrega() {
		return pdfEntrega;
	}

	public void setPdfEntrega(PopupDateField pdfEntrega) {
		this.pdfEntrega = pdfEntrega;
	}

	public TextField getTfRazao() {
		return tfRazao;
	}

	public void setTfRazao(TextField tfRazao) {
		this.tfRazao = tfRazao;
	}

	public TextField getTfEndereco() {
		return tfEndereco;
	}

	public void setTfEndereco(TextField tfEndereco) {
		this.tfEndereco = tfEndereco;
	}

	public TextField getTfCidade() {
		return tfCidade;
	}

	public void setTfCidade(TextField tfCidade) {
		this.tfCidade = tfCidade;
	}

	public TextField getTfBairro() {
		return tfBairro;
	}

	public void setTfBairro(TextField tfBairro) {
		this.tfBairro = tfBairro;
	}

	public TextField getTfUf() {
		return tfUf;
	}

	public void setTfUf(TextField tfUf) {
		this.tfUf = tfUf;
	}

	public TextField getTfFone() {
		return tfFone;
	}

	public void setTfFone(TextField tfFone) {
		this.tfFone = tfFone;
	}

	public TextField getTfkm() {
		return tfkm;
	}

	public void setTfkm(TextField tfkm) {
		this.tfkm = tfkm;
	}

	public TextField getTfData() {
		return tfData;
	}

	public void setTfData(TextField tfData) {
		this.tfData = tfData;
	}

	public TextField getTfMarca() {
		return tfMarca;
	}

	public void setTfMarca(TextField tfMarca) {
		this.tfMarca = tfMarca;
	}

	public TextField getTfModelo() {
		return tfModelo;
	}

	public void setTfModelo(TextField tfModelo) {
		this.tfModelo = tfModelo;
	}

	public TextField getTfAno() {
		return tfAno;
	}

	public void setTfAno(TextField tfAno) {
		this.tfAno = tfAno;
	}

	public TextField getTfMotorizacao() {
		return tfMotorizacao;
	}

	public void setTfMotorizacao(TextField tfMotorizacao) {
		this.tfMotorizacao = tfMotorizacao;
	}

	public TextField getTfCombustivel() {
		return tfCombustivel;
	}

	public void setTfCombustivel(TextField tfCombustivel) {
		this.tfCombustivel = tfCombustivel;
	}

	public TextField getTfChassi() {
		return tfChassi;
	}

	public void setTfChassi(TextField tfChassi) {
		this.tfChassi = tfChassi;
	}

	public TextArea getTaObservacaoDefeito() {
		return taObservacaoDefeito;
	}

	public void setTaObservacaoDefeito(TextArea taObservacaoDefeito) {
		this.taObservacaoDefeito = taObservacaoDefeito;
	}
	
	public ManyToOneCombo<Carro> getCbPlaca() {
		return cbPlaca;
	}

	public ManyToOneCombo<StatusOs> getCbStatus() {
		return cbStatus;
	}

	public ManyToOneCombo<SituacaoServico> getCbSituacaoServico() {
		return cbSituacaoServico;
	}

	public ManyToOneCombo<Colaborador> getCbAtendente() {
		return cbAtendente;
	}

	public ManyToOneCombo<TipoServico> getCbTipoServico() {
		return cbTipoServico;
	}

	public ManyToOneCombo<TipoPagamento> getCbFormaPagamento() {
		return cbFormaPagamento;
	}
	
    public SlowMultiFileUpload getUpArquivo() {
		return upArquivo;
	}

	public void setUpArquivo(SlowMultiFileUpload upArquivo) {
		this.upArquivo = upArquivo;
	}

	public PopupDateField getPdfDataNotaFiscal() {
		return pdfDataNotaFiscal;
	}

	public void setPdfDataNotaFiscal(PopupDateField pdfDataNotaFiscal) {
		this.pdfDataNotaFiscal = pdfDataNotaFiscal;
	}

	public ManyToOneCombo<Equipamento> getCbEquipamentoGarantia() {
		return cbEquipamentoGarantia;
	}

	public void setCbEquipamentoGarantia(
			ManyToOneCombo<Equipamento> cbEquipamentoGarantia) {
		this.cbEquipamentoGarantia = cbEquipamentoGarantia;
	}

	public ManyToOneCombo<Marca> getCbMarcaGarantia() {
		return cbMarcaGarantia;
	}

	public void setCbMarcaGarantia(ManyToOneCombo<Marca> cbMarcaGarantia) {
		this.cbMarcaGarantia = cbMarcaGarantia;
	}

	public ManyToOneCombo<Modelo> getCbModeloGarantia() {
		return cbModeloGarantia;
	}

	public void setCbModeloGarantia(ManyToOneCombo<Modelo> cbModeloGarantia) {
		this.cbModeloGarantia = cbModeloGarantia;
	}

	public ManyToOneCombo<Cor> getCbCorGarantia() {
		return cbCorGarantia;
	}

	public void setCbCorGarantia(ManyToOneCombo<Cor> cbCorGarantia) {
		this.cbCorGarantia = cbCorGarantia;
	}

	public GridLayout getGridLayoutFoto() {
		return gridLayoutFoto;
	}

	public void setGridLayoutFoto(GridLayout gridLayoutFoto) {
		this.gridLayoutFoto = gridLayoutFoto;
	}

	public String getIdEmpresa() {
		return idEmpresa;
	}

	public void setIdEmpresa(String idEmpresa) {
		this.idEmpresa = idEmpresa;
	}

	public String getIdDocumento() {
		return idDocumento;
	}

	public void setIdDocumento(String idDocumento) {
		this.idDocumento = idDocumento;
	}

    public List<String> getListArquivos() {
		return listArquivos;
	}

	public void setListArquivos(List<String> listArquivos) {
		this.listArquivos = listArquivos;
	}

	private List<FileResource> createImageList() {
        List<FileResource> img = new ArrayList<FileResource>();
    	String diretorio = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa ;
		
		if(!this.idDocumento.equals("")){
			diretorio = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + this.idDocumento;
		}
		
		File dir = new File(diretorio); 
		File fList[] = dir.listFiles(); 

		for ( int i = 0; i < fList.length; i++ ){ 
		    String arquivo = fList[i].getAbsolutePath();
		    
		    File arqImg = new File(arquivo);
			img.add(new FileResource(arqImg));
		} 
		
        return img;
    }
    
	private File gravarArquivo(String caminho, byte[] dados) throws IOException {
		File arquivo = new File(caminho);
		FileOutputStream fos = null;
		try {
			if (!arquivo.exists()) {
				File pastaPai = arquivo.getParentFile();
				if (pastaPai != null) {
					pastaPai.mkdirs();
					arquivo.createNewFile();
				}
			}
			fos = new FileOutputStream(arquivo);
			fos.write(dados);
		} catch (IOException e) {
			throw e;
		} finally {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return arquivo;

	}

	private String getExtensao(String caminho) {
		if (caminho != null && !caminho.isEmpty()) {
			int indiceExtensao = caminho.lastIndexOf(".");
			if (indiceExtensao > -1) {
				return caminho.substring(indiceExtensao, caminho.length());
			}
		}
		return "";
	}
	
	private Layout createControls() {
        HorizontalLayout hl = new HorizontalLayout();
        hl.setSizeUndefined();
        hl.setMargin(false);
        hl.setSpacing(true);

        CheckBox c = new CheckBox("Efeito");
        c.setImmediate(true);
        c.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                boolean checked = (Boolean) event.getProperty().getValue();
                imageViewer.setHiLiteEnabled(checked);
                imageViewer.focus();
            }
        });
        c.setValue(true);
        hl.addComponent(c);
        hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

        c = new CheckBox("AnimaÔøΩÔøΩo");
        c.setImmediate(true);
        c.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                boolean checked = (Boolean) event.getProperty().getValue();
                imageViewer.setAnimationEnabled(checked);
                imageViewer.focus();
            }
        });
        c.setValue(true);
        hl.addComponent(c);
        hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

        Slider s = new Slider("DuraÔøΩÔøΩo AnimaÔøΩÔøΩo");
        s.setMax(2000);
        s.setMin(200);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    int duration = (int) Math.round((Double) event
                            .getProperty().getValue());
                    imageViewer.setAnimationDuration(duration);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(350d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Largura da Imagem Centro");
        s.setResolution(2);
        s.setMax(1);
        s.setMin(0.1);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setCenterImageRelativeWidth((float) d);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(0.55);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Contagem imagem");
        s.setMax(5);
        s.setMin(1);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    int sideImageCount = (int) Math.round((Double) event
                            .getProperty().getValue());
                    imageViewer.setSideImageCount(sideImageCount);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(2d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Tamanho Imagem (miniatura)");
        s.setResolution(2);
        s.setMax(0.8);
        s.setMin(0.5);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setSideImageRelativeWidth((float) d);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(0.65);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Preenchimento Horizontal");
        s.setMax(10);
        s.setMin(0);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setImageHorizontalPadding((int) Math.round(d));
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(1d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Preenchimento Vertical");
        s.setMax(10);
        s.setMin(0);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setImageVerticalPadding((int) Math.round(d));
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(5d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        selectedImage.setWidth("50px");
        selectedImage.setImmediate(true);
        hl.addComponent(selectedImage);
        hl.setComponentAlignment(selectedImage, Alignment.BOTTOM_CENTER);

        return hl;
    }
	
	class SlowMultiFileUpload extends MultiFileUpload {
        @Override
        protected void handleFile(File file, String fileName, String mimeType,
                long length) {
            String msg = fileName + " uploaded.";
           new Notification("Arquivo", msg,
					Notification.TYPE_HUMANIZED_MESSAGE, true).show(Page
					.getCurrent());
        }

   
    }
	
	public void preencheEntradaServicoSubForm(List<EntradaServico> entradaServico) {
		entradaServicoSubForm.fillWith(entradaServico);
	}
	
	public void preencheVendaPecaSubForm(List<VendaPeca> vendaPeca) {
		vendaPecaSubForm.fillWith(vendaPeca);
	}

	public void preencheOsAgrupadaSubForm(List<OrdemServico> ordemServico) {
		if(ordemServico!=null){
			osAgrupadaSubForm.fillWith(ordemServico);
		}
	}

	public void preencheVendaPecaFinanceiraSubForm(List<VendaPeca> vendaPeca) {
		vendaPecaFinanceiraSubForm.fillWith(vendaPeca);
	}

	public void preencheEntradaServicoFinanceiraSubForm(List<EntradaServico> entradaServico) {
//		BigDecimal totalEntradaServico = BigDecimal.ZERO;
		entradaServicoFinanceiraSubForm.fillWith(entradaServico);
//		for(EntradaServico es : entradaServico){
//			totalEntradaServico.add(es.getValorTotal());
//		}
//		tfTotalServico.setValue(totalEntradaServico.toString());

	}

	public void preencheMaterialServicoSubForm(List<MaterialServico> materialServico) {
		materialServicoSubForm.fillWith(materialServico);
	}
	
	public void preencheAcessorioOsSubForm(List<AcessorioOs> acessorioOs) {
		acessorioOsSubForm.fillWith(acessorioOs);
	}
}