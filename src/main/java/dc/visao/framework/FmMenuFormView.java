package dc.visao.framework;

import java.util.List;

import com.sun.istack.logging.Logger;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.framework.FmMenu;
import dc.entidade.framework.FmModulo;

/**
 * 
 * @author Wesley Jr /* Nessa classe temos a Tela (DESIGN), onde criamos o
 *         campos que a Tela contém tudo que ela precisa ter
 * 
 */

public class FmMenuFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private TextField txtController;

	@AutoGenerated
	private OptionGroup tipoMenu;

	@AutoGenerated
	private HorizontalLayout layoutBase;

	@AutoGenerated
	private TextField txtURL;

	@AutoGenerated
	private TextField txtCaption;

	@AutoGenerated
	private ComboBox cbMenu;

	@AutoGenerated
	private ComboBox cbModulo;

	@AutoGenerated
	private CheckBox ckbPermissaoOperacao;

	@AutoGenerated
	private CheckBox ckbConsultaMultiempresa;

	Logger logger = Logger.getLogger(FmMenuFormView.class);

	private FmMenuFormController controller;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final String FILHO_MENU = "Filho de Menu";
	private static final String FILHO_MODULO = "Filho de Módulo";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public FmMenuFormView(final FmMenuFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.controller = controller;

		/*
		 * cbModulo.setItemCaptionPropertyId("caption");
		 * cbModulo.setImmediate(true); cbModulo.setNullSelectionAllowed(false);
		 * cbModulo.addValueChangeListener(new ValueChangeListener() {
		 * 
		 * @Override public void valueChange(ValueChangeEvent event) { FmModulo
		 * m = (FmModulo) event.getProperty().getValue();
		 * logger.info("Modulo changed:" + m.getCaption()); //
		 * controller.carregaComboMenus(m); } });
		 * 
		 * cbMenu.setVisible(false); cbMenu.setItemCaptionPropertyId("caption");
		 * cbMenu.setNullSelectionAllowed(false); cbMenu.setImmediate(true);
		 * 
		 * tipoMenu.addItem(FILHO_MODULO); tipoMenu.addItem(FILHO_MENU);
		 * tipoMenu.setImmediate(true);
		 * 
		 * txtController.setVisible(false);
		 * 
		 * tipoMenu.addValueChangeListener(new ValueChangeListener() {
		 * 
		 * @Override public void valueChange(ValueChangeEvent event) { if
		 * (event.getProperty().getValue() == FILHO_MENU) {
		 * cbMenu.setVisible(true); txtController.setVisible(true); } else if
		 * (event.getProperty().getValue() == FILHO_MODULO) {
		 * cbMenu.setVisible(false); txtController.setVisible(false);
		 * txtController.setValue(""); }
		 * 
		 * } });
		 */
	}

	public OptionGroup getTipoMenu() {
		return tipoMenu;
	}

	public void setTipoMenu(OptionGroup tipoMenu) {
		this.tipoMenu = tipoMenu;
	}

	public TextField getTxtURL() {
		return txtURL;
	}

	public void setTxtURL(TextField txtURL) {
		this.txtURL = txtURL;
	}

	public TextField getTxtCaption() {
		return txtCaption;
	}

	public void setTxtCaption(TextField txtCaption) {
		this.txtCaption = txtCaption;
	}

	public ComboBox getCbMenu() {
		return cbMenu;
	}

	public void setCbMenu(ComboBox cbMenu) {
		this.cbMenu = cbMenu;
	}

	public ComboBox getCbModulo() {
		return cbModulo;
	}

	public void setCbModulo(ComboBox cbModulo) {
		this.cbModulo = cbModulo;
	}

	public TextField getTxtController() {
		return txtController;
	}

	public void setTxtController(TextField txtController) {
		this.txtController = txtController;
	}

	public CheckBox getCkbPermissaoOperacao() {
		return ckbPermissaoOperacao;
	}

	public void setCkbPermissaoOperacao(CheckBox ckbPermissaoOperacao) {
		this.ckbPermissaoOperacao = ckbPermissaoOperacao;
	}

	public CheckBox getCkbConsultaMultiempresa() {
		return ckbConsultaMultiempresa;
	}

	public void setCkbConsultaMultiempresa(CheckBox ckbConsultaMultiempresa) {
		this.ckbConsultaMultiempresa = ckbConsultaMultiempresa;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// layoutBase
		layoutBase = buildLayoutBase();
		mainLayout.addComponent(layoutBase);

		// cbModulo
		cbModulo = new ComboBox();
		cbModulo.setCaption("Módulo Pai");
		cbModulo.setWidth("-1px");
		cbModulo.setHeight("-1px");
		cbModulo.setNullSelectionAllowed(false);
		cbModulo.setImmediate(true);
		cbModulo.addValueChangeListener(new ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() != null) {
					controller.menu((FmModulo) event.getProperty()
							.getValue());
				}
			}
		});
		mainLayout.addComponent(cbModulo);

		// tipoMenu
		tipoMenu = new OptionGroup();
		tipoMenu.setCaption("Tipo de menu");
		tipoMenu.setWidth("-1px");
		tipoMenu.setHeight("-1px");
		tipoMenu.setImmediate(true);
		tipoMenu.addValueChangeListener(new ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				controller.verificarTipo(event);
			}
		});
		mainLayout.addComponent(tipoMenu);

		// cbMenu
		cbMenu = new ComboBox();
		cbMenu.setCaption("Menu Pai");
		cbMenu.setImmediate(false);
		cbMenu.setWidth("-1px");
		cbMenu.setHeight("-1px");
		mainLayout.addComponent(cbMenu);

		// txtController
		txtController = new TextField();
		txtController.setCaption("Classe do Controller");
		txtController.setImmediate(false);
		txtController.setWidth("-1px");
		txtController.setHeight("-1px");
		mainLayout.addComponent(txtController);

		// ckbPermissaoOperacao
		ckbPermissaoOperacao = new CheckBox();
		ckbPermissaoOperacao.setCaption("Não Permitir Alteração no (CRUD):");
		ckbPermissaoOperacao.setImmediate(false);
		ckbPermissaoOperacao.setWidth("-1px");
		ckbPermissaoOperacao.setHeight("-1px");
		layoutBase.addComponent(ckbPermissaoOperacao);

		// ckbConsultaMultiempresa
		ckbConsultaMultiempresa = new CheckBox();
		ckbConsultaMultiempresa
				.setCaption("Não Permitir Consulta Multiempresa:");
		ckbConsultaMultiempresa.setImmediate(false);
		ckbConsultaMultiempresa.setWidth("-1px");
		ckbConsultaMultiempresa.setHeight("-1px");
		layoutBase.addComponent(ckbConsultaMultiempresa);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildLayoutBase() {
		// common part: create layout
		layoutBase = new HorizontalLayout();
		layoutBase.setImmediate(false);
		layoutBase.setWidth("-1px");
		layoutBase.setHeight("-1px");
		layoutBase.setMargin(false);
		layoutBase.setSpacing(true);

		// txtCaption
		txtCaption = new TextField();
		txtCaption.setCaption("Caption:");
		txtCaption.setImmediate(false);
		txtCaption.setWidth("-1px");
		txtCaption.setHeight("-1px");
		layoutBase.addComponent(txtCaption);

		// txtURL
		txtURL = new TextField();
		txtURL.setCaption("Identificador URL:");
		txtURL.setImmediate(false);
		txtURL.setWidth("-1px");
		txtURL.setHeight("-1px");
		layoutBase.addComponent(txtURL);

		return layoutBase;
	}

	/**
	 * COMBOS
	 */

	public void carregarCmbModulo(List<FmModulo> lista) {
		BeanItemContainer<FmModulo> bic = new BeanItemContainer<FmModulo>(
				FmModulo.class, lista);
		this.cbModulo.setContainerDataSource(bic);
		this.cbModulo.setItemCaptionPropertyId("caption");
	}

	public void carregarCmbMenu(List<FmMenu> lista) {
		BeanItemContainer<FmMenu> bic = new BeanItemContainer<FmMenu>(
				FmMenu.class, lista);
		this.cbMenu.setContainerDataSource(bic);
		this.cbMenu.setItemCaptionPropertyId("caption");
	}

}