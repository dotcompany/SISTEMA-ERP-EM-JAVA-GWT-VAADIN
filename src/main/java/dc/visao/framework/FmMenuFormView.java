package dc.visao.framework;

import java.util.List;

import com.sun.istack.logging.Logger;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.framework.FmMenu;
import dc.entidade.framework.FmModulo;

/**
 * 
 * @author Wesley Jr /* Nessa classe temos a Tela (DESIGN), onde criamos o
 *         campos que a Tela contém tudo que ela precisa ter
 * 
 */

public class FmMenuFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private TextField txtController;

	@AutoGenerated
	private ComboBox comboMenus;

	@AutoGenerated
	private OptionGroup tipoMenu;

	@AutoGenerated
	private ComboBox comboModulos;

	@AutoGenerated
	private HorizontalLayout layoutBase;

	@AutoGenerated
	private TextField txtURL;

	@AutoGenerated
	private TextField txtCaption;

	@AutoGenerated
	private CheckBox cbPermissaoOperacao;

	Logger logger = Logger.getLogger(FmMenuFormView.class);

	private FmMenuFormController controller;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final String FILHO_MENU = "Filho de Menu";
	private static final String FILHO_MODULO = "Filho de Módulo";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public FmMenuFormView(final FmMenuFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.controller = controller;

		comboModulos.setItemCaptionPropertyId("caption");
		comboModulos.setImmediate(true);
		comboModulos.setNullSelectionAllowed(false);
		comboModulos.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				FmModulo m = (FmModulo) event.getProperty().getValue();
				logger.info("Modulo changed:" + m.getCaption());
				controller.carregaComboMenus(m);
			}
		});

		comboMenus.setVisible(false);
		comboMenus.setItemCaptionPropertyId("caption");
		comboMenus.setNullSelectionAllowed(false);
		comboMenus.setImmediate(true);

		tipoMenu.addItem(FILHO_MODULO);
		tipoMenu.addItem(FILHO_MENU);
		tipoMenu.setImmediate(true);

		txtController.setVisible(false);

		tipoMenu.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() == FILHO_MENU) {
					comboMenus.setVisible(true);
					txtController.setVisible(true);
				} else if (event.getProperty().getValue() == FILHO_MODULO) {
					comboMenus.setVisible(false);
					txtController.setVisible(false);
					txtController.setValue("");
				}

			}
		});
	}

	public TextField getTxtURL() {
		return txtURL;
	}

	public void setTxtURL(TextField txtURL) {
		this.txtURL = txtURL;
	}

	public TextField getTxtCaption() {
		return txtCaption;
	}

	public Object getTipoMenu() {
		return this.tipoMenu.getValue();
	}

	public FmModulo getModulo() {
		return (FmModulo) this.comboModulos.getValue();
	}

	public FmMenu getMenu() {
		if (this.getTipoMenu() == FILHO_MENU) {
			return (FmMenu) this.comboMenus.getValue();
		} else {
			return null;
		}
	}

	public CheckBox getCbPermissaoOperacao() {
		return cbPermissaoOperacao;
	}

	public void setCbPermissaoOperacao(CheckBox cbPermissaoOperacao) {
		this.cbPermissaoOperacao = cbPermissaoOperacao;
	}

	public TextField getTxtController() {
		return this.txtController;
	}

	public void populaModulos(List<FmModulo> modulos) {
		BeanItemContainer<FmModulo> objects = new BeanItemContainer(
				FmModulo.class, modulos);
		comboModulos.setContainerDataSource(objects);
	}

	public void populaMenus(List<FmMenu> menus) {
		BeanItemContainer<FmMenu> objects = new BeanItemContainer(FmMenu.class,
				menus);
		comboMenus.setContainerDataSource(objects);
	}

	public void setParentMenu(FmMenu parentMenu) {
		if (parentMenu == null) {
			tipoMenu.setValue(FILHO_MODULO);
			logger.info("Parent menu is null");
		} else {
			tipoMenu.setValue(FILHO_MENU);
			System.out.println("PARENT:" + parentMenu.getCaption());
			comboMenus.setValue(parentMenu);
		}
	}

	public ComboBox getComboModulos() {
		// TODO Auto-generated method stub
		return this.comboModulos;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// layoutBase
		layoutBase = buildLayoutBase();
		mainLayout.addComponent(layoutBase);

		// comboModulos
		comboModulos = new ComboBox();
		comboModulos.setCaption("Módulo Pai");
		comboModulos.setImmediate(false);
		comboModulos.setWidth("-1px");
		comboModulos.setHeight("-1px");
		mainLayout.addComponent(comboModulos);

		// tipoMenu
		tipoMenu = new OptionGroup();
		tipoMenu.setCaption("Tipo de menu");
		tipoMenu.setImmediate(false);
		tipoMenu.setWidth("-1px");
		tipoMenu.setHeight("-1px");
		mainLayout.addComponent(tipoMenu);

		// comboMenus
		comboMenus = new ComboBox();
		comboMenus.setCaption("Menu Pai");
		comboMenus.setImmediate(false);
		comboMenus.setWidth("-1px");
		comboMenus.setHeight("-1px");
		mainLayout.addComponent(comboMenus);

		// txtController
		txtController = new TextField();
		txtController.setCaption("Classe do Controller");
		txtController.setImmediate(false);
		txtController.setWidth("-1px");
		txtController.setHeight("-1px");
		mainLayout.addComponent(txtController);

		// cbPermissaoOperacao
		cbPermissaoOperacao = new CheckBox();
		cbPermissaoOperacao.setCaption("Permissão de operação:");
		cbPermissaoOperacao.setImmediate(false);
		cbPermissaoOperacao.setWidth("-1px");
		cbPermissaoOperacao.setHeight("-1px");
		layoutBase.addComponent(cbPermissaoOperacao);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildLayoutBase() {
		// common part: create layout
		layoutBase = new HorizontalLayout();
		layoutBase.setImmediate(false);
		layoutBase.setWidth("-1px");
		layoutBase.setHeight("-1px");
		layoutBase.setMargin(false);
		layoutBase.setSpacing(true);

		// txtCaption
		txtCaption = new TextField();
		txtCaption.setCaption("Caption:");
		txtCaption.setImmediate(false);
		txtCaption.setWidth("-1px");
		txtCaption.setHeight("-1px");
		layoutBase.addComponent(txtCaption);

		// txtURL
		txtURL = new TextField();
		txtURL.setCaption("Identificador URL:");
		txtURL.setImmediate(false);
		txtURL.setWidth("-1px");
		txtURL.setHeight("-1px");
		layoutBase.addComponent(txtURL);

		return layoutBase;
	}

}