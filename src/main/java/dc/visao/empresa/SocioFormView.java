package dc.visao.empresa;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.empresa.SocioFormController;
import dc.entidade.empresa.Dependente;
import dc.entidade.empresa.ParticipacaoSocietaria;
import dc.entidade.empresa.Socio;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

@SuppressWarnings("serial")
public class SocioFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	SocioFormController controller;

	Socio currentBean;

	ComboBox cmbSocio, cmbQuadroSocietario;

	TextField txtLogradouro, txtNumero, txtComplemento;

	TextField txtBairro, txtMunicipio, txtUf, txtCep;

	TextField txtFone, txtCelular, txtEmail;

	TextField txtParticipacao, txtQuotas, txtIntegralizar;

	PopupDateField dataIngresso, dataSaida;

	private SubFormComponent<Dependente, Integer> dependentesSubForm;

	private SubFormComponent<ParticipacaoSocietaria, Integer> participacoesSubForm;

	@AutoGenerated
	private TabSheet subForms;

	public SocioFormView(SocioFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 6);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		cmbSocio = ComponentUtil.buildComboBox("Sócio");
		cmbSocio.setRequired(true);
		fields.addComponent(cmbSocio, 0, 0);

		cmbQuadroSocietario = ComponentUtil.buildComboBox("Quadro Societário");
		cmbQuadroSocietario.setRequired(true);
		fields.addComponent(cmbQuadroSocietario, 1, 0);

		txtLogradouro = ComponentUtil.buildTextField("Logradouro");
		fields.addComponent(txtLogradouro, 0, 1, 1, 1);

		txtNumero = ComponentUtil.buildTextField("Número");
		fields.addComponent(txtNumero, 2, 1);

		txtComplemento = ComponentUtil.buildTextField("Complemento");
		fields.addComponent(txtComplemento, 3, 1, 4, 1);

		txtBairro = ComponentUtil.buildTextField("Bairro");
		fields.addComponent(txtBairro, 0, 2);

		txtMunicipio = ComponentUtil.buildTextField("Municipio");
		fields.addComponent(txtMunicipio, 1, 2);

		txtUf = ComponentUtil.buildTextField("UF");
		fields.addComponent(txtUf, 2, 2);

		txtCep = ComponentUtil.buildTextField("CEP");
		fields.addComponent(txtCep, 3, 2);

		txtFone = ComponentUtil.buildTextField("Fone");
		fields.addComponent(txtFone, 0, 3);

		txtCelular = ComponentUtil.buildTextField("Celular");
		fields.addComponent(txtCelular, 1, 3);

		txtEmail = ComponentUtil.buildTextField("Email");
		fields.addComponent(txtEmail, 2, 3, 4, 3);

		txtParticipacao = ComponentUtil.buildTextField("Participação");
		fields.addComponent(txtParticipacao, 0, 4);

		txtQuotas = ComponentUtil.buildTextField("Quotas");
		fields.addComponent(txtQuotas, 1, 4);

		txtIntegralizar = ComponentUtil.buildTextField("Integralizar");
		fields.addComponent(txtIntegralizar, 2, 4);

		dataIngresso = ComponentUtil.buildPopupDateField("Data Ingresso");
		fields.addComponent(dataIngresso, 3, 4);

		dataSaida = ComponentUtil.buildPopupDateField("Data Saida");
		fields.addComponent(dataSaida, 4, 4);

		return fields;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("110.0%");

		// fields
		fields = buildFields();
		mainLayout.addComponent(fields);
		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
		montaAbaDependentes();
		montaAbaParticipacao();
		mainLayout.addComponent(subForms);

		return mainLayout;
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public GridLayout getFields() {
		return fields;
	}

	public void setFields(GridLayout fields) {
		this.fields = fields;
	}

	public SocioFormController getController() {
		return controller;
	}

	public void setController(SocioFormController controller) {
		this.controller = controller;
	}

	public Socio getCurrentBean() {
		return currentBean;
	}

	public void setCurrentBean(Socio currentBean) {
		this.currentBean = currentBean;
	}

	public ComboBox getCmbSocio() {
		return cmbSocio;
	}

	public void setCmbSocio(ComboBox cmbSocio) {
		this.cmbSocio = cmbSocio;
	}

	public ComboBox getCmbQuadroSocietario() {
		return cmbQuadroSocietario;
	}

	public void setCmbQuadroSocietario(ComboBox cmbQuadroSocietario) {
		this.cmbQuadroSocietario = cmbQuadroSocietario;
	}

	public TextField getTxtLogradouro() {
		return txtLogradouro;
	}

	public void setTxtLogradouro(TextField txtLogradouro) {
		this.txtLogradouro = txtLogradouro;
	}

	public TextField getTxtNumero() {
		return txtNumero;
	}

	public void setTxtNumero(TextField txtNumero) {
		this.txtNumero = txtNumero;
	}

	public TextField getTxtComplemento() {
		return txtComplemento;
	}

	public void setTxtComplemento(TextField txtComplemento) {
		this.txtComplemento = txtComplemento;
	}

	public TextField getTxtBairro() {
		return txtBairro;
	}

	public void setTxtBairro(TextField txtBairro) {
		this.txtBairro = txtBairro;
	}

	public TextField getTxtMunicipio() {
		return txtMunicipio;
	}

	public void setTxtMunicipio(TextField txtMunicipio) {
		this.txtMunicipio = txtMunicipio;
	}

	public TextField getTxtUf() {
		return txtUf;
	}

	public void setTxtUf(TextField txtUf) {
		this.txtUf = txtUf;
	}

	public TextField getTxtCep() {
		return txtCep;
	}

	public void setTxtCep(TextField txtCep) {
		this.txtCep = txtCep;
	}

	public TextField getTxtFone() {
		return txtFone;
	}

	public void setTxtFone(TextField txtFone) {
		this.txtFone = txtFone;
	}

	public TextField getTxtCelular() {
		return txtCelular;
	}

	public void setTxtCelular(TextField txtCelular) {
		this.txtCelular = txtCelular;
	}

	public TextField getTxtEmail() {
		return txtEmail;
	}

	public void setTxtEmail(TextField txtEmail) {
		this.txtEmail = txtEmail;
	}

	public TextField getTxtParticipacao() {
		return txtParticipacao;
	}

	public void setTxtParticipacao(TextField txtParticipacao) {
		this.txtParticipacao = txtParticipacao;
	}

	public TextField getTxtQuotas() {
		return txtQuotas;
	}

	public void setTxtQuotas(TextField txtQuotas) {
		this.txtQuotas = txtQuotas;
	}

	public TextField getTxtIntegralizar() {
		return txtIntegralizar;
	}

	public void setTxtIntegralizar(TextField txtIntegralizar) {
		this.txtIntegralizar = txtIntegralizar;
	}

	public PopupDateField getDataIngresso() {
		return dataIngresso;
	}

	public void setDataIngresso(PopupDateField dataIngresso) {
		this.dataIngresso = dataIngresso;
	}

	public PopupDateField getDataSaida() {
		return dataSaida;
	}

	public void setDataSaida(PopupDateField dataSaida) {
		this.dataSaida = dataSaida;
	}

	public void montaAbaDependentes() {
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(buildDependentesSubForm());
		subForms.addTab(layout, "Dependentes", null);
	}

	public void montaAbaParticipacao() {
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(buildParticipacoesSubForm());
		subForms.addTab(layout, "Participação Societária", null);
	}

	private SubFormComponent<Dependente, Integer> buildDependentesSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
		sub.addTab(dependentesSubForm, "", null);

		dependentesSubForm = new SubFormComponent<Dependente, Integer>(
				Dependente.class, new String[] { "nome" },
				new String[] { "Nome" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {

						if ("nome".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField("Nome");
							return textField;
						}

						return null;
					}
				};
			}

			protected Dependente getNovo() {
				Dependente detalhe = controller.adicionarDependente();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<Dependente> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		return dependentesSubForm;
	}

	private SubFormComponent<ParticipacaoSocietaria, Integer> buildParticipacoesSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();

		participacoesSubForm = new SubFormComponent<ParticipacaoSocietaria, Integer>(
				ParticipacaoSocietaria.class, new String[] { "cnpj" },
				new String[] { "CNPJ" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {

						if ("cnpj".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField("CNPJ");
							return textField;
						}

						return null;
					}
				};
			}

			protected ParticipacaoSocietaria getNovo() {
				ParticipacaoSocietaria detalhe = controller
						.adicionarParticipacao();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<ParticipacaoSocietaria> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		return participacoesSubForm;
	}

}