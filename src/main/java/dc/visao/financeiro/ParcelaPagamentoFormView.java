package dc.visao.financeiro;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.financeiro.ParcelaPagamentoFormController;
import dc.entidade.financeiro.ParcelaPagamento;
import dc.entidade.financeiro.ParcelaPagar;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;
import dc.visao.ponto.converters.ColaboradorConverter;
import dc.visao.ponto.converters.PontoClassificacaoJornadaConverter;

public class ParcelaPagamentoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;

	@AutoGenerated
	private GridLayout pagamentoButtons;

	@AutoGenerated
	private HorizontalLayout pagamentosButtonsContainer;

	@AutoGenerated
	private PopupDateField dtDataVencimento;

	@AutoGenerated
	private PopupDateField dtDataPagamento;

	@AutoGenerated
	private ComboBox cbTipoBaixa;

	@AutoGenerated
	private ComboBox cbTipoPagamento;

	@AutoGenerated
	private ComboBox cbContaCaixa;

	@AutoGenerated
	private TextField txValorPagar;

	@AutoGenerated
	private TextField txTaxaJuro;

	@AutoGenerated
	private TextField txValorJuro;

	@AutoGenerated
	private TextField txTaxaMulta;

	@AutoGenerated
	private TextField txValorMulta;

	@AutoGenerated
	private TextField txTaxaDesconto;

	@AutoGenerated
	private TextField txValorDesconto;
	
	@AutoGenerated
	private TextField txValorPago;

	@AutoGenerated
	private TextArea txaHistorico;

	@AutoGenerated
	private Button btnACJEF;

	@AutoGenerated
	private Button btnSearch;

	@AutoGenerated
	private SubFormComponent<ParcelaPagamento, Integer> pagamentosSubForm;

	public ParcelaPagamentoFormView(ParcelaPagamentoFormController parcelaPagamentoFormController) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		pagamentoButtons = buildPagamentoButtons();
		mainLayout.addComponent(pagamentoButtons);

		fields = buildFields();
		mainLayout.addComponent(fields);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(5, 5);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		cbTipoBaixa = ComponentUtil.buildComboBox("Tipo Baixa");
		fields.addComponent(cbTipoBaixa, 0, 0);

		cbTipoPagamento = ComponentUtil.buildComboBox("Tipo Pagamento");
		fields.addComponent(cbTipoPagamento, 1, 0);

		cbContaCaixa = ComponentUtil.buildComboBox("Conta Caixa");
		fields.addComponent(cbContaCaixa, 2, 0);
		//
		
		dtDataVencimento = ComponentUtil.buildPopupDateField("Data Vencimento");
		fields.addComponent(dtDataVencimento, 0, 1);

		dtDataPagamento = ComponentUtil.buildPopupDateField("Data Pagamento");
		fields.addComponent(dtDataPagamento, 1, 1);

		txValorPagar = ComponentUtil.buildTextField("Valor à Pagar");
		fields.addComponent(txValorPagar, 2, 1);
		
		txTaxaJuro = ComponentUtil.buildTextField("Taxa Juro");
		fields.addComponent(txTaxaJuro, 3, 1);
		
		txValorJuro = ComponentUtil.buildTextField("Valor Juro");
		fields.addComponent(txValorJuro, 4, 1);
		//
		
		txTaxaMulta = ComponentUtil.buildTextField("Taxa Multa");
		fields.addComponent(txTaxaMulta, 0, 2);
		
		txValorMulta = ComponentUtil.buildTextField("Valor Multa");
		fields.addComponent(txValorMulta, 1, 2);
		
		txTaxaDesconto = ComponentUtil.buildTextField("Taxa Desconto");
		fields.addComponent(txTaxaDesconto, 2, 2);
		
		txValorDesconto = ComponentUtil.buildTextField("Valor Desconto");
		fields.addComponent(txValorDesconto, 3, 2);
		
		txValorPago = ComponentUtil.buildTextField("Valor Pago");
		fields.addComponent(txValorPago, 4, 2);
		
		txaHistorico= ComponentUtil.buildTextArea("Histórico");
		fields.addComponent(txaHistorico, 0, 3, 4, 4);
		
		return fields;
	}

	private GridLayout buildPagamentoButtons() {
		pagamentoButtons = new GridLayout(2, 1);
		pagamentoButtons.setImmediate(false);
		pagamentoButtons.setWidth("100.0%");
		pagamentoButtons.setHeight("-1px");
		pagamentoButtons.setMargin(false);
		pagamentoButtons.setSpacing(true);

		btnACJEF = new Button("ACJEF");
		btnACJEF.setImmediate(true);
		pagamentoButtons.addComponent(btnACJEF, 0, 0);

		return pagamentoButtons;
	}

	private Component buildSubFormParcelaPagamento() {

		String[] atributos = new String[] { "dataFechamento", "diaSemana", "codigoHorario", "cargaHorariaEsperada", "cargaHorariaDiurna",
				"cargaHorariaNoturna", "cargaHorariaTotal", "entrada01", "saida01", "entrada02", "saida02", "entrada03", "saida03", "entrada04",
				"saida04", "entrada05", "saida05", "horaInicioJornada", "horaFimJornada", "horaExtra01", "percentualHoraExtra01",
				"modalidadeHoraExtra01", "horaExtra02", "percentualHoraExtra02", "modalidadeHoraExtra02", "horaExtra03", "percentualHoraExtra03",
				"modalidadeHoraExtra03", "horaExtra04", "percentualHoraExtra04", "modalidadeHoraExtra04", "faltaAtraso", "compensar", "bancoHoras",
				"observacao", "colaborador", "pontoClassificacaoJornada" };
		String[] headers = new String[] { "Data fechamento", "Dia Semana", "Código Horário", "Carga Horária Esperada", "Carga Horaria Diurna",
				"Carga Horária Noturna", "Carga Horária Total", "Entrada01", "Saída01", "Entrada02", "Saída02", "Entrada03", "Saída03", "Entrada04",
				"Saída04", "Entrada05", "Saída05", "Hora Início Jornada", "Hora Fim Jornada", "Hora Extra01", "Percentual Hora Extra01",
				"Modalidade Hora Extra01", "Hora Extra02", "Percentual Hora Extra02", "Modalidade Hora Extra02", "Hora Extra03",
				"Percentual Hora Extra03", "Modalidade Hora Extra03", "Hora Extra04", "Percentual Hora Extra04", "Modalidade Hora Extra04",
				"Falta/Atraso", "Compensar", "Banco de Horas", "Observação", "Colaborador", "Ponto Classificação Jornada" };

		this.pagamentosSubForm = new SubFormComponent<ParcelaPagamento, Integer>(ParcelaPagamento.class, atributos, headers) {

			private static final long serialVersionUID = 1L;

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("dataMarcacao".equals(propertyId)) {
							DateField dateField = new DateField();
							dateField.setSizeFull();
							return dateField;
						} else if ("colaborador".equals(propertyId)) {
							TextField textField = new TextField();
							textField.setSizeFull();
							textField.setEnabled(false);

							textField.setConverter(new ColaboradorConverter());

							return textField;
						} else if ("pontoClassificacaoJornada".equals(propertyId)) {
							TextField textField = new TextField();
							textField.setSizeFull();
							textField.setEnabled(false);

							textField.setConverter(new PontoClassificacaoJornadaConverter());

							return textField;
						}

						else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}

			@Override
			public boolean validateItems(List<ParcelaPagamento> items) {
				return true;
			}
		};

		return this.pagamentosSubForm;
	}

	public void preencheBean(ParcelaPagar currentBean) {
		// TODO Auto-generated method stub

	}

	public void preencheForm(ParcelaPagar currentBean) {
		// TODO Auto-generated method stub

	}
}
