package dc.visao.financeiro;

import java.math.BigDecimal;
import java.util.List;

import org.vaadin.easyuploads.UploadField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.financeiro.ExtratoContaBancoFormController;
import dc.entidade.financeiro.ExtratoContaBancoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class ExtratoContaBancoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	
	@AutoGenerated
	private GridLayout fields;
	
	@AutoGenerated
	private TabSheet subForms;
	
	@AutoGenerated
	private TextField saldo, credito, debito;
	
	private UploadField btnImportar;
	
	private SubFormComponent<ExtratoContaBancoEntity, Integer> extratoContaBancoSubForm = null;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	ExtratoContaBancoFormController controller;
	
	public ExtratoContaBancoFormView(ExtratoContaBancoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		fields = buildFields();
		mainLayout.addComponent(fields);
		
		// common part: create layout
		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
				
		subForms = buildExtratoContaBancoSubForm();
				
		mainLayout.addComponent(subForms);
		
		return mainLayout;


	}

	private GridLayout buildFields() {
		fields = new GridLayout();
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setRows(3);
		fields.setColumns(7);
		
		credito = ComponentUtil.buildCurrencyField("Crédito");
		fields.addComponent(credito, 0, 0, 1,0);
		
		debito = ComponentUtil.buildCurrencyField("Débito");
		fields.addComponent(debito, 2, 0, 3,0);
		
		saldo = ComponentUtil.buildCurrencyField("Saldo Total");
		fields.addComponent(saldo, 4, 0,5,0);
		
		btnImportar = new UploadField();
		btnImportar.setCaption("Importar OFX");
		fields.addComponent(btnImportar, 0, 2);
		
		return fields;
		
	}
	
	public void buildAbaExtratoContaBanco() {
		TabSheet abaVendaPeca = buildExtratoContaBancoSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();

		layout.addComponent(abaVendaPeca);
		subForms.addComponent(layout);

	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildExtratoContaBancoSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		String[] campos = new String[] { "mes", "ano", "dataMovimento",
				"dataBalancete", "historico", "documento",
				"valor", "conciliado" ,"observacoes"};
		String[] titulos = new String[] { "Mês", "Ano", "Data Movimento",
				"Data Balancete", "Histórico", "Documento", "Valor",
				"Conciliado","Observações" };

		extratoContaBancoSubForm = new SubFormComponent<ExtratoContaBancoEntity, Integer>(
				ExtratoContaBancoEntity.class, campos, titulos, new String[] {
					"valor" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("mes".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("ano".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						} else if ("dataMovimento".equals(propertyId)) {
							PopupDateField date = ComponentUtil.buildPopupDateField(null);
							return date;
						} else if ("dataBalancete".equals(propertyId)) {
							PopupDateField date = ComponentUtil
									.buildPopupDateField(null);
							return date;
						} else if ("historico".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("documento".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("valor".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						}
						else if ("conciliado".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							combobox.addItem("S");
							combobox.addItem("N");

							return combobox;
							
						}
						
						else if ("observacoes".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						}

						return null;
					}

					private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> credito = get("valor");
								Property<BigDecimal> valor = get("valor");
								Property<BigDecimal> debito = get("valor");
								Property<BigDecimal> saldoTotal = get("valor");

								if (credito.getValue() != null) {
									BigDecimal q = credito.getValue();
									BigDecimal vu = valor.getValue();
									credito.setValue(q.multiply(vu));
								}

								if (debito.getValue() != null) {
									BigDecimal vs = debito.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									BigDecimal pd = BigDecimal.ZERO;
									BigDecimal vt = BigDecimal.ZERO;

									vt = vs.subtract(pd.multiply(vs));
									debito.setValue(vt);

									if (saldoTotal.getValue() != null) {
										vd = saldoTotal.getValue();
									} else {
										saldoTotal.setValue(BigDecimal.ZERO);
									}
									saldoTotal.setValue(vt.subtract(vd));
								}
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}

				};
			}

			/*protected ExtratoContaBancoEntity getNovo() {
				ExtratoContaBancoEntity Item = controller
						.novoExtratoContaBancoItem();
				return Item;
			}

			protected void getRemoverSelecionados(
					List<ExtratoContaBancoEntity> values) {
				controller.removerExtratoContaBancoItem(values);
			}*/

			@Override
			public boolean validateItems(List<ExtratoContaBancoEntity> items) {
				return true;
			}
		};

		sub.addTab(extratoContaBancoSubForm, "Extrato Conta Banco", null);

		return sub;
	}
	
	public void preencheSubForm(List<ExtratoContaBancoEntity> detalhes) {
		extratoContaBancoSubForm.fillWith(detalhes);
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public GridLayout getFields() {
		return fields;
	}

	public void setFields(GridLayout fields) {
		this.fields = fields;
	}

	public TabSheet getSubForms() {
		return subForms;
	}

	public void setSubForms(TabSheet subForms) {
		this.subForms = subForms;
	}

	public SubFormComponent<ExtratoContaBancoEntity, Integer> getExtratoContaBancoSubForm() {
		return extratoContaBancoSubForm;
	}

	public void setExtratoContaBancoSubForm(
			SubFormComponent<ExtratoContaBancoEntity, Integer> extratoContaBancoSubForm) {
		this.extratoContaBancoSubForm = extratoContaBancoSubForm;
	}

	public TextField getSaldo() {
		return saldo;
	}

	public void setSaldo(TextField saldo) {
		this.saldo = saldo;
	}

	public TextField getCredito() {
		return credito;
	}

	public void setCredito(TextField credito) {
		this.credito = credito;
	}

	public TextField getDebito() {
		return debito;
	}

	public void setDebito(TextField debito) {
		this.debito = debito;
	}

	public UploadField getBtnImportar() {
		return btnImportar;
	}

	public void setBtnImportar(UploadField btnImportar) {
		this.btnImportar = btnImportar;
	}
	
}
