package dc.visao.suprimentos;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.produto.Produto;
import dc.entidade.suprimentos.ContagemEstoque;
import dc.entidade.suprimentos.ContagemEstoqueDetalhe;
import dc.entidade.suprimentos.RequisicaoDetalhe;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

@SuppressWarnings("serial")
public class ContagemEstoqueFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	@AutoGenerated
	private PopupDateField dataContagem;

	private SubFormComponent<ContagemEstoqueDetalhe, Integer> contagemEstoqueDetalheSubForm;
	
	ContagemEstoqueFormController controller;

	ContagemEstoque currentBean;
	
	@AutoGenerated
	private TabSheet subForms;
	
	@AutoGenerated
	private TabSheet produtos;

	public ContagemEstoqueFormView(ContagemEstoqueFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 1);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		// calDataRequisicao
		dataContagem = new PopupDateField();
		dataContagem.setCaption("Data Contagem");
		dataContagem.setImmediate(false);
		fields.addComponent(dataContagem, 0, 0);

		return fields;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
				setHeight("70.0%");

		// fields
		fields = buildFields();
		mainLayout.addComponent(fields);
       
		// subForm
		subForms = buildSubForms();
		mainLayout.addComponent(subForms);
		
		subForms.setHeight("100%");
		mainLayout.setExpandRatio(subForms, 1);

		return mainLayout;
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildSubForms() {
		
		subForms = new TabSheet();
		subForms.setImmediate(true);
		
		
		contagemEstoqueDetalheSubForm = new SubFormComponent<ContagemEstoqueDetalhe, Integer>(ContagemEstoqueDetalhe.class, new String[] { 
		"produto","quantidadeSistema","quantidadeContada","acuracidade","divergencia" }, new String[] {"Produto","Quantidade Sistema","Quantidade Contada","Acuracidade","DivergÃªncia" }) {
			//"produto" }, new String[] {"Produto" }) {
			
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {
						
						if ("produto".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<Produto> produtoContainer = new BeanItemContainer<>(Produto.class,
									controller.buscarProdutos());
							comboBox.setContainerDataSource(produtoContainer);
							comboBox.setItemCaptionPropertyId("descricao");
							return comboBox;
						}
						
						 if ("quantidadeContada".equals(propertyId)) {
								TextField textField = ComponentUtil.buildNumberField(null);
								return textField;
							}
					 
						 
						 if ("quantidadeSistema".equals(propertyId)) {
								TextField textField = ComponentUtil.buildNumberField(null);
								return textField;
							}
					 
						
						
				 if ("acuracidade".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}
				 
				 if ("divergencia".equals(propertyId)) {
						TextField textField = ComponentUtil.buildNumberField(null);
						return textField;
					}
						return null;
					}
				};
			}
			
			protected ContagemEstoqueDetalhe getNovo() {
				ContagemEstoqueDetalhe contagemEstoqueDetalhe = controller.novoContagemEstoqueDetalhe();
				return contagemEstoqueDetalhe;
			}

			@Override
			public boolean validateItems(List<ContagemEstoqueDetalhe> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};
		subForms.addTab(contagemEstoqueDetalheSubForm, "Produtos", null);
		return subForms ;

	}
	
	
	
	public ContagemEstoqueDetalhe novoContagemEstoqueDetalhe() {
		ContagemEstoqueDetalhe contagemEstoqueDetalhe = new ContagemEstoqueDetalhe();
		//currentBean.addContagemDetalhe(contagemEstoqueDetalhe);
		return contagemEstoqueDetalhe;
	}


		public VerticalLayout getMainLayout() {
			return mainLayout;
		}

		public void filContagemEstoqueDetalhesSubForm(List<ContagemEstoqueDetalhe> contagemEstoqueDetalhes) {
			try{
				contagemEstoqueDetalheSubForm.fillWith(contagemEstoqueDetalhes);	
			}catch(Exception e){
				e.printStackTrace();
			}
			
		}

		public PopupDateField getDataContagem() {
			return dataContagem;
		}

		public void setDataContagem(PopupDateField dataContagem) {
			this.dataContagem = dataContagem;
		}

		



	}
