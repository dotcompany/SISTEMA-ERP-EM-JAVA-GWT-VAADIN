package dc.visao.suprimentos.compra;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimentos.compra.RequisicaoCompraFormController;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.pessoal.ColaboradorEntity;
import dc.entidade.suprimentos.compra.RequisicaoDetalheEntity;
import dc.entidade.suprimentos.compra.TipoRequisicaoEntity;
import dc.visao.framework.component.LookupComponent;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class RequisicaoCompraFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private Label lblId;
	@AutoGenerated
	private PopupDateField calDataRequisicao;
	@AutoGenerated
	private LookupComponent<Integer, ColaboradorEntity> lkpRequisitante;
	@AutoGenerated
	private ComboBox cmbTipoRequisicao;

	@AutoGenerated
	private TextArea txtObservacao;

	private RequisicaoCompraFormController controller;

	private SubFormComponent<RequisicaoDetalheEntity, Integer> requisicaoDetalheSubForm;

	public RequisicaoCompraFormView(RequisicaoCompraFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		// fields
		fields = buildFields();
		mainLayout.addComponent(fields);

		// subForm
		mainLayout.addComponent(buildSubForms());
		mainLayout.setExpandRatio(requisicaoDetalheSubForm, 1);

		return mainLayout;
	}

	public PopupDateField getCalDataRequisicao() {
		return calDataRequisicao;
	}

	public LookupComponent<Integer, ColaboradorEntity> getLkpRequisitante() {
		return lkpRequisitante;
	}

	public ComboBox getCmbTipoRequisicao() {
		return cmbTipoRequisicao;
	}

	public TextArea getTxtObservacao() {
		return txtObservacao;
	}

	public void setTxtObservacao(TextArea txtObservacao) {
		this.txtObservacao = txtObservacao;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 2);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		// lblId
		lblId = new Label();
		lblId.setCaption("Id");
		lblId.setImmediate(false);
		lblId.setSizeFull();
		fields.addComponent(lblId, 0, 0);

		// cmbTipoRequisicao
		cmbTipoRequisicao = ComponentUtil.buildComboBox("Tipo de Requisição");
		fields.addComponent(cmbTipoRequisicao, 1, 0);

		// lkpRequisitante
		lkpRequisitante = ComponentUtil.buildLookup("Id", "Requisitante");
		fields.addComponent(lkpRequisitante, 2, 0, 4, 0);

		// calDataRequisicao
		calDataRequisicao = new PopupDateField();
		calDataRequisicao.setCaption("Data Requisição");
		calDataRequisicao.setImmediate(false);
		fields.addComponent(calDataRequisicao, 5, 0);

		txtObservacao = ComponentUtil.buildTextArea("Observação");
		fields.addComponent(txtObservacao, 0, 1);

		return fields;
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private SubFormComponent<?, ?> buildSubForms() {
		requisicaoDetalheSubForm = new SubFormComponent<RequisicaoDetalheEntity, Integer>(
				RequisicaoDetalheEntity.class, new String[] { "produto",
						"quantidade" },
				new String[] { "Produto", "Quantidade" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("produto".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil
									.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(
									ProdutoEntity.class,
									controller.buscarProdutos());
							comboBox.setContainerDataSource(produtoContainer);
							comboBox.setItemCaptionPropertyId("descricao");
							return comboBox;
						} else if ("quantidade".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);
							return textField;
						}
						return null;
					}
				};
			}

			protected RequisicaoDetalheEntity getNovo() {
				RequisicaoDetalheEntity requisicaoDetalhe = controller
						.novoRequisicaoDetalhe();
				return requisicaoDetalhe;
			}

			protected void getRemoverSelecionados(
					List<RequisicaoDetalheEntity> values) {
				controller.removerRequisicaoDetalhes(values);
			}

			@Override
			public boolean validateItems(List<RequisicaoDetalheEntity> items) {
				for (RequisicaoDetalheEntity requisicaoDetalhe : items) {
					if (requisicaoDetalhe.getProduto() == null
							|| requisicaoDetalhe.getQuantidade() == null) {
						return false;
					}
				}
				return true;
			}
		};

		return requisicaoDetalheSubForm;
	}

	public void fillCmbTipoRequisicao(List<TipoRequisicaoEntity> lista) {
		BeanItemContainer<TipoRequisicaoEntity> tipoRequisicaoContainer = new BeanItemContainer<>(
				TipoRequisicaoEntity.class, lista);
		cmbTipoRequisicao.setContainerDataSource(tipoRequisicaoContainer);
		cmbTipoRequisicao.setItemCaptionPropertyId("descricao");
	}

	public void fillCmbRequisitante(List<ColaboradorEntity> lista) {
		BeanContainer<Integer, ColaboradorEntity> tipoRequisicaoContainer = lkpRequisitante
				.createContainer(ColaboradorEntity.class);
		tipoRequisicaoContainer.addNestedContainerProperty("pessoa.nome");
		tipoRequisicaoContainer.addAll(lista);
		lkpRequisitante.setItemCaptionPropertyId("pessoa.nome");
	}

	public void fillRequisicaoDetalhesSubForm(
			List<RequisicaoDetalheEntity> requisicaoDetalhes) {
		requisicaoDetalheSubForm.fillWith(requisicaoDetalhes);
	}

	public Label getLblId() {
		return lblId;
	}

}