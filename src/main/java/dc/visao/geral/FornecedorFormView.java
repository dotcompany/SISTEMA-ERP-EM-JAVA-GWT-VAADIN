package dc.visao.geral;

import java.math.BigDecimal;
import java.util.Date;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;

import dc.controller.geral.pessoal.FornecedorFormController;
import dc.entidade.geral.pessoal.AtividadeForCliEntity;
import dc.entidade.geral.pessoal.FornecedorEntity;
import dc.entidade.geral.pessoal.PessoaEntity;
import dc.entidade.geral.pessoal.SituacaoForCliEntity;
import dc.visao.framework.component.BigDecimalConverter;
import dc.visao.framework.component.IntegerConverter;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class FornecedorFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private GridLayout mainLayout;

	@AutoGenerated
	private ManyToOneCombo<PessoaEntity> mocPessoa;

	@AutoGenerated
	private ManyToOneCombo<SituacaoForCliEntity> mocSituacaoForCli;

	@AutoGenerated
	private ManyToOneCombo<AtividadeForCliEntity> mocAtividadeForCli;

	@AutoGenerated
	private PopupDateField pdfDesde;

	@AutoGenerated
	private TextField tfContaRemetente;

	@AutoGenerated
	private ComboBox cbGerarFaturamento;

	@AutoGenerated
	private ComboBox cbOptanteSimples;

	@AutoGenerated
	private ComboBox cbLocalizacao;

	@AutoGenerated
	private ComboBox cbSofreRentencao;

	@AutoGenerated
	private TextField tfPrazoMedioEntrega;

	@AutoGenerated
	private TextField tfNumDiasPrimeiroVenc;

	@AutoGenerated
	private TextField tfNumDiasIntervalo;

	@AutoGenerated
	private TextField tfQuantidadesParcelas;

	@AutoGenerated
	private TextField tfChequeNominalA;

	@AutoGenerated
	private TextArea taObservacao;

	private FornecedorFormController controller;

	public FornecedorFormView(FornecedorFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.controller = controller;
	}

	public ManyToOneCombo<PessoaEntity> getMocPessoa() {
		return mocPessoa;
	}

	public void setMocPessoa(ManyToOneCombo<PessoaEntity> mocPessoa) {
		this.mocPessoa = mocPessoa;
	}

	public ManyToOneCombo<SituacaoForCliEntity> getMocSituacaoForCli() {
		return mocSituacaoForCli;
	}

	public void setMocSituacaoForCli(
			ManyToOneCombo<SituacaoForCliEntity> mocSituacaoForCli) {
		this.mocSituacaoForCli = mocSituacaoForCli;
	}

	public ManyToOneCombo<AtividadeForCliEntity> getMocAtividadeForCli() {
		return mocAtividadeForCli;
	}

	public void setMocAtividadeForCli(
			ManyToOneCombo<AtividadeForCliEntity> mocAtividadeForCli) {
		this.mocAtividadeForCli = mocAtividadeForCli;
	}

	public PopupDateField getPdfDesde() {
		return pdfDesde;
	}

	public void setPdfDesde(PopupDateField pdfDesde) {
		this.pdfDesde = pdfDesde;
	}

	public TextField getTfContaRemetente() {
		return tfContaRemetente;
	}

	public void setTfContaRemetente(TextField tfContaRemetente) {
		this.tfContaRemetente = tfContaRemetente;
	}

	public ComboBox getCbGerarFaturamento() {
		return cbGerarFaturamento;
	}

	public void setCbGerarFaturamento(ComboBox cbGerarFaturamento) {
		this.cbGerarFaturamento = cbGerarFaturamento;
	}

	public ComboBox getCbOptanteSimples() {
		return cbOptanteSimples;
	}

	public void setCbOptanteSimples(ComboBox cbOptanteSimples) {
		this.cbOptanteSimples = cbOptanteSimples;
	}

	public ComboBox getCbLocalizacao() {
		return cbLocalizacao;
	}

	public void setCbLocalizacao(ComboBox cbLocalizacao) {
		this.cbLocalizacao = cbLocalizacao;
	}

	public ComboBox getCbSofreRentencao() {
		return cbSofreRentencao;
	}

	public void setCbSofreRentencao(ComboBox cbSofreRentencao) {
		this.cbSofreRentencao = cbSofreRentencao;
	}

	public TextField getTfPrazoMedioEntrega() {
		return tfPrazoMedioEntrega;
	}

	public void setTfPrazoMedioEntrega(TextField tfPrazoMedioEntrega) {
		this.tfPrazoMedioEntrega = tfPrazoMedioEntrega;
	}

	public TextField getTfNumDiasPrimeiroVenc() {
		return tfNumDiasPrimeiroVenc;
	}

	public void setTfNumDiasPrimeiroVenc(TextField tfNumDiasPrimeiroVenc) {
		this.tfNumDiasPrimeiroVenc = tfNumDiasPrimeiroVenc;
	}

	public TextField getTfNumDiasIntervalo() {
		return tfNumDiasIntervalo;
	}

	public void setTfNumDiasIntervalo(TextField tfNumDiasIntervalo) {
		this.tfNumDiasIntervalo = tfNumDiasIntervalo;
	}

	public TextField getTfQuantidadesParcelas() {
		return tfQuantidadesParcelas;
	}

	public void setTfQuantidadesParcelas(TextField tfQuantidadesParcelas) {
		this.tfQuantidadesParcelas = tfQuantidadesParcelas;
	}

	public TextField getTfChequeNominalA() {
		return tfChequeNominalA;
	}

	public void setTfChequeNominalA(TextField tfChequeNominalA) {
		this.tfChequeNominalA = tfChequeNominalA;
	}

	public TextArea getTaObservacao() {
		return taObservacao;
	}

	public void setTaObservacao(TextArea taObservacao) {
		this.taObservacao = taObservacao;
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setRows(7);
		mainLayout.setColumns(6);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		mocPessoa = new ManyToOneCombo<>();
		mainLayout.addComponent(mocPessoa, 0, 0, 5, 0);
		mocPessoa.setCaption("Pessoa");

		mocSituacaoForCli = new ManyToOneCombo<>();
		mainLayout.addComponent(mocSituacaoForCli, 0, 1, 1, 1);
		mocSituacaoForCli.setCaption("Situação");

		mocAtividadeForCli = new ManyToOneCombo<>();
		mainLayout.addComponent(mocAtividadeForCli, 2, 1, 3, 1);
		mocAtividadeForCli.setCaption("Atividade");

		pdfDesde = ComponentUtil.buildPopupDateField("Desde");
		mainLayout.addComponent(pdfDesde, 0, 3);

		tfContaRemetente = ComponentUtil.buildTextField("Conta Remetente");
		mainLayout.addComponent(tfContaRemetente, 1, 3);

		cbGerarFaturamento = ComponentUtil.buildComboBox("Gerar Faturamento");
		mainLayout.addComponent(cbGerarFaturamento, 2, 3);

		cbOptanteSimples = ComponentUtil.buildComboBox("Optante Simples");
		mainLayout.addComponent(cbOptanteSimples, 3, 3);

		cbLocalizacao = ComponentUtil.buildComboBox("Localização");
		mainLayout.addComponent(cbLocalizacao, 4, 3);

		cbSofreRentencao = ComponentUtil.buildComboBox("Sofre Retenção");
		mainLayout.addComponent(cbSofreRentencao, 5, 3);
		//
		tfPrazoMedioEntrega = ComponentUtil
				.buildNumericField("Prazo Médio Entrega");
		tfPrazoMedioEntrega.setConverter(new BigDecimalConverter());
		mainLayout.addComponent(tfPrazoMedioEntrega, 0, 4);

		tfNumDiasPrimeiroVenc = ComponentUtil
				.buildNumericField("Núm. Dias 1º Vencimento");
		tfNumDiasPrimeiroVenc.setConverter(new IntegerConverter());
		mainLayout.addComponent(tfNumDiasPrimeiroVenc, 1, 4);

		tfNumDiasIntervalo = ComponentUtil
				.buildNumericField("Núm. Dias Intervalo");
		tfNumDiasIntervalo.setConverter(new IntegerConverter());
		mainLayout.addComponent(tfNumDiasIntervalo, 2, 4);

		tfQuantidadesParcelas = ComponentUtil
				.buildNumericField("Quantidade Parcelas");
		tfQuantidadesParcelas.setConverter(new IntegerConverter());
		mainLayout.addComponent(tfQuantidadesParcelas, 3, 4);

		tfChequeNominalA = ComponentUtil.buildTextField("Cheque Nominal à");
		mainLayout.addComponent(tfChequeNominalA, 4, 4, 5, 4);

		taObservacao = ComponentUtil.buildTextArea("Observação");
		mainLayout.addComponent(taObservacao, 0, 5, 5, 6);

		return mainLayout;
	}

	public void preencheBean(FornecedorEntity currentBean) {
		currentBean.setAtividadeForCli(mocAtividadeForCli.getValue());
		currentBean.setChequeNominalA(tfChequeNominalA.getValue());
		currentBean.setContaRemetente(tfContaRemetente.getValue());
		currentBean.setDesde(pdfDesde.getValue());
		currentBean.setNumDiasIntervalo((Integer) tfNumDiasIntervalo
				.getConvertedValue());
		currentBean
				.setNumDiasPrimeiroVencimento((Integer) tfNumDiasPrimeiroVenc
						.getConvertedValue());
		currentBean.setObservacao(taObservacao.getValue());
		// currentBean.setOptanteSimplesNacional(((SimNaoEn) cbOptanteSimples
		// .getValue()).getCodigo());
		currentBean.setPessoa(mocPessoa.getValue());
		currentBean.setPrazoMedioEntrega((BigDecimal) tfPrazoMedioEntrega
				.getConvertedValue());
		currentBean.setQuantidadeParcelas((Integer) tfQuantidadesParcelas
				.getConvertedValue());
		currentBean.setSituacaoForCli(mocSituacaoForCli.getValue());
		// currentBean.setSofreRetencao(((SimNaoEn) cbOptanteSimples.getValue())
		// .getCodigo());
		// currentBean.setLocalizacao(((Localizacao) cbLocalizacao.getValue())
		// .getCodigo());

		if (currentBean.getDataCadastro() == null) {
			currentBean.setDataCadastro(new Date());
		}
	}

	public void preencheForm(FornecedorEntity currentBean) {
		mocAtividadeForCli.setValue(currentBean.getAtividadeForCli());
		tfChequeNominalA.setValue(currentBean.getChequeNominalA());
		tfContaRemetente.setValue(currentBean.getContaRemetente());
		pdfDesde.setValue(currentBean.getDesde());
		tfNumDiasIntervalo.setConvertedValue(currentBean.getNumDiasIntervalo());
		tfNumDiasPrimeiroVenc.setConvertedValue(currentBean
				.getNumDiasPrimeiroVencimento());
		taObservacao.setValue(currentBean.getObservacao());
		// cbOptanteSimples.setValue(SimNaoEn.getEn(currentBean
		// .getOptanteSimplesNacional()));
		mocPessoa.setValue(currentBean.getPessoa());
		tfPrazoMedioEntrega.setConvertedValue(currentBean
				.getPrazoMedioEntrega());
		tfQuantidadesParcelas.setConvertedValue(currentBean
				.getQuantidadeParcelas());
		mocSituacaoForCli.setValue(currentBean.getSituacaoForCli());
		// cbOptanteSimples
		// .setValue(SimNaoEn.getEn(currentBean.getSofreRetencao()));
		// cbLocalizacao.setValue(Localizacao.getLocalizacao(currentBean
		// .getLocalizacao()));
	}

	public enum Localizacao {

		Nacional("Nacional", "N"), Internacional("Internacional", "I");

		private Localizacao(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static Localizacao getLocalizacao(String codigo) {
			for (Localizacao e : Localizacao.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

}