package dc.visao.geral.pessoal;

import java.util.List;

import org.vaadin.addons.maskedtextfield.MaskedTextField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.control.enums.TipoPessoaEn;
import dc.controller.geral.pessoal.PessoaFormController;
import dc.entidade.geral.PessoaContatoEntity;
import dc.entidade.geral.PessoaEnderecoEntity;
import dc.entidade.geral.UfEntity;
import dc.entidade.geral.pessoal.EstadoCivilEntity;
import dc.visao.framework.component.IntegerConverter;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class PessoaFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	@AutoGenerated
	private GridLayout layoutFisica;

	@AutoGenerated
	private GridLayout layoutJuridica;

	@AutoGenerated
	private TabSheet subForms;

	@AutoGenerated
	private ComboBox cbTipoPessoa;

	@AutoGenerated
	private ComboBox cbRaca;

	@AutoGenerated
	private ComboBox cbTipoSanguineo;

	@AutoGenerated
	private ComboBox cbTipoRegime;

	@AutoGenerated
	private ComboBox cbCrt;

	@AutoGenerated
	private ComboBox cbCategoriaReservista;

	@AutoGenerated
	private ComboBox cbCategoriaCnh;

	@AutoGenerated
	private TextField tfNome;

	@AutoGenerated
	private TextField tfEmail;

	@AutoGenerated
	private TextField tfSite;

	@AutoGenerated
	private MaskedTextField mtfCpf;

	@AutoGenerated
	private PopupDateField pdfDataNascimento;

	@AutoGenerated
	private TextField tfNaturalidade;

	@AutoGenerated
	private TextField tfNacionalidade;

	@AutoGenerated
	private TextField tfNomePai;

	@AutoGenerated
	private TextField tfNomeMae;

	@AutoGenerated
	private TextField tfFantasia;

	@AutoGenerated
	private TextField tfCnpj;

	@AutoGenerated
	private TextField tfInscricaoEstadual;

	@AutoGenerated
	private TextField tfInscricaoMunicipal;

	@AutoGenerated
	private PopupDateField pdfDataConstituicao;

	@AutoGenerated
	private TextField tfSuframa;

	@AutoGenerated
	private TextField tfNumeroRg;

	@AutoGenerated
	private TextField tfEmissorRg;

	@AutoGenerated
	private TextField tfOrgaoEmissor;

	@AutoGenerated
	private TextField tfCnh;

	@AutoGenerated
	private TextField tfTituloEleitor;

	@AutoGenerated
	private TextField tfTituloZona;

	@AutoGenerated
	private TextField tfTituloSecao;

	@AutoGenerated
	private PopupDateField pdfDataCnhEmissao;

	@AutoGenerated
	private TextField tfNumeroReservista;

	@AutoGenerated
	private PopupDateField pdfDataEmissaoRg;

	@AutoGenerated
	private OptionGroup ogSexo;

	// @AutoGenerated
	// private OptionGroup ogCategoriaPessoa;

	@AutoGenerated
	private CheckBox ckCliente;

	@AutoGenerated
	private CheckBox ckFornecedor;

	@AutoGenerated
	private CheckBox ckColaborador;

	@AutoGenerated
	private CheckBox ckTransportadora;

	@AutoGenerated
	private ManyToOneCombo<EstadoCivilEntity> mocEstadoCivil;

	private SubFormComponent<PessoaContatoEntity, Integer> sfPessoaContato;

	private SubFormComponent<PessoaEnderecoEntity, Integer> sfPessoaEndereco;

	private PessoaFormController controller;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public PessoaFormView(PessoaFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.controller = controller;
	}

	public ComboBox getCbTipoPessoa() {
		return cbTipoPessoa;
	}

	public void setCbTipoPessoa(ComboBox cbTipoPessoa) {
		this.cbTipoPessoa = cbTipoPessoa;
	}

	public ComboBox getCbRaca() {
		return cbRaca;
	}

	public void setCbRaca(ComboBox cbRaca) {
		this.cbRaca = cbRaca;
	}

	public ComboBox getCbTipoSanguineo() {
		return cbTipoSanguineo;
	}

	public void setCbTipoSanguineo(ComboBox cbTipoSanguineo) {
		this.cbTipoSanguineo = cbTipoSanguineo;
	}

	public ComboBox getCbTipoRegime() {
		return cbTipoRegime;
	}

	public void setCbTipoRegime(ComboBox cbTipoRegime) {
		this.cbTipoRegime = cbTipoRegime;
	}

	public ComboBox getCbCrt() {
		return cbCrt;
	}

	public void setCbCrt(ComboBox cbCrt) {
		this.cbCrt = cbCrt;
	}

	public ComboBox getCbCategoriaReservista() {
		return cbCategoriaReservista;
	}

	public void setCbCategoriaReservista(ComboBox cbCategoriaReservista) {
		this.cbCategoriaReservista = cbCategoriaReservista;
	}

	public ComboBox getCbCategoriaCnh() {
		return cbCategoriaCnh;
	}

	public void setCbCategoriaCnh(ComboBox cbCategoriaCnh) {
		this.cbCategoriaCnh = cbCategoriaCnh;
	}

	public TextField getTfNome() {
		return tfNome;
	}

	public void setTfNome(TextField tfNome) {
		this.tfNome = tfNome;
	}

	public TextField getTfEmail() {
		return tfEmail;
	}

	public void setTfEmail(TextField tfEmail) {
		this.tfEmail = tfEmail;
	}

	public TextField getTfSite() {
		return tfSite;
	}

	public void setTfSite(TextField tfSite) {
		this.tfSite = tfSite;
	}

	public MaskedTextField getMtfCpf() {
		return mtfCpf;
	}

	public void setMtfCpf(MaskedTextField mtfCpf) {
		this.mtfCpf = mtfCpf;
	}

	public PopupDateField getPdfDataNascimento() {
		return pdfDataNascimento;
	}

	public void setPdfDataNascimento(PopupDateField pdfDataNascimento) {
		this.pdfDataNascimento = pdfDataNascimento;
	}

	public TextField getTfNaturalidade() {
		return tfNaturalidade;
	}

	public void setTfNaturalidade(TextField tfNaturalidade) {
		this.tfNaturalidade = tfNaturalidade;
	}

	public TextField getTfNacionalidade() {
		return tfNacionalidade;
	}

	public void setTfNacionalidade(TextField tfNacionalidade) {
		this.tfNacionalidade = tfNacionalidade;
	}

	public TextField getTfNomePai() {
		return tfNomePai;
	}

	public void setTfNomePai(TextField tfNomePai) {
		this.tfNomePai = tfNomePai;
	}

	public TextField getTfNomeMae() {
		return tfNomeMae;
	}

	public void setTfNomeMae(TextField tfNomeMae) {
		this.tfNomeMae = tfNomeMae;
	}

	public TextField getTfFantasia() {
		return tfFantasia;
	}

	public void setTfFantasia(TextField tfFantasia) {
		this.tfFantasia = tfFantasia;
	}

	public TextField getTfCnpj() {
		return tfCnpj;
	}

	public void setTfCnpj(TextField tfCnpj) {
		this.tfCnpj = tfCnpj;
	}

	public TextField getTfInscricaoEstadual() {
		return tfInscricaoEstadual;
	}

	public void setTfInscricaoEstadual(TextField tfInscricaoEstadual) {
		this.tfInscricaoEstadual = tfInscricaoEstadual;
	}

	public TextField getTfInscricaoMunicipal() {
		return tfInscricaoMunicipal;
	}

	public void setTfInscricaoMunicipal(TextField tfInscricaoMunicipal) {
		this.tfInscricaoMunicipal = tfInscricaoMunicipal;
	}

	public PopupDateField getPdfDataConstituicao() {
		return pdfDataConstituicao;
	}

	public void setPdfDataConstituicao(PopupDateField pdfDataConstituicao) {
		this.pdfDataConstituicao = pdfDataConstituicao;
	}

	public TextField getTfSuframa() {
		return tfSuframa;
	}

	public void setTfSuframa(TextField tfSuframa) {
		this.tfSuframa = tfSuframa;
	}

	public TextField getTfNumeroRg() {
		return tfNumeroRg;
	}

	public void setTfNumeroRg(TextField tfNumeroRg) {
		this.tfNumeroRg = tfNumeroRg;
	}

	public TextField getTfEmissorRg() {
		return tfEmissorRg;
	}

	public void setTfEmissorRg(TextField tfEmissorRg) {
		this.tfEmissorRg = tfEmissorRg;
	}

	public TextField getTfOrgaoEmissor() {
		return tfOrgaoEmissor;
	}

	public void setTfOrgaoEmissor(TextField tfOrgaoEmissor) {
		this.tfOrgaoEmissor = tfOrgaoEmissor;
	}

	public TextField getTfCnh() {
		return tfCnh;
	}

	public void setTfCnh(TextField tfCnh) {
		this.tfCnh = tfCnh;
	}

	public TextField getTfTituloEleitor() {
		return tfTituloEleitor;
	}

	public void setTfTituloEleitor(TextField tfTituloEleitor) {
		this.tfTituloEleitor = tfTituloEleitor;
	}

	public TextField getTfTituloZona() {
		return tfTituloZona;
	}

	public void setTfTituloZona(TextField tfTituloZona) {
		this.tfTituloZona = tfTituloZona;
	}

	public TextField getTfTituloSecao() {
		return tfTituloSecao;
	}

	public void setTfTituloSecao(TextField tfTituloSecao) {
		this.tfTituloSecao = tfTituloSecao;
	}

	public PopupDateField getPdfDataCnhEmissao() {
		return pdfDataCnhEmissao;
	}

	public void setPdfDataCnhEmissao(PopupDateField pdfDataCnhEmissao) {
		this.pdfDataCnhEmissao = pdfDataCnhEmissao;
	}

	public TextField getTfNumeroReservista() {
		return tfNumeroReservista;
	}

	public void setTfNumeroReservista(TextField tfNumeroReservista) {
		this.tfNumeroReservista = tfNumeroReservista;
	}

	public PopupDateField getPdfDataEmissaoRg() {
		return pdfDataEmissaoRg;
	}

	public void setPdfDataEmissaoRg(PopupDateField pdfDataEmissaoRg) {
		this.pdfDataEmissaoRg = pdfDataEmissaoRg;
	}

	public OptionGroup getOgSexo() {
		return ogSexo;
	}

	public void setOgSexo(OptionGroup ogSexo) {
		this.ogSexo = ogSexo;
	}

	public CheckBox getCkCliente() {
		return ckCliente;
	}

	public void setCkCliente(CheckBox ckCliente) {
		this.ckCliente = ckCliente;
	}

	public CheckBox getCkFornecedor() {
		return ckFornecedor;
	}

	public void setCkFornecedor(CheckBox ckFornecedor) {
		this.ckFornecedor = ckFornecedor;
	}

	public CheckBox getCkColaborador() {
		return ckColaborador;
	}

	public void setCkColaborador(CheckBox ckColaborador) {
		this.ckColaborador = ckColaborador;
	}

	public CheckBox getCkTransportadora() {
		return ckTransportadora;
	}

	public void setCkTransportadora(CheckBox ckTransportadora) {
		this.ckTransportadora = ckTransportadora;
	}

	public ManyToOneCombo<EstadoCivilEntity> getMocEstadoCivil() {
		return mocEstadoCivil;
	}

	public void setMocEstadoCivil(
			ManyToOneCombo<EstadoCivilEntity> mocEstadoCivil) {
		this.mocEstadoCivil = mocEstadoCivil;
	}

	public SubFormComponent<PessoaContatoEntity, Integer> getSfPessoaContato() {
		return sfPessoaContato;
	}

	public void setSfPessoaContato(
			SubFormComponent<PessoaContatoEntity, Integer> sfPessoaContato) {
		this.sfPessoaContato = sfPessoaContato;
	}

	public SubFormComponent<PessoaEnderecoEntity, Integer> getSfPessoaEndereco() {
		return sfPessoaEndereco;
	}

	public void setSfPessoaEndereco(
			SubFormComponent<PessoaEnderecoEntity, Integer> sfPessoaEndereco) {
		this.sfPessoaEndereco = sfPessoaEndereco;
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		fields = buildFields();
		mainLayout.addComponent(fields);

		subForms = new TabSheet();

		buildAbaInformacoes();
		buildAbaContatos();
		buildAbaEnderecos();

		mainLayout.addComponent(subForms);
		mainLayout.setExpandRatio(subForms, 1);
	}

	public void buildAbaInformacoes() {
		subForms = new TabSheet();
		subForms.setImmediate(true);
		subForms.setSizeFull();
		VerticalLayout verticalLayout = new VerticalLayout();

		verticalLayout.addComponent(montaLayoutFisica());
		verticalLayout.addComponent(montaLayoutJuridica());

		layoutFisica.setVisible(true);
		layoutJuridica.setVisible(false);

		subForms.addTab(verticalLayout, "Informações do tipo de pessoa", null);

	}

	public void buildAbaContatos() {
		subForms.addTab(buildPessoaContatoSubForm(), "Contato", null);
	}

	// private TabSheet buildContatosSubForm() {
	// // common part: create layout
	// TabSheet sub = new TabSheet();
	// sub.setWidth("100.0%");
	// sub.setHeight("100.0%");
	// sub.setSizeFull();
	// sub.setImmediate(true);
	// sub.addTab(null, "Contatos", null);
	// return sub;
	// }

	public void buildAbaEnderecos() {
		subForms.addTab(buildPessoaEnderecoSubForm(), "Endereços", null);
	}

	public GridLayout montaLayoutFisica() {
		layoutFisica = new GridLayout(6, 7);
		layoutFisica.setImmediate(false);
		layoutFisica.setWidth("100.0%");
		layoutFisica.setHeight("-1px");
		layoutFisica.setMargin(true);
		layoutFisica.setSpacing(true);

		mtfCpf = ComponentUtil.buildMaskedTextField("CPF", "###.###.###-##");
		pdfDataNascimento = ComponentUtil
				.buildPopupDateField("Data de nascimento");
		pdfDataNascimento.setWidth("112px");
		cbRaca = ComponentUtil.buildComboBox("Raça");
		mocEstadoCivil = new ManyToOneCombo<>();
		mocEstadoCivil.setCaption("Estado civil");
		cbTipoSanguineo = ComponentUtil.buildComboBox("Tipo sanguíneo");

		tfNaturalidade = ComponentUtil.buildTextField("Naturalidade");
		tfNacionalidade = ComponentUtil.buildTextField("Nacionalidade");

		tfNomePai = ComponentUtil.buildTextField("Nome do pai");
		tfNomeMae = ComponentUtil.buildTextField("Nome da mãe");

		layoutFisica.addComponent(mtfCpf, 0, 0);
		layoutFisica.addComponent(pdfDataNascimento, 1, 0);
		layoutFisica.addComponent(mocEstadoCivil, 2, 0);
		layoutFisica.addComponent(cbRaca, 3, 0);
		layoutFisica.addComponent(cbTipoSanguineo, 4, 0);

		layoutFisica.addComponent(tfNaturalidade, 0, 1, 1, 1);
		layoutFisica.addComponent(tfNacionalidade, 2, 1, 3, 1);

		layoutFisica.addComponent(tfNomePai, 0, 2, 1, 2);
		layoutFisica.addComponent(tfNomeMae, 2, 2, 3, 2);

		GridLayout layoutRG = buildContentRg();
		layoutFisica.addComponent(layoutRG, 0, 3, 1, 3);

		GridLayout layoutReservista = buildContentReservista();
		layoutFisica.addComponent(layoutReservista, 2, 3, 3, 3);

		ogSexo = new OptionGroup("Sexo");
		layoutFisica.addComponent(ogSexo, 4, 3);

		GridLayout layoutCNH = buildContentCnh();
		layoutFisica.addComponent(layoutCNH, 0, 4, 1, 4);

		GridLayout layoutTitulo = buildContentTituloEleitor();
		layoutFisica.addComponent(layoutTitulo, 2, 4, 3, 4);

		return layoutFisica;
	}

	private GridLayout buildContentTituloEleitor() {
		GridLayout layoutTitulo = new GridLayout(3, 2);
		layoutTitulo.setImmediate(false);
		layoutTitulo.setWidth("100.0%");
		layoutTitulo.setHeight("-1px");
		layoutTitulo.setMargin(false);
		layoutTitulo.setSpacing(true);

		tfTituloEleitor = ComponentUtil.buildTextField("Número");
		tfTituloZona = ComponentUtil.buildNumericField("Zona");
		tfTituloSecao = ComponentUtil.buildNumericField("Seção");
		tfTituloZona.setConverter(new IntegerConverter());
		tfTituloZona.setMaxLength(10);
		tfTituloSecao.setConverter(new IntegerConverter());
		tfTituloSecao.setMaxLength(10);

		Label lblTitulo = new Label("Título de eleitor");
		layoutTitulo.addComponent(lblTitulo, 0, 0, 1, 0);
		layoutTitulo.addComponent(tfTituloEleitor, 0, 1);
		layoutTitulo.addComponent(tfTituloZona, 1, 1);
		layoutTitulo.addComponent(tfTituloSecao, 2, 1);

		return layoutTitulo;
	}

	private GridLayout buildContentCnh() {
		GridLayout layoutCnh = new GridLayout(3, 2);
		layoutCnh.setImmediate(false);
		layoutCnh.setWidth("100.0%");
		layoutCnh.setHeight("-1px");
		layoutCnh.setMargin(false);
		layoutCnh.setSpacing(true);

		tfCnh = ComponentUtil.buildTextField("Número da CNH");
		pdfDataCnhEmissao = ComponentUtil.buildPopupDateField("Emissão da CNH");
		cbCategoriaCnh = ComponentUtil.buildComboBox("Categoria da CNH");
		Label lblCnh = new Label("CNH");
		layoutCnh.addComponent(lblCnh, 0, 0);
		layoutCnh.addComponent(tfCnh, 0, 1);
		layoutCnh.addComponent(cbCategoriaCnh, 1, 1);
		layoutCnh.addComponent(pdfDataCnhEmissao, 2, 1);

		return layoutCnh;
	}

	private GridLayout buildContentReservista() {
		GridLayout layoutReservista = new GridLayout(2, 2);
		layoutReservista.setImmediate(false);
		layoutReservista.setWidth("100.0%");
		layoutReservista.setHeight("-1px");
		layoutReservista.setMargin(false);
		layoutReservista.setSpacing(true);

		tfNumeroReservista = ComponentUtil.buildTextField("Número");
		cbCategoriaReservista = ComponentUtil.buildComboBox("Categoria");
		Label lblReservista = new Label("Reservista");
		layoutReservista.addComponent(lblReservista, 0, 0);
		layoutReservista.addComponent(tfNumeroReservista, 0, 1);
		layoutReservista.addComponent(cbCategoriaReservista, 1, 1);

		return layoutReservista;
	}

	private GridLayout buildContentRg() {
		GridLayout layoutRg = new GridLayout(3, 2);
		layoutRg.setImmediate(false);
		layoutRg.setWidth("100.0%");
		layoutRg.setHeight("-1px");
		layoutRg.setMargin(false);
		layoutRg.setSpacing(true);

		tfNumeroRg = ComponentUtil.buildTextField("Número do RG");
		pdfDataEmissaoRg = ComponentUtil.buildPopupDateField("Emissão do RG");
		tfOrgaoEmissor = ComponentUtil.buildTextField("Órgão emissor");
		Label lblRg = new Label("RG");
		layoutRg.addComponent(lblRg, 0, 0);
		layoutRg.addComponent(tfNumeroRg, 0, 1);
		layoutRg.addComponent(tfOrgaoEmissor, 1, 1);
		layoutRg.addComponent(pdfDataEmissaoRg, 2, 1);

		return layoutRg;
	}

	public GridLayout montaLayoutJuridica() {
		layoutJuridica = new GridLayout(8, 7);
		layoutJuridica.setImmediate(false);
		layoutJuridica.setWidth("100.0%");
		layoutJuridica.setHeight("-1px");
		layoutJuridica.setMargin(true);
		layoutJuridica.setSpacing(true);

		tfFantasia = ComponentUtil.buildTextField("Nome fantasia");
		layoutJuridica.addComponent(tfFantasia, 0, 0, 5, 0);

		tfCnpj = ComponentUtil.buildTextField("CNPJ");
		tfInscricaoEstadual = ComponentUtil
				.buildTextField("Inscrição estadual");
		tfInscricaoMunicipal = ComponentUtil
				.buildTextField("Inscrição municipal");
		pdfDataConstituicao = ComponentUtil
				.buildPopupDateField("Data da constituição");
		tfSuframa = ComponentUtil.buildTextField("Suframa");

		layoutJuridica.addComponent(tfCnpj, 0, 1);
		layoutJuridica.addComponent(tfInscricaoEstadual, 1, 1, 2, 1);
		layoutJuridica.addComponent(tfInscricaoMunicipal, 3, 1);
		layoutJuridica.addComponent(pdfDataConstituicao, 4, 1);
		layoutJuridica.addComponent(tfSuframa, 5, 1);

		cbTipoRegime = ComponentUtil.buildComboBox("Tipo de regime");
		cbCrt = ComponentUtil.buildComboBox("CRT");

		layoutJuridica.addComponent(cbTipoRegime, 0, 2, 2, 2);
		layoutJuridica.addComponent(cbCrt, 3, 2, 4, 2);

		return layoutJuridica;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 3);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		tfNome = ComponentUtil.buildTextField("Nome");
		tfNome.setRequired(true);
		fields.addComponent(tfNome, 0, 0, 2, 0);

		cbTipoPessoa = new ComboBox("Tipo de pessoa");
		cbTipoPessoa.setNullSelectionAllowed(false);
		// cmbTipoPessoa.setValue(cmbTipoPessoa.getItemIds().iterator().next());
		// cmbTipoPessoa.setItemCaptionPropertyId("label");
		cbTipoPessoa.setRequired(true);
		cbTipoPessoa.setImmediate(true);
		cbTipoPessoa.addValueChangeListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				TipoPessoaEn p = (TipoPessoaEn) event.getProperty().getValue();

				if (p.equals(TipoPessoaEn.F)) {
					layoutFisica.setVisible(true);
					layoutJuridica.setVisible(false);
				}

				if (p.equals(TipoPessoaEn.J)) {
					layoutFisica.setVisible(false);
					layoutJuridica.setVisible(true);
				}
			}

		});

		fields.addComponent(cbTipoPessoa, 3, 0);

		tfEmail = ComponentUtil.buildTextField("Email");
		tfEmail.setHeight("30");
		fields.addComponent(tfEmail, 0, 1, 2, 1);

		tfSite = ComponentUtil.buildTextField("Site");
		tfSite.setHeight("30");
		fields.addComponent(tfSite, 3, 1);

		// ogCategoriaPessoa = new OptionGroup("");
		// ogCategoriaPessoa.setMultiSelect(true);
		// ogCategoriaPessoa.setStyleName("v-select-optiongroup-horizontal");
		// ogCategoriaPessoa.addItem(ckCliente);
		// ogCategoriaPessoa.addItem(ckColaborador);
		// ogCategoriaPessoa.addItem(ckFornecedor);
		// ogCategoriaPessoa.addItem(ckTransportadora);
		fields.addComponent(buildCategoriaCliente(), 0, 2, 5, 2);

		return fields;
	}

	@AutoGenerated
	private GridLayout buildCategoriaCliente() {
		// common part: create layout
		GridLayout fields = new GridLayout(4, 1);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		// ckCliente = ComponentUtil.buildCheckBox("Cliente");
		ckCliente = new CheckBox();
		ckCliente.setCaption("Cliente");
		ckCliente.setImmediate(true);
		ckCliente.setSizeFull();
		ckCliente.addValueChangeListener(event -> controller.teste());
		fields.addComponent(ckCliente, 0, 0);

		// ckColaborador = ComponentUtil.buildCheckBox("Colaborador");
		ckColaborador = new CheckBox();
		ckColaborador.setCaption("Colaborador");
		ckColaborador.setImmediate(true);
		ckColaborador.setSizeFull();
		fields.addComponent(ckColaborador, 1, 0);

		// ckFornecedor = ComponentUtil.buildCheckBox("Fornecedor");
		ckFornecedor = new CheckBox();
		ckFornecedor.setCaption("Fornecedor");
		ckFornecedor.setImmediate(true);
		ckFornecedor.setSizeFull();
		fields.addComponent(ckFornecedor, 2, 0);

		// ckTransportadora = ComponentUtil.buildCheckBox("Transportadora");
		ckTransportadora = new CheckBox();
		ckTransportadora.setCaption("Transportadora");
		ckTransportadora.setImmediate(true);
		ckTransportadora.setSizeFull();
		fields.addComponent(ckTransportadora, 3, 0);

		return fields;
	}

	/**
	 * SUBFORM
	 */

	private SubFormComponent<PessoaContatoEntity, Integer> buildPessoaContatoSubForm() {
		// common part: create layout

		sfPessoaContato = new SubFormComponent<PessoaContatoEntity, Integer>(
				PessoaContatoEntity.class, new String[] { "nome", "email",
						"foneComercial", "foneResidencial", "foneCelular" },
				new String[] { "Nome", "E-mail", "Telefone comercial",
						"Telefone residencial", "Celular" }) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("nome".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField("Nome");

							return textField;
						}

						if ("email".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField("Email");

							return textField;
						}

						if ("foneComercial".equals(propertyId)) {
							MaskedTextField textField = ComponentUtil
									.buildMaskedTextField("Telefone comercial",
											"(##) #####-####");
							textField.setMaskClientOnly(true);

							return textField;
						}

						if ("foneResidencial".equals(propertyId)) {
							MaskedTextField textField = ComponentUtil
									.buildMaskedTextField(
											"Telefone residencial",
											"(##) #####-####");
							textField.setMaskClientOnly(true);

							return textField;
						}

						if ("foneCelular".equals(propertyId)) {
							MaskedTextField textField = ComponentUtil
									.buildMaskedTextField("Celular",
											"(##) #####-####");
							textField.setMaskClientOnly(true);

							return textField;
						}

						return null;
					}

				};
			}

			@Override
			public boolean validateItems(List<PessoaContatoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}

			protected PessoaContatoEntity getNovo() {
				PessoaContatoEntity detalhe = controller.aderirPessoaContato();

				return detalhe;
			}

			@Override
			protected void getRemoverSelecionados(
					List<PessoaContatoEntity> values) {
				// TODO Auto-generated method stub
				controller.removerPessoaContato(values);
			}

		};

		return sfPessoaContato;
	}

	private SubFormComponent<PessoaEnderecoEntity, Integer> buildPessoaEnderecoSubForm() {
		// common part: create layout
		String[] atributos = new String[] { "cep", "logradouro", "numero",
				"complemento", "bairro", "cidade", "uf", "municipioIbge",
				"fone", "fax", "principal", "entrega", "cobranca",
				"correspondencia" };

		String[] headers = new String[] { "CEP", "Logradouro", "Nº",
				"Complemento", "Bairro", "Cidade", "UF", "Município IBGE",
				"Telefone", "Fax", "Principal", "Entrega", "Cobrança",
				"Correspondência" };

		sfPessoaEndereco = new SubFormComponent<PessoaEnderecoEntity, Integer>(
				PessoaEnderecoEntity.class, atributos, headers) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("cep".equals(propertyId)) {
							MaskedTextField mtf = ComponentUtil
									.buildMaskedTextField("CEP", "#####-###");
							mtf.setMaskClientOnly(true);

							return mtf;
						}

						if ("logradouro".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildTextField("Logradouro");

							return tf;
						}

						if ("numero".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildTextField("Número");
							tf.setMaxLength(6);
							tf.setConverter(new IntegerConverter());

							return tf;
						}

						if ("complemento".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildTextField("Complemento");

							return tf;
						}

						if ("bairro".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildTextField("Bairro");

							return tf;
						}

						if ("cidade".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildTextField("Cidade");

							return tf;
						}

						if ("municipioIbge".equals(propertyId)) {
							TextField tf = ComponentUtil
									.buildNumericField("Município IBGE");
							tf.setConverter(new IntegerConverter());
							tf.setMaxLength(10);

							return tf;
						}

						if ("uf".equals(propertyId)) {
							ComboBox cb = ComponentUtil.buildComboBox("UF");

							BeanItemContainer<UfEntity> bic = controller
									.getUfBic();
							cb.setContainerDataSource(bic);
							cb.setItemCaptionPropertyId("nome");

							return cb;
						}

						if ("fone".equals(propertyId)) {
							MaskedTextField mtf = ComponentUtil
									.buildMaskedTextField("Telefone",
											"(##) #####-####");
							mtf.setMaskClientOnly(true);

							return mtf;
						}

						if ("fax".equals(propertyId)) {
							MaskedTextField mtf = ComponentUtil
									.buildMaskedTextField("Fax",
											"(##) #####-####");
							mtf.setMaskClientOnly(true);

							return mtf;
						}

						if ("principal".equals(propertyId)) {
							CheckBox check = ComponentUtil.buildCheckBox(null);

							return check;
						}

						if ("entrega".equals(propertyId)) {
							CheckBox check = ComponentUtil.buildCheckBox(null);

							return check;
						}

						if ("cobranca".equals(propertyId)) {
							CheckBox check = ComponentUtil.buildCheckBox(null);

							return check;
						}

						if ("correspondencia".equals(propertyId)) {
							CheckBox check = ComponentUtil.buildCheckBox(null);

							return check;
						}

						return null;
					}

				};
			}

			@Override
			public boolean validateItems(List<PessoaEnderecoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}

			protected PessoaEnderecoEntity getNovo() {
				PessoaEnderecoEntity endereco = controller
						.aderirPessoaEndereco();

				return endereco;
			}

			@Override
			protected void getRemoverSelecionados(
					List<PessoaEnderecoEntity> values) {
				// TODO Auto-generated method stub
				controller.removerPessoaEndereco(values);
			}

		};

		return sfPessoaEndereco;
	}

}