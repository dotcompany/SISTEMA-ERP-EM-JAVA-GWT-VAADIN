package dc.visao.suprimento.estoque;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.estoque.LoteProdutoFormController;
import dc.entidade.nfe.NfeDetalheEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class LoteProdutoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	private GridLayout fields;
	private TabSheet tabSheet;
	
	private TextField txtCodigo, txtNome;
	private TextArea txaDescricao, txaObservacao;
	private PopupDateField pdDataCadastro, pdDataCompra, pdDataFabricacao, pdDataVencimento;
	
	private SubFormComponent<NfeDetalheEntity, Integer> nfeDetalheSubForm = null;
	
	LoteProdutoFormController controller;
	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LoteProdutoFormView(LoteProdutoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.controller = controller;
	}

	private VerticalLayout buildMainLayout() {

		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		fields = buildFields();
		mainLayout.addComponent(fields);
		
		tabSheet = new TabSheet();
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		tabSheet.setSizeFull();
		tabSheet.setImmediate(true);
		
		tabSheet = buildNfeDetalheSubForm();
				
		mainLayout.addComponent(tabSheet);

		return mainLayout;
	}
	
	private GridLayout buildFields() {
		fields = new GridLayout();
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setRows(8);
		fields.setColumns(8);
		
		txtCodigo = ComponentUtil.buildTextField("Código");
		fields.addComponent(txtCodigo, 0, 0);
		
		txtNome = ComponentUtil.buildTextField("Nome");
		fields.addComponent(txtNome, 1, 0);
		
		txaDescricao = ComponentUtil.buildTextArea("Descrição");
		fields.addComponent(txaDescricao, 0, 1);
		
		pdDataCadastro = ComponentUtil.buildPopupDateField("Data Cadastro");
		fields.addComponent(pdDataCadastro, 0, 2);
		
		pdDataCompra = ComponentUtil.buildPopupDateField("Data Compra");
		fields.addComponent(pdDataCompra, 1, 2);
		
		pdDataFabricacao = ComponentUtil.buildPopupDateField("Data Fabricação");
		fields.addComponent(pdDataFabricacao, 2, 2);
		
		pdDataVencimento = ComponentUtil.buildPopupDateField("Data Vencimento");
		fields.addComponent(pdDataVencimento, 3, 2);
		
		txaObservacao = ComponentUtil.buildTextArea("Observação");
		fields.addComponent(txaObservacao, 0, 3);
		
		return fields;
		
	}
	
	public void buildAbaNfeDetalhe() {
		TabSheet aba = buildNfeDetalheSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();

		layout.addComponent(aba);
		tabSheet.addComponent(layout);

	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildNfeDetalheSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		String[] campos = new String[] { "item", "gtin", "descricao",
				"unidade", "cfop", "quantidade",
				"valorUnitario", "valorTotal" };
		String[] titulos = new String[] { "Item", "GTIN", "Descrição",
				"Unidade", "CFOP", "Quantidade", "Valor Unitário",
				"Valor Total" };

		nfeDetalheSubForm = new SubFormComponent<NfeDetalheEntity, Integer>(
				NfeDetalheEntity.class, campos, titulos, new String[] {
						"valorUnitario", "valorTotal" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("item".equals(propertyId)) {
							TextField combobox = ComponentUtil
									.buildNumericField(null);
							return combobox;
						} else if ("gtin".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("descricao".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("unidade".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							return textField;
						} else if ("cfop".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumericField(null);
							return textField;
						} else if ("quantidade".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							return textField;
						} else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						}
						
						else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}
			
			protected NfeDetalheEntity getNovo() {
				NfeDetalheEntity nfe = controller
						.novoNfe();
				return nfe;
			}

			protected void getRemoverSelecionados(
					List<NfeDetalheEntity> values) {
				controller.removerNfe(values);
			}

			@Override
			public boolean validateItems(List<NfeDetalheEntity> items) {
				return true;
			}
		};

		sub.addTab(nfeDetalheSubForm, "NFE Detalhe", null);

		return sub;
		
	}
	
	public void preencheSubForm(List<NfeDetalheEntity> detalhes) {
		nfeDetalheSubForm.fillWith(detalhes);
	}
			
}
