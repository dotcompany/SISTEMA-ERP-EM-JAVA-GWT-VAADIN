package dc.visao.suprimento.contrato;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.geral.diverso.SetorEntity;
import dc.entidade.geral.pessoal.ClienteEntity;
import dc.entidade.geral.pessoal.ColaboradorEntity;
import dc.entidade.geral.pessoal.FornecedorEntity;
import dc.entidade.suprimentos.contrato.SolicitacaoServicoEntity;
import dc.entidade.suprimentos.contrato.TipoServicoEntity;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class ContratoSolicitacaoServicoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private ManyToOneCombo<FornecedorEntity> cbFornecedor;
	@AutoGenerated
	private TextArea txaDescricao;
	@AutoGenerated
	private ComboBox cmbStatusSituacao;
	@AutoGenerated
	private ComboBox cmbUrgente;
	@AutoGenerated
	private PopupDateField dtDesejadaInicio;
	@AutoGenerated
	private PopupDateField dtSolicitacao;
	@AutoGenerated
	private ManyToOneCombo<TipoServicoEntity> cbTipoServico;
	@AutoGenerated
	private ManyToOneCombo<ColaboradorEntity> cbColaborador;
	@AutoGenerated
	private ManyToOneCombo<SetorEntity> cbSetor;
	@AutoGenerated
	private ManyToOneCombo<ClienteEntity> cbCliente;

	@AutoGenerated
	private OptionGroup grpTipo;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ContratoSolicitacaoServicoFormView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public ComboBox getCmbStatusSituacao() {
		return cmbStatusSituacao;
	}

	public void setCmbStatusSituacao(ComboBox cmbStatusSituacao) {
		this.cmbStatusSituacao = cmbStatusSituacao;
	}

	public ComboBox getCmbUrgente() {
		return cmbUrgente;
	}

	public void setCmbUrgente(ComboBox cmbUrgente) {
		this.cmbUrgente = cmbUrgente;
	}

	public PopupDateField getDtDesejadaInicio() {
		return dtDesejadaInicio;
	}

	public void setDtDesejadaInicio(PopupDateField dtDesejadaInicio) {
		this.dtDesejadaInicio = dtDesejadaInicio;
	}

	public PopupDateField getDtSolicitacao() {
		return dtSolicitacao;
	}

	public void setDtSolicitacao(PopupDateField dtSolicitacao) {
		this.dtSolicitacao = dtSolicitacao;
	}

	public void carregarView(SolicitacaoServicoEntity currentBean) {
		cbFornecedor.setValue(currentBean.getFornecedor());
		cbCliente.setValue(currentBean.getCliente());
		cbSetor.setValue(currentBean.getSetor());
		cbColaborador.setValue(currentBean.getColaborador());
		dtSolicitacao.setValue(currentBean.getDataSolicitacao());
		dtDesejadaInicio.setValue(currentBean.getDataDesejadaInicio());
		cmbUrgente.setValue(Urgente.getUrgente(currentBean.getUrgente()));
		cmbStatusSituacao.setValue(StatusSolicitacaoServico
				.getSituacao(currentBean.getStatusSolicitacao()));
		cbTipoServico.setValue(currentBean.getContratoTipoServico());
		txaDescricao.setValue(currentBean.getDescricao());
	}

	public void preencherObjeto(final SolicitacaoServicoEntity currentBean) {
		currentBean.setFornecedor((FornecedorEntity) cbFornecedor.getValue());
		currentBean.setCliente((ClienteEntity) cbCliente.getValue());
		currentBean.setSetor((SetorEntity) cbSetor.getValue());
		currentBean.setColaborador((ColaboradorEntity) cbColaborador.getValue());
		currentBean.setContratoTipoServico((TipoServicoEntity) cbTipoServico
				.getValue());
		currentBean.setDataSolicitacao(dtSolicitacao.getValue());
		currentBean.setDataDesejadaInicio(dtDesejadaInicio.getValue());
		currentBean.setUrgente(((Urgente) cmbUrgente.getValue()).getCodigo());
		currentBean
				.setStatusSolicitacao(((StatusSolicitacaoServico) cmbStatusSituacao
						.getValue()).getCodigo());
		currentBean.setDescricao(txaDescricao.getValue());
	}

	public void carregarUrgente() {
		this.cmbUrgente.removeAllItems();
		this.cmbUrgente.addItem(Urgente.SIM);
		this.cmbUrgente.addItem(Urgente.NAO);
	}

	public void carregarStatusSituacao() {
		this.cmbStatusSituacao.removeAllItems();
		this.cmbStatusSituacao.addItem(StatusSolicitacaoServico.AGUARDANDO);
	}

	public enum StatusSolicitacaoServico {
		AGUARDANDO("Aguardando", "A"), DEFERIDO("Deferido", "D"), INDEFERIDO(
				"Indeferido", "I");

		private StatusSolicitacaoServico(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static StatusSolicitacaoServico getSituacao(String codigo) {

			for (StatusSolicitacaoServico e : StatusSolicitacaoServico.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum Urgente {
		SIM("Sim", "S"), NAO("Não", "N");

		private Urgente(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static Urgente getUrgente(String codigo) {
			for (Urgente e : Urgente.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public TextArea getTxaDescricao() {
		return txaDescricao;
	}

	public void setTxaDescricao(TextArea txaDescricao) {
		this.txaDescricao = txaDescricao;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout(4, 8);

		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setSpacing(true);

		grpTipo = new OptionGroup("Selecione o Responsável");
		grpTipo.addItem(ResponsavelEnum.FORNECEDOR);
		grpTipo.addItem(ResponsavelEnum.CLIENTE);

		grpTipo.addListener(new Property.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				if (grpTipo.getValue().equals(ResponsavelEnum.FORNECEDOR)) {
					cbCliente.setVisible(false);
					cbFornecedor.setVisible(true);
				} else if (grpTipo.getValue().equals(ResponsavelEnum.CLIENTE)) {
					cbFornecedor.setVisible(false);
					cbCliente.setVisible(true);
				}
			}
		});

		gridLayout_1.addComponent(grpTipo, 0, 0, 3, 0);

		// cmbFornecedor
		cbFornecedor = new ManyToOneCombo<FornecedorEntity>();
		cbFornecedor.setCaption("Fornecedor");
		cbFornecedor.setVisible(false);
		gridLayout_1.addComponent(cbFornecedor, 0, 1, 3, 1);

		// cmbCliente
		cbCliente = new ManyToOneCombo<>();
		cbCliente.setCaption("Cliente");
		cbCliente.setVisible(false);
		gridLayout_1.addComponent(cbCliente, 0, 2, 3, 2);

		// cmbSetor
		cbSetor = new ManyToOneCombo<>();
		cbSetor.setCaption("Setor");
		gridLayout_1.addComponent(cbSetor, 0, 3, 3, 3);

		// cmbColaborador
		cbColaborador = new ManyToOneCombo<>();
		cbColaborador.setCaption("Colaborador");
		gridLayout_1.addComponent(cbColaborador, 0, 4, 3, 4);

		// cmbTipoServico
		cbTipoServico = new ManyToOneCombo<>();
		cbTipoServico.setCaption("Tipo serviço");
		gridLayout_1.addComponent(cbTipoServico, 0, 5, 3, 5);

		// dtSolicitacao
		dtSolicitacao = ComponentUtil.buildPopupDateField("DataSolicitação");
		gridLayout_1.addComponent(dtSolicitacao, 0, 6);

		// dtDesejadaInicio
		dtDesejadaInicio = ComponentUtil
				.buildPopupDateField("Data Desejada Início");
		gridLayout_1.addComponent(dtDesejadaInicio, 1, 6);

		// cmbUrgente
		cmbUrgente = ComponentUtil.buildComboBox("Urgente");
		gridLayout_1.addComponent(cmbUrgente, 2, 6);

		// cmbStatusSituacao
		cmbStatusSituacao = ComponentUtil.buildComboBox("Status Situação");
		gridLayout_1.addComponent(cmbStatusSituacao, 3, 6);

		// txaDescricao
		txaDescricao = ComponentUtil.buildTextArea("Descrição");
		gridLayout_1.addComponent(txaDescricao, 0, 7, 3, 7);

		return gridLayout_1;
	}

	public ManyToOneCombo<FornecedorEntity> getCbFornecedor() {
		return cbFornecedor;
	}

	public void setCbFornecedor(ManyToOneCombo<FornecedorEntity> cbFornecedor) {
		this.cbFornecedor = cbFornecedor;
	}

	public ManyToOneCombo<TipoServicoEntity> getCbTipoServico() {
		return cbTipoServico;
	}

	public void setCbTipoServico(
			ManyToOneCombo<TipoServicoEntity> cbTipoServico) {
		this.cbTipoServico = cbTipoServico;
	}

	public ManyToOneCombo<ColaboradorEntity> getCbColaborador() {
		return cbColaborador;
	}

	public void setCbColaborador(ManyToOneCombo<ColaboradorEntity> cbColaborador) {
		this.cbColaborador = cbColaborador;
	}

	public ManyToOneCombo<SetorEntity> getCbSetor() {
		return cbSetor;
	}

	public void setCbSetor(ManyToOneCombo<SetorEntity> cbSetor) {
		this.cbSetor = cbSetor;
	}

	public ManyToOneCombo<ClienteEntity> getCbCliente() {
		return cbCliente;
	}

	public void setCbCliente(ManyToOneCombo<ClienteEntity> cbCliente) {
		this.cbCliente = cbCliente;
	}

	public OptionGroup getGrpTipo() {
		return grpTipo;
	}

	public void setGrpTipo(OptionGroup grpTipo) {
		this.grpTipo = grpTipo;
	}
	
	public enum ResponsavelEnum{
		FORNECEDOR("Fornecedor"),
		CLIENTE("Cliente");
		private String label;
		
		private ResponsavelEnum(String label) {
			this.label = label;
		}
		
		public String getLabel() {
			return label;
		}
		
		@Override
		public String toString() {
			return this.label;
		}
	}
}