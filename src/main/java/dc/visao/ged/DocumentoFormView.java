package dc.visao.ged;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.vaadin.easyuploads.FileBuffer;
import org.vaadin.easyuploads.UploadField;
import org.vaadin.easyuploads.UploadField.FieldType;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.FileResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Link;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.ged.DocumentoArquivo;
import dc.entidade.ged.TipoDocumento;
import dc.servicos.util.Util;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class DocumentoFormView extends CustomComponent {
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;
	@AutoGenerated
	private Image image;
	@AutoGenerated
	private Link linkDonwload;
	@AutoGenerated
	private UploadField upArquivo;
	@AutoGenerated
	private CheckBox ckbAssinado;
	@AutoGenerated
	private UploadField upAssinatura;
	@AutoGenerated
	private PasswordField pwSenhaCertificado;
	@AutoGenerated
	private CheckBox ckbPodeExcluir;
	@AutoGenerated
	private CheckBox ckbPodeAlterar;
	@AutoGenerated
	private PopupDateField dtFimVigencia;
	@AutoGenerated
	private TextField txtPalavraChave;
	@AutoGenerated
	private TextField txtDescricao;
	@AutoGenerated
	private TextField txtNome;
	private static final long serialVersionUID = 1L;
	private String nomeArquivo;
	private String nomeArquivoVisualizacao;
	private String nomeArquivoAssinatura;
	
	private ManyToOneCombo<TipoDocumento> cmbTipoDocumento;

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public TextField getTxtPalavraChave() {
		return txtPalavraChave;
	}

	public void setTxtPalavraChave(TextField txtPalavraChave) {
		this.txtPalavraChave = txtPalavraChave;
	}

	public PopupDateField getDtFimVigencia() {
		return dtFimVigencia;
	}

	public void setDtFimVigencia(PopupDateField dtFimVigencia) {
		this.dtFimVigencia = dtFimVigencia;
	}

	public DocumentoFormView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		configuraComponentes();
	}

	@SuppressWarnings("serial")
	private void configuraComponentes() {
		image.setSizeUndefined();
		upArquivo.setFieldType(FieldType.FILE);
		upArquivo.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				UploadField upload = (UploadField) event.getProperty();
				Upload up = (Upload) upload.getRootLayout().getComponent(0);
				nomeArquivo = ((FileBuffer) up.getReceiver()).getLastFileName();
				atualizaMiniatura((File) upload.getValue(), nomeArquivo);
			}
		});
		upArquivo.setFieldType(FieldType.FILE);
		upAssinatura.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				UploadField upload = (UploadField) event.getProperty();
				Upload up = (Upload) upload.getRootLayout().getComponent(0);
				nomeArquivoAssinatura = ((FileBuffer) up.getReceiver())
						.getLastFileName();
			}
		});
	}

	public void atualizaMiniatura(List<DocumentoArquivo> documentos) {
		for (DocumentoArquivo documento : documentos) {
			atualizaMiniatura(documento.getFile(), documento.getFile()
					.getName());
		}

	}

	private String getExtensao(String caminho) {
		if (caminho != null && !caminho.isEmpty()) {
			int indiceExtensao = caminho.lastIndexOf(".");
			if (indiceExtensao > -1) {
				return caminho.substring(indiceExtensao, caminho.length());
			}
		}
		return "";
	}

	@SuppressWarnings("deprecation")
	private void atualizaMiniatura(File arquivo, String nomeArquivo) {

		List<String> extensaoImagens = new ArrayList<String>();
		extensaoImagens.add(".png");
		extensaoImagens.add(".jpg");
		extensaoImagens.add(".jpge");

		if (extensaoImagens.contains(getExtensao(nomeArquivo))) {

			nomeArquivoVisualizacao = String.valueOf(new Date().getTime());
			try {
				File tmp = gravarArquivo(nomeArquivoVisualizacao,
						Util.lerBytesArquivo(arquivo));
				getImage().setSource(new FileResource(tmp));
				nomeArquivoVisualizacao = tmp.getAbsolutePath();
			} catch (Exception e) {
				// TODO: handle exception
			}		

			getImage().setSizeUndefined();
			getImage().markAsDirtyRecursive();
			getImage().requestRepaintAll();
			gridLayout.removeComponent(image);
			gridLayout.addComponent(image, 0, 7, 2, 7);
			
			getImage().getParent().requestRepaintAll();

			this.markAsDirtyRecursive();
			this.requestRepaintAll();
		}
	}

	public AbsoluteLayout getAbsoluteLayout_2() {
		return absoluteLayout_2;
	}

	public void setAbsoluteLayout_2(AbsoluteLayout absoluteLayout_2) {
		this.absoluteLayout_2 = absoluteLayout_2;
	}

	public TextField getTxtDescricao() {
		return txtDescricao;
	}

	public void setTxtDescricao(TextField txtDescricao) {
		this.txtDescricao = txtDescricao;
	}

	public TextField getTxtNome() {
		return txtNome;
	}

	public void setTxtNome(TextField txtNome) {
		this.txtNome = txtNome;
	}

	public CheckBox getCkbPodeAlterar() {
		return ckbPodeAlterar;
	}

	public void setCkbPodeAlterar(CheckBox ckbPodeAlterar) {
		this.ckbPodeAlterar = ckbPodeAlterar;
	}

	public CheckBox getCkbPodeExcluir() {
		return ckbPodeExcluir;
	}

	public void setCkbPodeExcluir(CheckBox ckbPodeExcluir) {
		this.ckbPodeExcluir = ckbPodeExcluir;
	}

	public CheckBox getCkbAssinado() {
		return ckbAssinado;
	}

	public void setCkbAssinado(CheckBox ckbAssinado) {
		this.ckbAssinado = ckbAssinado;
	}

	public PasswordField getPwSenhaCertificado() {
		return pwSenhaCertificado;
	}

	public void setPwSenhaCertificado(PasswordField pwSenhaCertificado) {
		this.pwSenhaCertificado = pwSenhaCertificado;
	}

	public UploadField getUpArquivo() {
		return upArquivo;
	}

	public void setUpArquivo(UploadField upArquivo) {
		this.upArquivo = upArquivo;
	}

	public UploadField getUpAssinatura() {
		return upAssinatura;
	}

	public void setUpAssinatura(UploadField upAssinatura) {
		this.upAssinatura = upAssinatura;
	}

	public String getNomeArquivo() {
		return nomeArquivo;
	}

	public void setNomeArquivo(String nomeArquivo) {
		this.nomeArquivo = nomeArquivo;
	}

	public String getNomeArquivoAssinatura() {
		return nomeArquivoAssinatura;
	}

	public void setNomeArquivoAssinatura(String nomeArquivoAssinatura) {
		this.nomeArquivoAssinatura = nomeArquivoAssinatura;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public Link getLinkDonwload() {
		return linkDonwload;
	}

	public void setLinkDonwload(Link linkDonwload) {
		this.linkDonwload = linkDonwload;
	}

	private File gravarArquivo(String caminho, byte[] dados) throws IOException {
		File arquivo = new File(caminho);
		FileOutputStream fos = null;
		try {
			if (!arquivo.exists()) {
				File pastaPai = arquivo.getParentFile();
				if (pastaPai != null) {
					pastaPai.mkdirs();
					arquivo.createNewFile();
				}
			}
			fos = new FileOutputStream(arquivo);
			fos.write(dados);
		} catch (IOException e) {
			throw e;
		} finally {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return arquivo;

	}

	public Image getImage() {
		return image;
	}

	public void setImage(Image image) {
		this.image = image;
	}

	public String getNomeArquivoVisualizacao() {
		return nomeArquivoVisualizacao;
	}

	public void setNomeArquivoVisualizacao(String nomeArquivoVisualizacao) {
		this.nomeArquivoVisualizacao = nomeArquivoVisualizacao;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setHeight("500px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// absoluteLayout_2
		gridLayout = buildGridLayout();
		mainLayout.addComponent(gridLayout);
		mainLayout.setExpandRatio(gridLayout, 1);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);

		// absoluteLayout_2
		gridLayout = buildGridLayout();
		verticalLayout_1.addComponent(gridLayout);

		return verticalLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout() {
		// common part: create layout
		gridLayout = new GridLayout(3, 10);
		gridLayout.setImmediate(false);
		gridLayout.setWidth("100%");
		gridLayout.setSpacing(true);

		// txtNome
		txtNome = ComponentUtil.buildTextField("Nome");
		gridLayout.addComponent(txtNome, 0, 0);

		// txtDescricao
		txtDescricao = ComponentUtil.buildTextField("Descrição");
		gridLayout.addComponent(txtDescricao, 0, 1);

		// txtPalavraChave
		txtPalavraChave = ComponentUtil.buildTextField("Palavra Chave");
		gridLayout.addComponent(txtPalavraChave, 0, 2);

		// cbmTipoDocumento
		cmbTipoDocumento = new ManyToOneCombo<>();
		cmbTipoDocumento.setCaption("Tipo Documento");
		
		gridLayout.addComponent(cmbTipoDocumento, 0, 3);

		// dtFimVigencia
		dtFimVigencia = ComponentUtil.buildPopupDateField("Data Vigência");
		gridLayout.addComponent(dtFimVigencia, 0, 4);

		// ckbPodeAlterar
		ckbPodeAlterar = ComponentUtil.buildCheckBox("Pode Alterar");
		gridLayout.addComponent(ckbPodeAlterar, 1, 4);

		// ckbPodeExcluir
		ckbPodeExcluir = ComponentUtil.buildCheckBox("Pode Excluir");
		gridLayout.addComponent(ckbPodeExcluir, 2, 4);

		// ckbAssinado
		ckbAssinado = ComponentUtil.buildCheckBox("Assinado");
		gridLayout.addComponent(ckbAssinado, 0, 5);

		// pwSenhaCertificado
		pwSenhaCertificado = new PasswordField();
		pwSenhaCertificado.setCaption("Senha Certificado");
		pwSenhaCertificado.setImmediate(false);
		pwSenhaCertificado.setWidth("-1px");
		pwSenhaCertificado.setHeight("-1px");
		gridLayout.addComponent(pwSenhaCertificado, 1, 5);

		// upAssinatura
		upAssinatura = new UploadField();
		upAssinatura.setCaption("Certificado");
		upAssinatura.setImmediate(false);
		upAssinatura.setWidth("100px");
		upAssinatura.setHeight("46px");
		gridLayout.addComponent(upAssinatura, 2, 5);

		// upArquivo
		upArquivo = new UploadField();
		upArquivo.setCaption("Documento");
		upArquivo.setImmediate(false);
		upArquivo.setWidth("100px");
		upArquivo.setHeight("46px");
		gridLayout.addComponent(upArquivo, 0, 6);

		// linkDonwload
		linkDonwload = new Link();
		linkDonwload.setCaption("Download");
		linkDonwload.setEnabled(false);
		linkDonwload.setImmediate(false);
		linkDonwload.setVisible(false);
		linkDonwload.setWidth("-1px");
		linkDonwload.setHeight("-1px");
		gridLayout.addComponent(linkDonwload, 1, 6);

		// image
		image = new Image();
		image.setImmediate(true);
		image.setWidth("100%");
		image.setHeight("100%");
		gridLayout.addComponent(image, 0, 7, 2, 7);
		
		return gridLayout;
	}

	public ManyToOneCombo<TipoDocumento> getCmbTipoDocumento() {
		return cmbTipoDocumento;
	}

	public void setCmbTipoDocumento(ManyToOneCombo<TipoDocumento> cbmTipoDocumento) {
		this.cmbTipoDocumento = cbmTipoDocumento;
	}

}
