package dc.visao.pessoal;

import java.util.ArrayList;
import java.util.List;

import org.vaadin.addons.maskedtextfield.MaskedTextField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.pessoal.PessoaFormController;
import dc.entidade.geral.PessoaContato;
import dc.entidade.geral.PessoaEndereco;
import dc.entidade.geral.UF;
import dc.entidade.pessoal.EstadoCivilEntity;
import dc.visao.framework.component.IntegerConverter;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.util.ComponentUtil;

public class PessoaFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	private final PessoaFormController formController;

	private TextField txtNome;

	private ComboBox cmbTipoPessoa;

	private TextField txtEmail;

	private TextField txtSite;

	private MaskedTextField txtCpf;
	private PopupDateField dtNascimento;

	private ComboBox cmbRaca, cmbTipoSanguineo;
	private ManyToOneCombo<EstadoCivilEntity> cmbEstadoCivil;

	private TextField txtNaturalidade, txtNacionalidade, txtNomePai, txtNomeMae;

	private TextField txtFantasia;

	private TextField txtCNPJ;

	private TextField txtInscricaoEstadual;

	private TextField txtInscricaoMunicipal;

	private PopupDateField dataConstituicao;

	private TextField txtSuframa;

	private ComboBox cmbTipoRegime, cmbCrt;

	private TextField txtNumeroRG, txtEmissorRG, txtOrgaoEmissor, txtCNH, txtTituloEleitor, txtTituloZona, txtTituloSecao;

	private PopupDateField dtCNHEmissao;

	private TextField txtNumeroReservista;

	private ComboBox cmbCategoriaReservista;
	private ComboBox cmbCategoriaCNH;

	private PopupDateField dataEmissaoRG;

	private OptionGroup grpSexo;

	private OptionGroup group;

	final Panel panelFisica = new Panel("Fisica");

	final Panel panelJuridica = new Panel("Juridica");

	@AutoGenerated
	private TabSheet subForms;

	private String FISICA = "F";
	private String JURIDICA = "J";

	private SubFormComponent<PessoaContato, Integer> contatosSubForm;
	private SubFormComponent<PessoaEndereco, Integer> enderecosSubForm;

	private GridLayout layoutFisica;

	private GridLayout layoutJuridica;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public PessoaFormView(PessoaFormController formController) {
		this.formController = formController;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		setWidth("100.0%");

		fields = buildFields();
		mainLayout.addComponent(fields);

		subForms = new TabSheet();

		buildAbaInformacoes();
		buildAbaContatos();
		buildAbaEnderecos();

		mainLayout.addComponent(subForms);
		mainLayout.setExpandRatio(subForms, 1);

		for (CategoriaReservista value : CategoriaReservista.values()) {
			cmbCategoriaReservista.addItem(value);
		}

		for (CNHCategoria value : CNHCategoria.values()) {
			cmbCategoriaCNH.addItem(value);
		}

		for (Raca value : Raca.values()) {
			cmbRaca.addItem(value);
		}

		for (TipoSangue value : TipoSangue.values()) {
			cmbTipoSanguineo.addItem(value);
		}

	}

	public void buildAbaInformacoes() {

		subForms = new TabSheet();
		subForms.setImmediate(true);
		subForms.setSizeFull();
		VerticalLayout verticalLayout = new VerticalLayout();

		verticalLayout.addComponent(montaLayoutFisica());
		verticalLayout.addComponent(montaLayoutJuridica());

		layoutFisica.setVisible(true);
		layoutJuridica.setVisible(false);

		subForms.addTab(verticalLayout, "Informações do Tipo de Pessoa", null);

	}

	public void buildAbaContatos() {

		subForms.addTab(buildContatosSubForm(), "Pessoa Contato", null);
	}

	// private TabSheet buildContatosSubForm() {
	// // common part: create layout
	// TabSheet sub = new TabSheet();
	// sub.setWidth("100.0%");
	// sub.setHeight("100.0%");
	// sub.setSizeFull();
	// sub.setImmediate(true);
	// sub.addTab(null, "Contatos", null);
	// return sub;
	// }

	public void buildAbaEnderecos() {

		subForms.addTab(buildEnderecosSubForm(), "Endereços", null);
	}

	public GridLayout montaLayoutFisica() {
		layoutFisica = new GridLayout(6, 7);
		layoutFisica.setImmediate(false);
		layoutFisica.setWidth("100.0%");
		layoutFisica.setHeight("-1px");
		layoutFisica.setMargin(true);
		layoutFisica.setSpacing(true);

		txtCpf = ComponentUtil.buildMaskedTextField("CPF", "###.###.###-##");
		dtNascimento = ComponentUtil.buildPopupDateField("Data Nascimento");
		dtNascimento.setWidth("112px");
		cmbRaca = ComponentUtil.buildComboBox("Raça");
		cmbEstadoCivil = new ManyToOneCombo<>();
		cmbEstadoCivil.setCaption("Estado Civil");
		cmbTipoSanguineo = ComponentUtil.buildComboBox("Tipo Sanguineo");

		txtNaturalidade = ComponentUtil.buildTextField("Naturalidade");
		txtNacionalidade = ComponentUtil.buildTextField("Nacionalidade");

		txtNomePai = ComponentUtil.buildTextField("Nome do Pai");
		txtNomeMae = ComponentUtil.buildTextField("Nome da Mãe");

		layoutFisica.addComponent(txtCpf, 0, 0);
		layoutFisica.addComponent(dtNascimento, 1, 0);
		layoutFisica.addComponent(cmbEstadoCivil, 2, 0);
		layoutFisica.addComponent(cmbRaca, 3, 0);
		layoutFisica.addComponent(cmbTipoSanguineo, 4, 0);

		layoutFisica.addComponent(txtNaturalidade, 0, 1, 1, 1);
		layoutFisica.addComponent(txtNacionalidade, 2, 1, 3, 1);

		layoutFisica.addComponent(txtNomePai, 0, 2, 1, 2);
		layoutFisica.addComponent(txtNomeMae, 2, 2, 3, 2);

		GridLayout layoutRG = buildContentRG();
		layoutFisica.addComponent(layoutRG, 0, 3, 1, 3);

		GridLayout layoutReservista = buildContentReservista();
		layoutFisica.addComponent(layoutReservista, 2, 3, 3, 3);

		grpSexo = new OptionGroup("Sexo");
		grpSexo.addItem("Feminino");
		grpSexo.addItem("Masculino");
		layoutFisica.addComponent(grpSexo, 4, 3);

		GridLayout layoutCNH = buildContentCNH();
		layoutFisica.addComponent(layoutCNH, 0, 4, 1, 4);

		GridLayout layoutTitulo = buildContentTitulo();
		layoutFisica.addComponent(layoutTitulo, 2, 4, 3, 4);

		return layoutFisica;
	}

	private GridLayout buildContentTitulo() {
		GridLayout layoutTitulo = new GridLayout(3, 2);
		layoutTitulo.setImmediate(false);
		layoutTitulo.setWidth("100.0%");
		layoutTitulo.setHeight("-1px");
		layoutTitulo.setMargin(false);
		layoutTitulo.setSpacing(true);

		txtTituloEleitor = ComponentUtil.buildTextField("Número");
		txtTituloZona = ComponentUtil.buildNumericField("Zona");
		txtTituloSecao = ComponentUtil.buildNumericField("Seção");
		txtTituloZona.setConverter(new IntegerConverter());
		txtTituloZona.setMaxLength(10);
		txtTituloSecao.setConverter(new IntegerConverter());
		txtTituloSecao.setMaxLength(10);

		Label lblTitulo = new Label("Título Eleitoral");
		layoutTitulo.addComponent(lblTitulo, 0, 0, 1, 0);
		layoutTitulo.addComponent(txtTituloEleitor, 0, 1);
		layoutTitulo.addComponent(txtTituloZona, 1, 1);
		layoutTitulo.addComponent(txtTituloSecao, 2, 1);
		return layoutTitulo;
	}

	private GridLayout buildContentCNH() {
		GridLayout layoutCNH = new GridLayout(3, 2);
		layoutCNH.setImmediate(false);
		layoutCNH.setWidth("100.0%");
		layoutCNH.setHeight("-1px");
		layoutCNH.setMargin(false);
		layoutCNH.setSpacing(true);

		txtCNH = ComponentUtil.buildTextField("Número");
		dtCNHEmissao = ComponentUtil.buildPopupDateField("Emissão");
		cmbCategoriaCNH = ComponentUtil.buildComboBox("Categoria");
		Label lblCNH = new Label("CNH");
		layoutCNH.addComponent(lblCNH, 0, 0);
		layoutCNH.addComponent(txtCNH, 0, 1);
		layoutCNH.addComponent(cmbCategoriaCNH, 1, 1);
		layoutCNH.addComponent(dtCNHEmissao, 2, 1);
		return layoutCNH;
	}

	private GridLayout buildContentReservista() {
		GridLayout layoutReservista = new GridLayout(2, 2);
		layoutReservista.setImmediate(false);
		layoutReservista.setWidth("100.0%");
		layoutReservista.setHeight("-1px");
		layoutReservista.setMargin(false);
		layoutReservista.setSpacing(true);

		txtNumeroReservista = ComponentUtil.buildTextField("Número");
		cmbCategoriaReservista = ComponentUtil.buildComboBox("Categoria");
		Label lblReservista = new Label("Reservista");
		layoutReservista.addComponent(lblReservista, 0, 0);
		layoutReservista.addComponent(txtNumeroReservista, 0, 1);
		layoutReservista.addComponent(cmbCategoriaReservista, 1, 1);
		return layoutReservista;
	}

	private GridLayout buildContentRG() {
		GridLayout layoutRG = new GridLayout(3, 2);
		layoutRG.setImmediate(false);
		layoutRG.setWidth("100.0%");
		layoutRG.setHeight("-1px");
		layoutRG.setMargin(false);
		layoutRG.setSpacing(true);

		txtNumeroRG = ComponentUtil.buildTextField("Número");
		dataEmissaoRG = ComponentUtil.buildPopupDateField("Emissão");
		txtOrgaoEmissor = ComponentUtil.buildTextField("Órgão Emissor");
		Label lblRg = new Label("RG");
		layoutRG.addComponent(lblRg, 0, 0);
		layoutRG.addComponent(txtNumeroRG, 0, 1);
		layoutRG.addComponent(txtOrgaoEmissor, 1, 1);
		layoutRG.addComponent(dataEmissaoRG, 2, 1);
		return layoutRG;
	}

	public GridLayout montaLayoutJuridica() {
		layoutJuridica = new GridLayout(8, 7);
		layoutJuridica.setImmediate(false);
		layoutJuridica.setWidth("100.0%");
		layoutJuridica.setHeight("-1px");
		layoutJuridica.setMargin(true);
		layoutJuridica.setSpacing(true);

		txtFantasia = ComponentUtil.buildTextField("Nome de Fantasia");
		layoutJuridica.addComponent(txtFantasia, 0, 0, 5, 0);

		txtCNPJ = ComponentUtil.buildTextField("CNPJ");
		txtInscricaoEstadual = ComponentUtil.buildTextField("Inscrição Estadual");
		txtInscricaoMunicipal = ComponentUtil.buildTextField("Inscrição Municipal");
		dataConstituicao = ComponentUtil.buildPopupDateField("Data da Constituição");
		txtSuframa = ComponentUtil.buildTextField("Suframa");

		layoutJuridica.addComponent(txtCNPJ, 0, 1);
		layoutJuridica.addComponent(txtInscricaoEstadual, 1, 1, 2, 1);
		layoutJuridica.addComponent(txtInscricaoMunicipal, 3, 1);
		layoutJuridica.addComponent(dataConstituicao, 4, 1);
		layoutJuridica.addComponent(txtSuframa, 5, 1);

		cmbTipoRegime = ComponentUtil.buildComboBox("Tipo de Regime");
		cmbCrt = ComponentUtil.buildComboBox("CRT");

		layoutJuridica.addComponent(cmbTipoRegime, 0, 2, 2, 2);
		layoutJuridica.addComponent(cmbCrt, 3, 2, 4, 2);

		for (TipoRegime value : TipoRegime.values()) {
			cmbTipoRegime.addItem(value);
		}

		for (CRT value : CRT.values()) {
			cmbCrt.addItem(value);
		}

		return layoutJuridica;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 3);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		txtNome = ComponentUtil.buildTextField("Nome");
		txtNome.setRequired(true);
		fields.addComponent(txtNome, 0, 0, 2, 0);

		cmbTipoPessoa = new ComboBox("Tipo Pessoa", montaLista());
		cmbTipoPessoa.setNullSelectionAllowed(false);
		cmbTipoPessoa.setValue(cmbTipoPessoa.getItemIds().iterator().next());
		cmbTipoPessoa.setItemCaptionPropertyId("label");
		cmbTipoPessoa.setRequired(true);
		cmbTipoPessoa.setImmediate(true);
		cmbTipoPessoa.addValueChangeListener(new Property.ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				TipoPessoa p = (TipoPessoa) event.getProperty().getValue();

				if (p.getCodigo().equals(FISICA)) {
					layoutFisica.setVisible(true);
					layoutJuridica.setVisible(false);
				}
				if (p.getCodigo().equals(JURIDICA)) {
					layoutFisica.setVisible(false);
					layoutJuridica.setVisible(true);
				}
			}
		});

		fields.addComponent(cmbTipoPessoa, 3, 0);

		txtEmail = ComponentUtil.buildTextField("Email");
		txtEmail.setHeight("30");
		fields.addComponent(txtEmail, 0, 1, 2, 1);

		txtSite = ComponentUtil.buildTextField("Site");
		txtSite.setHeight("30");
		fields.addComponent(txtSite, 3, 1);

		group = new OptionGroup("");
		group.setMultiSelect(true);
		group.addItem("Cliente");
		group.addItem("Fornecedor");
		group.addItem("Colaborador");
		group.addItem("Transportadora");
		group.setStyleName("v-select-optiongroup-horizontal");
		fields.addComponent(group, 0, 2, 5, 2);

		return fields;

	}

	public enum TIPO_PESSOA {

		FISICA("Fisica", "1"), JURIDICA("Juridica", "2");

		private TIPO_PESSOA(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TIPO_PESSOA getTipoOperacao(String codigo) {
			if (codigo.equals("0")) {
				return FISICA;
			}
			if (codigo.equals("1")) {
				return JURIDICA;
			}
			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public void carregarTipoPessoa() {
		this.cmbTipoPessoa.removeAllItems();
		this.cmbTipoPessoa.addItem(TIPO_PESSOA.FISICA);
		this.cmbTipoPessoa.addItem(TIPO_PESSOA.JURIDICA);

	}

	public BeanItemContainer<TipoPessoa> montaLista() {
		List<TipoPessoa> lista = new ArrayList<TipoPessoa>();
		lista.add(TipoPessoa.PESSOA_FISICA);
		lista.add(TipoPessoa.PESSOA_JURIDICA);

		BeanItemContainer<TipoPessoa> objects = new BeanItemContainer(TipoPessoa.class, lista);
		return objects;
	}

	public ComboBox getCmbTipoPessoa() {
		return cmbTipoPessoa;
	}

	public void setCmbTipoPessoa(ComboBox cmbTipoPessoa) {
		this.cmbTipoPessoa = cmbTipoPessoa;
	}

	public TextField getTxtNome() {
		return txtNome;
	}

	public void setTxtNome(TextField txtNome) {
		this.txtNome = txtNome;
	}

	public TextField getTxtEmail() {
		return txtEmail;
	}

	public void setTxtEmail(TextField txtEmail) {
		this.txtEmail = txtEmail;
	}

	public TextField getTxtSite() {
		return txtSite;
	}

	public void setTxtSite(TextField txtSite) {
		this.txtSite = txtSite;
	}

	private SubFormComponent buildContatosSubForm() {
		// common part: create layout

		contatosSubForm = new SubFormComponent<PessoaContato, Integer>(PessoaContato.class, new String[] { "nome", "email", "foneComercial", "foneResidencial",
				"foneCelular" }, new String[] { "Nome", "Email", "Fone Comercial", "Fone Residencial", "Fone Celular" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("nome".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField("Nome");
							return textField;
						}

						if ("email".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField("Email");
							return textField;
						}

						if ("foneComercial".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField("Fone Comercial");
							return textField;
						}

						if ("foneResidencial".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField("Fone Residencial");
							return textField;
						}

						if ("foneCelular".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField("Fone Celular");
							return textField;
						}
						return null;
					}
				};
			}

			protected PessoaContato getNovo() {
				PessoaContato detalhe = formController.novoContato();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<PessoaContato> items) {
				// TODO Auto-generated method stub
				return true;
			}

		};

		return contatosSubForm;
	}

	private SubFormComponent buildEnderecosSubForm() {
		// common part: create layout

		String[] atributos = new String[] { "logradouro", "numero", "complemento", "bairro", "cidade", "cep", "municipioIbge", "uf", "fone", "fax",
				"principal", "entrega", "cobranca", "correspondencia" };

		String[] headers = new String[] { "Logradouro", "Número", "Complemento", "Bairro", "Cidade", "CEP", "Município Ibge", "UF", "Fone", "Fax",
				"Principal", "Entrega", "Cobrança", "Correspondência" };

		enderecosSubForm = new SubFormComponent<PessoaEndereco, Integer>(PessoaEndereco.class, atributos, headers) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("numero".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumericField(null);
							textField.setMaxLength(6);
							textField.setConverter(new IntegerConverter());
							return textField;
						}
						if ("municipioIbge".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumericField(null);
							textField.setConverter(new IntegerConverter());
							textField.setMaxLength(10);
							return textField;
						}
						if ("principal".equals(propertyId) || "entrega".equals(propertyId) || "cobranca".equals(propertyId)
								|| "correspondencia".equals(propertyId)) {
							CheckBox check = ComponentUtil.buildCheckBox(null);

							return check;
						}

						else if ("cep".equals(propertyId)) {
							MaskedTextField textField = ComponentUtil.buildMaskedTextField(null, "#####-###");
							textField.setMaskClientOnly(true);
							return textField;
						} else if ("uf".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil.buildComboBox(null);

							List<UF> ufs = formController.getUfs();
							for (UF uf : ufs) {
								comboBox.addItem(uf);
							}

							return comboBox;
						}

						else {
							return ComponentUtil.buildTextField(null);
						}

					}
				};
			}

			protected PessoaEndereco getNovo() {
				PessoaEndereco endereco = formController.novoEndereco();
				return endereco;
			}

			@Override
			public boolean validateItems(List<PessoaEndereco> items) {
				// TODO Auto-generated method stub
				return true;
			}

		};

		return enderecosSubForm;
	}

	public MaskedTextField getTxtCpf() {
		return txtCpf;
	}

	public void setTxtCpf(MaskedTextField txtCpf) {
		this.txtCpf = txtCpf;
	}

	public ComboBox getCmbRaca() {
		return cmbRaca;
	}

	public void setCmbRaca(ComboBox cmbRaca) {
		this.cmbRaca = cmbRaca;
	}

	public ComboBox getCmbTipoSanguineo() {
		return cmbTipoSanguineo;
	}

	public void setCmbTipoSanguineo(ComboBox cmbTipoSanguineo) {
		this.cmbTipoSanguineo = cmbTipoSanguineo;
	}

	public TextField getTxtNaturalidade() {
		return txtNaturalidade;
	}

	public void setTxtNaturalidade(TextField txtNaturalidade) {
		this.txtNaturalidade = txtNaturalidade;
	}

	public TextField getTxtNacionalidade() {
		return txtNacionalidade;
	}

	public void setTxtNacionalidade(TextField txtNacionalidade) {
		this.txtNacionalidade = txtNacionalidade;
	}

	public TextField getTxtNomePai() {
		return txtNomePai;
	}

	public void setTxtNomePai(TextField txtNomePai) {
		this.txtNomePai = txtNomePai;
	}

	public TextField getTxtNomeMae() {
		return txtNomeMae;
	}

	public void setTxtNomeMae(TextField txtNomeMae) {
		this.txtNomeMae = txtNomeMae;
	}

	public TextField getTxtFantasia() {
		return txtFantasia;
	}

	public void setTxtFantasia(TextField txtFantasia) {
		this.txtFantasia = txtFantasia;
	}

	public TextField getTxtCNPJ() {
		return txtCNPJ;
	}

	public void setTxtCNPJ(TextField txtCNPJ) {
		this.txtCNPJ = txtCNPJ;
	}

	public TextField getTxtInscricaoEstadual() {
		return txtInscricaoEstadual;
	}

	public void setTxtInscricaoEstadual(TextField txtInscricaoEstadual) {
		this.txtInscricaoEstadual = txtInscricaoEstadual;
	}

	public TextField getTxtInscricaoMunicipal() {
		return txtInscricaoMunicipal;
	}

	public void setTxtInscricaoMunicipal(TextField txtInscricaoMunicipal) {
		this.txtInscricaoMunicipal = txtInscricaoMunicipal;
	}

	public PopupDateField getDataConstituicao() {
		return dataConstituicao;
	}

	public void setDataConstituicao(PopupDateField dataConstituicao) {
		this.dataConstituicao = dataConstituicao;
	}

	public TextField getTxtSuframa() {
		return txtSuframa;
	}

	public void setTxtSuframa(TextField txtSuframa) {
		this.txtSuframa = txtSuframa;
	}

	public ComboBox getCmbTipoRegime() {
		return cmbTipoRegime;
	}

	public void setCmbTipoRegime(ComboBox cmbTipoRegime) {
		this.cmbTipoRegime = cmbTipoRegime;
	}

	public ComboBox getCmbCrt() {
		return cmbCrt;
	}

	public void setCmbCrt(ComboBox cmbCrt) {
		this.cmbCrt = cmbCrt;
	}

	public TextField getTxtNumeroRG() {
		return txtNumeroRG;
	}

	public void setTxtNumeroRG(TextField txtNumeroRG) {
		this.txtNumeroRG = txtNumeroRG;
	}

	public TextField getTxtEmissorRG() {
		return txtEmissorRG;
	}

	public void setTxtEmissorRG(TextField txtEmissorRG) {
		this.txtEmissorRG = txtEmissorRG;
	}

	public TextField getTxtOrgaoEmissor() {
		return txtOrgaoEmissor;
	}

	public void setTxtOrgaoEmissor(TextField txtOrgaoEmissor) {
		this.txtOrgaoEmissor = txtOrgaoEmissor;
	}

	public TextField getTxtNumeroReservista() {
		return txtNumeroReservista;
	}

	public void setTxtNumeroReservista(TextField txtNumeroReservista) {
		this.txtNumeroReservista = txtNumeroReservista;
	}

	public ComboBox getCmbCategoriaReservista() {
		return cmbCategoriaReservista;
	}

	public void setCmbCategoriaReservista(ComboBox cmbCategoriaReservista) {
		this.cmbCategoriaReservista = cmbCategoriaReservista;
	}

	public PopupDateField getDataEmissaoRG() {
		return dataEmissaoRG;
	}

	public void setDataEmissaoRG(PopupDateField dataEmissaoRG) {
		this.dataEmissaoRG = dataEmissaoRG;
	}

	public OptionGroup getGroup() {
		return group;
	}

	public void setGroup(OptionGroup group) {
		this.group = group;
	}

	public PopupDateField getDtNascimento() {
		return dtNascimento;
	}

	public void setDtNascimento(PopupDateField dtNascimento) {
		this.dtNascimento = dtNascimento;
	}

	public TextField getTxtCNH() {
		return txtCNH;
	}

	public void setTxtCNH(TextField txtCNH) {
		this.txtCNH = txtCNH;
	}

	public TextField getTxtTituloEleitor() {
		return txtTituloEleitor;
	}

	public void setTxtTituloEleitor(TextField txtTituloEleitor) {
		this.txtTituloEleitor = txtTituloEleitor;
	}

	public TextField getTxtTituloZona() {
		return txtTituloZona;
	}

	public void setTxtTituloZona(TextField txtTituloZona) {
		this.txtTituloZona = txtTituloZona;
	}

	public TextField getTxtTituloSecao() {
		return txtTituloSecao;
	}

	public void setTxtTituloSecao(TextField txtTituloSecao) {
		this.txtTituloSecao = txtTituloSecao;
	}

	public PopupDateField getDtCNHEmissao() {
		return dtCNHEmissao;
	}

	public void setDtCNHEmissao(PopupDateField dtCNHEmissao) {
		this.dtCNHEmissao = dtCNHEmissao;
	}

	public ComboBox getCmbCategoriaCNH() {
		return cmbCategoriaCNH;
	}

	public void setCmbCategoriaCNH(ComboBox cmbCategoriaCNH) {
		this.cmbCategoriaCNH = cmbCategoriaCNH;
	}

	public OptionGroup getGrpSexo() {
		return grpSexo;
	}

	public void setGrpSexo(OptionGroup grpSexo) {
		this.grpSexo = grpSexo;
	}

	public enum CNHCategoria {

		A("A", "A"), B("B", "B"), C("C", "C"), D("D", "D"), E("E", "E"), ;

		private CNHCategoria(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static CNHCategoria getCNHCategoria(String codigo) {
			for (CNHCategoria e : CNHCategoria.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum Raca {

		BRANCO("B - Branco", "B"), NEGRO("N - Negro", "N"), PARDO("P - Pardo", "P"), INDIO("I - Indio", "I");

		private Raca(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static Raca getRaca(String codigo) {
			for (Raca e : Raca.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum TipoSangue {

		A_POSITIVO("A+", "A+"), A_NEGATIVO("A-", "A-"), B_POSITIVO("B+", "B+"), B_NEGATIVO("B-", "B-"), O_POSITIVO("O+", "O+"), O_NEGATIVO("O-", "O-"), AB_POSITIVO(
				"AB+", "AB+"), AB_NEGATIVO("AB-", "AB-");

		private TipoSangue(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TipoSangue getTipoSangue(String codigo) {
			if (codigo == null)
				return null;

			codigo = codigo.trim();

			for (TipoSangue e : TipoSangue.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum CategoriaReservista {

		UM("1", "1"), DOIS("2", "2"), TRES("3", "3");

		private CategoriaReservista(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static CategoriaReservista getCategoriaReservista(String codigo) {
			for (CategoriaReservista e : CategoriaReservista.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum TipoRegime {

		LUCRO_REAL("1 - Lucro Real", "1"), SIMPLES_PRESUMIDO("2 - Simples Presumido", "2"), SIMPLES_NACIONAL("3 - Nacional", "3");

		private TipoRegime(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TipoRegime getTipoRegime(String codigo) {
			for (TipoRegime e : TipoRegime.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public enum CRT {

		SIMPLES_NACIONAL("1 - Simples Nacional", "1"), SIMPLES_NACIONAL_EXCESSO("2 - Simples Nacional - execesso de sublimite receita bruta", "2"), REGIME_NORMAL(
				"3 - Regime normal", "3");

		private CRT(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static CRT getTipoRegime(String codigo) {
			for (CRT e : CRT.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public ManyToOneCombo<EstadoCivilEntity> getCmbEstadoCivil() {
		return cmbEstadoCivil;
	}

	public void setCmbEstadoCivil(ManyToOneCombo<EstadoCivilEntity> cmbEstadoCivil) {
		this.cmbEstadoCivil = cmbEstadoCivil;
	}

	public SubFormComponent<PessoaContato, Integer> getContatosSubForm() {
		return contatosSubForm;
	}

	public void setContatosSubForm(SubFormComponent<PessoaContato, Integer> contatosSubForm) {
		this.contatosSubForm = contatosSubForm;
	}

	public SubFormComponent<PessoaEndereco, Integer> getEnderecosSubForm() {
		return enderecosSubForm;
	}

	public void setEnderecosSubForm(SubFormComponent<PessoaEndereco, Integer> enderecosSubForm) {
		this.enderecosSubForm = enderecosSubForm;
	}

}