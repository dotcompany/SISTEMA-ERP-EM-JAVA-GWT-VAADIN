package dc.visao.pessoal;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.pessoal.PessoaFormController;
import dc.visao.framework.util.ComponentUtil;
import dc.visao.suprimentos.NotaFiscalFormView.TIPO_OPERACAO;

public class PessoaFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	PessoaFormController formController;
	
	TextField txtNome;
	
	ComboBox cmbTipoPessoa;
	
	TextField txtEmail;
	
	TextField txtSite;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PessoaFormView(PessoaFormController formController) {
		this.formController = formController;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		fields = buildFields();
		mainLayout.addComponent(fields);
		
	}
	
	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 2);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		
		txtNome = ComponentUtil.buildTextField("Nome");
		txtNome.setRequired(true);
		fields.addComponent(txtNome,0,0,2,0);
	
		
		cmbTipoPessoa = ComponentUtil.buildComboBox("Tipo Pessoa");
		cmbTipoPessoa.setRequired(true);
		carregarTipoPessoa();
		
		
		
		
		fields.addComponent(cmbTipoPessoa,3,0);
		
		txtEmail = ComponentUtil.buildTextField("Email");
		fields.addComponent(txtEmail,0,1,2,1);
		
		txtSite = ComponentUtil.buildTextField("Site");
		fields.addComponent(txtSite,3,1);
		
		
		return fields;
		
	}
	
	public enum TIPO_PESSOA {

		FISICA("Fisica", "1"), JURIDICA("Juridica", "2");

		private TIPO_PESSOA(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TIPO_PESSOA getTipoOperacao(String codigo) {
			if (codigo.equals("0")) {
				return FISICA;
			}
			if (codigo.equals("1")) {
				return JURIDICA;
			} 



			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public void carregarTipoPessoa() {
		this.cmbTipoPessoa.removeAllItems();
		this.cmbTipoPessoa.addItem(TIPO_PESSOA.FISICA);
		this.cmbTipoPessoa.addItem(TIPO_PESSOA.JURIDICA);

	}


}
