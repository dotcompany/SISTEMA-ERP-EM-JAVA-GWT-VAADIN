package dc.visao.tributario;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.tributario.ConfiguracaoTributariaFormController;
import dc.controller.tributario.GrupoTributarioFormController;
import dc.entidade.geral.UF;
import dc.entidade.suprimentos.ContagemEstoqueDetalhe;
import dc.entidade.tabelas.CodigoApuracaoEfd;
import dc.entidade.tabelas.CstCofins;
import dc.entidade.tabelas.CstIpi;
import dc.entidade.tabelas.CstPis;
import dc.entidade.tabelas.TipoReceitaDipi;
import dc.entidade.tributario.ConfiguracaoTributaria;
import dc.entidade.tributario.GrupoTributario;
import dc.entidade.tributario.ICMSConfiguracaoTributaria;
import dc.entidade.tributario.ICMSCustomizadoDetalhe;
import dc.entidade.tributario.OperacaoFiscal;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

@SuppressWarnings("serial")
public class ConfiguracaoTributariaFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	public ConfiguracaoTributariaFormController controller;

	ConfiguracaoTributaria currentBean;

	private ComboBox cmbGrupoTributario;

	private ComboBox cmbOperacaoFiscal;

	@AutoGenerated
	private TabSheet subForms;

	TextField txtCstPis,txtDescricaoCstPis;

	TextField txtEfdPis,txtDescricaoEfdPis;

	ComboBox cmbModalidadeBcPis;

	TextField txtPorcentoBcPis,txtAliquotaBcPis,txtAliquotaUnidadePis,txtValorPrecoMaximoPis,txtValorPautaFiscalPis;

	TextField txtCstCofins,txtDescricaoCstCofins;

	TextField txtEfdCofins,txtDescricaoEfdCofins;

	ComboBox cmbModalidadeBcCofins;

	TextField txtPorcentoBcCofins,txtAliquotaBcCofins,txtAliquotaUnidadeCofins,txtValorPrecoMaximoCofins,txtValorPautaFiscalCofins;

	TextField txtCstIPI,txtDescricaoCstIPI;

	TextField txtDipi,txtDescricaoDipi;
	ComboBox cmbModalidadeBcIPI;

	TextField txtPorcentoBcIPI,txtAliquotaBcIPI,txtAliquotaUnidadeIPI,txtValorPrecoMaximoIPI,txtValorPautaFiscalIPI;

	
	private SubFormComponent<ICMSConfiguracaoTributaria, Integer> icmsSubForm;

	public ConfiguracaoTributariaFormView(ConfiguracaoTributariaFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 3);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		// calDataRequisicao

		cmbGrupoTributario = ComponentUtil.buildComboBox("Grupo Tributário");
		cmbOperacaoFiscal = ComponentUtil.buildComboBox("Operação Fiscal");

		montaGrupoTributario();
		montaOperacaoFiscal();
		fields.addComponent(cmbGrupoTributario,0,0,1,0);
		fields.addComponent(cmbOperacaoFiscal,2,0,3,0);
		return fields;
	}

	public void montaGrupoTributario(){
		try{
			for(GrupoTributario g : controller.trazerGrupos()){
				cmbGrupoTributario.addItem(g);
			}
		}catch(Exception e){
			e.printStackTrace();
		}

	}

	public void montaOperacaoFiscal(){
		try{
			for(OperacaoFiscal op : controller.trazerOperacoes()){
				cmbOperacaoFiscal.addItem(op);
			}
		}catch(Exception e){
			e.printStackTrace();
		}

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("70.0%");

		// fields
		fields = buildFields();
		mainLayout.addComponent(fields);

		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
		buildAbaICMS();
		buildAbaPIS();
		buildAbaCofins();
		buildAbaIPI();
		mainLayout.addComponent(subForms);
		mainLayout.setExpandRatio(subForms, 2);

		return mainLayout;
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public ComboBox getCmbGrupoTributario() {
		return cmbGrupoTributario;
	}

	public void setCmbGrupoTributario(ComboBox cmbGrupoTributario) {
		this.cmbGrupoTributario = cmbGrupoTributario;
	}

	public ComboBox getCmbOperacaoFiscal() {
		return cmbOperacaoFiscal;
	}

	public void setCmbOperacaoFiscal(ComboBox cmbOperacaoFiscal) {
		this.cmbOperacaoFiscal = cmbOperacaoFiscal;
	}



	public TextField getTxtCstPis() {
		return txtCstPis;
	}

	public void setTxtCstPis(TextField txtCstPis) {
		this.txtCstPis = txtCstPis;
	}



	public void buildAbaICMS(){

		GridLayout layout = new GridLayout(1,1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(buildIcmsSubForm());
		subForms.addTab(layout, "ICMS", null);
	}



	
	public void buildAbaPIS(){

		GridLayout layout = new GridLayout(14,3);
		layout.setImmediate(false);
		layout.setMargin(true);
		layout.setSpacing(true);

		txtCstPis = ComponentUtil.buildTextField("CST");
		txtCstPis.setMaxLength(2);
		txtCstPis.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					CstPis cst = controller.consultarCstPis(codigo);
					if(cst!=null)
						txtDescricaoCstPis.setValue(cst.getDescricao());
				}

			}
		});

		layout.addComponent(txtCstPis,0,0);
		txtDescricaoCstPis = ComponentUtil.buildTextField("");
		txtDescricaoCstPis.setWidth("700");
		layout.addComponent(txtDescricaoCstPis,1,0,8,0);

		txtEfdPis = ComponentUtil.buildTextField("Código Apuração EFD");
		txtEfdPis.setMaxLength(2);
		txtEfdPis.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					CodigoApuracaoEfd efd = controller.consultarEfd(codigo);
					if(efd!=null)
						txtDescricaoEfdPis.setValue(efd.getDescricao());
				}

			}
		});

		layout.addComponent(txtEfdPis,0,1);
		txtDescricaoEfdPis = ComponentUtil.buildTextField("");
		txtDescricaoEfdPis.setWidth("700");
		layout.addComponent(txtDescricaoEfdPis,1,1,8,1);

		cmbModalidadeBcPis = ComponentUtil.buildComboBox("Modalidade Base de Cálculo");
		layout.addComponent(cmbModalidadeBcPis,0,2,1,2);

		txtPorcentoBcPis = ComponentUtil.buildCurrencyField("Porcento BC");
		layout.addComponent(txtPorcentoBcPis,2,2,3,2);

		txtAliquotaBcPis = ComponentUtil.buildCurrencyField("Aliquota Porcento");
		layout.addComponent(txtAliquotaBcPis,4,2,5,2);

		txtAliquotaUnidadePis = ComponentUtil.buildCurrencyField("Aliquota Unidade");
		layout.addComponent(txtAliquotaUnidadePis,6,2,7,2);

		txtValorPrecoMaximoPis = ComponentUtil.buildCurrencyField("Preço Máximo");
		layout.addComponent(txtValorPrecoMaximoPis,8,2,10,2);

		txtValorPautaFiscalPis = ComponentUtil.buildCurrencyField("Valor Pauta Fiscal");
		layout.addComponent(txtValorPautaFiscalPis,11,2,13,2);

		subForms.addTab(layout, "PIS", null);
	}
	
	public void buildAbaCofins(){

		GridLayout layout = new GridLayout(14,3);
		layout.setImmediate(false);
		layout.setMargin(true);
		layout.setSpacing(true);

		txtCstCofins = ComponentUtil.buildTextField("CST");
		txtCstCofins.setMaxLength(2);
		txtCstCofins.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					CstCofins cst = controller.consultarCstCofins(codigo);
					if(cst!=null)
						txtDescricaoCstCofins.setValue(cst.getDescricao());
				}

			}
		});

		layout.addComponent(txtCstCofins,0,0);
		txtDescricaoCstCofins = ComponentUtil.buildTextField("");
		txtDescricaoCstCofins.setWidth("700");
		layout.addComponent(txtDescricaoCstCofins,1,0,8,0);

		txtEfdCofins = ComponentUtil.buildTextField("Código Apuração EFD");
		txtEfdCofins.setMaxLength(2);
		txtEfdCofins.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					CodigoApuracaoEfd efd = controller.consultarEfd(codigo);
					if(efd!=null)
						txtDescricaoEfdCofins.setValue(efd.getDescricao());
				}

			}
		});

		layout.addComponent(txtEfdCofins,0,1);
		txtDescricaoEfdCofins = ComponentUtil.buildTextField("");
		txtDescricaoEfdCofins.setWidth("700");
		layout.addComponent(txtDescricaoEfdCofins,1,1,8,1);

		cmbModalidadeBcCofins = ComponentUtil.buildComboBox("Modalidade Base de Cálculo");
		layout.addComponent(cmbModalidadeBcCofins,0,2,1,2);

		txtPorcentoBcCofins = ComponentUtil.buildCurrencyField("Porcento BC");
		layout.addComponent(txtPorcentoBcCofins,2,2,3,2);

		txtAliquotaBcCofins = ComponentUtil.buildCurrencyField("Aliquota Porcento");
		layout.addComponent(txtAliquotaBcCofins,4,2,5,2);

		txtAliquotaUnidadeCofins = ComponentUtil.buildCurrencyField("Aliquota Unidade");
		layout.addComponent(txtAliquotaUnidadeCofins,6,2,7,2);

		txtValorPrecoMaximoCofins = ComponentUtil.buildCurrencyField("Preço Máximo");
		layout.addComponent(txtValorPrecoMaximoCofins,8,2,10,2);

		txtValorPautaFiscalCofins = ComponentUtil.buildCurrencyField("Valor Pauta Fiscal");
		layout.addComponent(txtValorPautaFiscalCofins,11,2,13,2);

		subForms.addTab(layout, "COFINS", null);
	}
	
	public void buildAbaIPI(){

		GridLayout layout = new GridLayout(14,3);
		layout.setImmediate(false);
		layout.setMargin(true);
		layout.setSpacing(true);

	 txtCstIPI = ComponentUtil.buildTextField("CST");
		txtCstIPI.setMaxLength(2);
		txtCstIPI.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					CstIpi cst = controller.consultarCstIpi(codigo);
					if(cst!=null)
						txtDescricaoCstIPI.setValue(cst.getDescricao());
				}

			}
		});

		layout.addComponent(txtCstIPI,0,0);
		txtDescricaoCstIPI = ComponentUtil.buildTextField("");
		txtDescricaoCstIPI.setWidth("700");
		layout.addComponent(txtDescricaoCstIPI,1,0,8,0);

		txtDipi = ComponentUtil.buildTextField("Tipo Receita Dipi");
		txtDipi.setMaxLength(2);
		txtDipi.addValueChangeListener(new Property.ValueChangeListener() {
			@Override  
			public void valueChange(ValueChangeEvent event) {
				String codigo = (String)event.getProperty().getValue();	
				if(codigo!=null && !(codigo.isEmpty())){
					TipoReceitaDipi tipo = controller.consultarDipi(codigo);
					if(tipo!=null)
						txtDescricaoDipi.setValue(tipo.getDescricao());
				}

			}
		});

		layout.addComponent(txtDipi,0,1);
		txtDescricaoDipi = ComponentUtil.buildTextField("");
		txtDescricaoDipi.setWidth("700");
		layout.addComponent(txtDescricaoDipi,1,1,8,1);

		cmbModalidadeBcIPI = ComponentUtil.buildComboBox("Modalidade Base de Cálculo");
		layout.addComponent(cmbModalidadeBcIPI,0,2,1,2);

		txtPorcentoBcIPI = ComponentUtil.buildCurrencyField("Porcento BC");
		layout.addComponent(txtPorcentoBcIPI,2,2,3,2);

		txtAliquotaBcIPI = ComponentUtil.buildCurrencyField("Aliquota Porcento");
		layout.addComponent(txtAliquotaBcIPI,4,2,5,2);

		txtAliquotaUnidadeIPI = ComponentUtil.buildCurrencyField("Aliquota Unidade");
		layout.addComponent(txtAliquotaUnidadeIPI,6,2,7,2);

		txtValorPrecoMaximoIPI = ComponentUtil.buildCurrencyField("Preço Máximo");
		layout.addComponent(txtValorPrecoMaximoIPI,8,2,10,2);

		txtValorPautaFiscalIPI = ComponentUtil.buildCurrencyField("Valor Pauta Fiscal");
		layout.addComponent(txtValorPautaFiscalIPI,11,2,13,2);

		subForms.addTab(layout, "IPI", null);
	}



	
	private SubFormComponent<ICMSConfiguracaoTributaria, Integer> buildIcmsSubForm() {
		// common part: create layout

		icmsSubForm = new SubFormComponent<ICMSConfiguracaoTributaria, Integer>(ICMSConfiguracaoTributaria.class, new String[] { 
			"ufDestino","cfop","csosnB","cstB","modalidadeBc","aliquota","valorPauta","valorPrecoMaximo"}, new String[] {"UF","CFOP","CSOSN_B","CST_B","Modalidade BC","Aliquota","Valor Pauta","Valor Preço Máximo"}) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("ufDestino".equals(propertyId)) {
							ComboBox cmb = ComponentUtil.buildComboBox("UF");
							//							BeanItemContainer<UF> containerUf = new BeanItemContainer<>(controller.listarUfs());
							//							cmb.setContainerDataSource(containerUf);
							//                            cmb.setItemCaptionMode(ItemCaptionMode.PROPERTY);
							//                            cmb.setItemCaptionPropertyId("sigla");
							List<UF> ufs = controller.listarUfs();
							BeanItemContainer<String> beanUf = new BeanItemContainer<>(String.class);
							for(UF u : ufs){
								beanUf.addBean(u.getSigla());
							}
							cmb.setContainerDataSource(beanUf);
							return cmb;
						}

						if ("cfop".equals(propertyId)) {
							TextField field = ComponentUtil.buildTextField("CFOP");
							return field;
						}

						if ("csosnB".equals(propertyId)) {
							TextField field = ComponentUtil.buildTextField("CSOSN_B");
							field.setMaxLength(3);
							return field;
						}

						if ("cstB".equals(propertyId)) {
							TextField field = ComponentUtil.buildTextField("CST_B");
							field.setMaxLength(2);
							return field;
						}

						if ("modalidadeBc".equals(propertyId)) {
							TextField field = ComponentUtil.buildTextField("Modalidade BC");
							field.setMaxLength(1);
							return field;
						}


						if ("aliquota".equals(propertyId)) {
							TextField field = ComponentUtil.buildTextField("Aliquota");
							return field;
						}

						if ("valorPauta".equals(propertyId)) {
							TextField field = ComponentUtil.buildCurrencyField("Valor Pauta");
							return field;
						}

						if ("valorPrecoMaximo".equals(propertyId)) {
							TextField field = ComponentUtil.buildCurrencyField("Valor Preço Máximo");
							return field;
						}
						return null;
					}
				};
			}

			protected ICMSConfiguracaoTributaria getNovo() {
				ICMSConfiguracaoTributaria detalhe = controller.novoIcms();
				return detalhe;
			}
			@Override
			public boolean validateItems(List<ICMSConfiguracaoTributaria> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		return icmsSubForm;

	}

	public void preencherIcmsSubForm(List<ICMSConfiguracaoTributaria> detalhes) {
		try{
			icmsSubForm.fillWith(detalhes);	
		}catch(Exception e){
			e.printStackTrace();
		}

	}
}
