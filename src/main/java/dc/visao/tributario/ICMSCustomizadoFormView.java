package dc.visao.tributario;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.tributario.IcmsCustomizadoFormController;
import dc.entidade.geral.diverso.UfEntity;
import dc.entidade.tributario.IcmsCustomizadoDetalheEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class ICMSCustomizadoFormView extends CustomComponent {
	
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private GridLayout fields;
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	
	@AutoGenerated
	private TabSheet tabSheet;
	
	@AutoGenerated
	private TextArea txtDescricao;

	@AutoGenerated
	private ComboBox origemMercadoria;
	
	private SubFormComponent<IcmsCustomizadoDetalheEntity, Integer> detalheSubForm;
	
	IcmsCustomizadoFormController controller;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ICMSCustomizadoFormView(IcmsCustomizadoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		fields = buildFields();

		mainLayout.addComponent(fields);

		tabSheet = BuildTabs();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1);

		return mainLayout;
	}

	private GridLayout buildFields() {
		fields = new GridLayout(4,4);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setRows(4);
		fields.setColumns(4);
		
		origemMercadoria = ComponentUtil.buildComboBox("Origem Mercadoria");
		origemMercadoria.setRequired(true);
		fields.addComponent(origemMercadoria, 0, 0);
		
		txtDescricao = ComponentUtil.buildTextArea("Descrição");
		fields.addComponent(txtDescricao, 0, 1);

		
	return fields;
}
	
private TabSheet BuildTabs() {
	tabSheet = new TabSheet();
	tabSheet.setImmediate(true);
	tabSheet.setSizeFull();

	tabSheet.addTab(buildSubFormDetalhe(),"Detalhes", null);

	return tabSheet;
}
	
private SubFormComponent<IcmsCustomizadoDetalheEntity, Integer> buildSubFormDetalhe() {
			
			String[] atributos = new String[] {"ufDestino","cfop", "csosn", "cst", "modalidadeBc", "aliquota","valorPauta", "valorPrecoMaximo" };
			String[] headers = new String[] {"UF", "CFOP", "CSOSN_B", "CST_B", "Modalidade BC","Aliquota", "Valor Pauta", "Valor Preço Máximo" };

			this.detalheSubForm = new SubFormComponent<IcmsCustomizadoDetalheEntity, Integer>(
					IcmsCustomizadoDetalheEntity.class, atributos, headers) {

				private static final long serialVersionUID = 1L;

				@Override
				protected TableFieldFactory getFieldFactory() {
					return new TableFieldFactory() {

						/**
						 * */
						 
						private static final long serialVersionUID = 1L;

						@Override
						public Field<?> createField(Container container,
								Object itemId, Object propertyId,
								Component uiContext) {

							if ("ufDestino".equals(propertyId)) {
								ComboBox cmb = ComponentUtil.buildComboBox("UF");
								
								BeanItemContainer<UfEntity> ufs = new BeanItemContainer<>(UfEntity.class,controller.listarUfs());
								cmb.setContainerDataSource(ufs);
								cmb.setItemCaptionPropertyId("nome");

								//List<UfEntity> ufs = controller.listarUfs();
								//BeanItemContainer<String> beanUf = new BeanItemContainer<>(
								//		String.class);
								//for (UfEntity u : ufs) {
								//	beanUf.addBean(u.getSigla());
								//}
								//cmb.setContainerDataSource(beanUf);
								return cmb;
							}

							if ("cfop".equals(propertyId)) {
								ComboBox combo = ComponentUtil
										.buildComboBox("CFOP");
								combo.setContainerDataSource(controller
										.carregarCfop());
								return combo;

							}

							if ("csosn".equals(propertyId)) {
								ComboBox combo = ComponentUtil
										.buildComboBox("CSOSN_B");
								combo.setContainerDataSource(controller
										.carregarCsosnb());
								return combo;
							}

							if ("cst".equals(propertyId)) {
								ComboBox combox = ComponentUtil
										.buildComboBox("CST_B");
								combox.setContainerDataSource(controller
										.carregarCstb());
								return combox;

							}

							if ("modalidadeBc".equals(propertyId)) {
								TextField field = ComponentUtil
										.buildTextField("Modalidade BC");
								field.setMaxLength(1);
								return field;
							}

							if ("aliquota".equals(propertyId)) {
								TextField field = ComponentUtil
										.buildTextField("Aliquota");
								return field;
							}

							if ("valorPauta".equals(propertyId)) {
								TextField field = ComponentUtil
										.buildCurrencyField("Valor Pauta");
								return field;
							}

							if ("valorPrecoMaximo".equals(propertyId)) {
								TextField field = ComponentUtil
										.buildCurrencyField("Valor Preço Máximo");
								return field;
							}

							else {
								return ComponentUtil.buildTextField(null);
							}
						}

					};
				}

				@Override
				public boolean validateItems(List<IcmsCustomizadoDetalheEntity> items) {

					return true;
				}

				protected IcmsCustomizadoDetalheEntity getNovo() {
					IcmsCustomizadoDetalheEntity icmsCustomizado = controller.novoDetalhe();
					return icmsCustomizado;
				}

				@Override
				protected void getRemoverSelecionados(List<IcmsCustomizadoDetalheEntity> values) {
					controller.removerDetalhe(values);
				}
			};

			return this.detalheSubForm;
}
	
public void InitCbs(List<String> icms) {

	for (String str : icms) {
		origemMercadoria.addItem(str.toString());
	}
}

public GridLayout getFields() {
	return fields;
}

public void setFields(GridLayout fields) {
	this.fields = fields;
}

public VerticalLayout getMainLayout() {
	return mainLayout;
}

public void setMainLayout(VerticalLayout mainLayout) {
	this.mainLayout = mainLayout;
}

public TabSheet getTabSheet() {
	return tabSheet;
}

public void setTabSheet(TabSheet tabSheet) {
	this.tabSheet = tabSheet;
}

public TextArea getTxtDescricao() {
	return txtDescricao;
}

public void setTxtDescricao(TextArea txtDescricao) {
	this.txtDescricao = txtDescricao;
}

public ComboBox getOrigemMercadoria() {
	return origemMercadoria;
}

public void setOrigemMercadoria(ComboBox origemMercadoria) {
	this.origemMercadoria = origemMercadoria;
}

public SubFormComponent<IcmsCustomizadoDetalheEntity, Integer> getDetalheSubForm() {
	return detalheSubForm;
}

public void setDetalheSubForm(
		SubFormComponent<IcmsCustomizadoDetalheEntity, Integer> detalheSubForm) {
	this.detalheSubForm = detalheSubForm;
}

public IcmsCustomizadoFormController getController() {
	return controller;
}

public void setController(IcmsCustomizadoFormController controller) {
	this.controller = controller;
}

public void preencheSubForm(List<IcmsCustomizadoDetalheEntity> detalhes) {
	detalheSubForm.fillWith(detalhes);
}


}
