package dc.visao.ponto;

import java.util.List;

import org.vaadin.addons.maskedtextfield.MaskedTextField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.ponto.PontoAbonoFormController;
import dc.entidade.pessoal.Colaborador;
import dc.entidade.ponto.PontoAbono;
import dc.entidade.ponto.PontoAbonoUtilizacao;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class PontoAbonoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private GridLayout gridLayout_3;
	@AutoGenerated
	private SubFormComponent<PontoAbonoUtilizacao, Integer> subFormComponent;
	@AutoGenerated
	private GridLayout gridLayout_2;
	@AutoGenerated
	private ComboBox cmbColaborador;
	@AutoGenerated
	private PopupDateField dtUtilizacao;
	@AutoGenerated
	private PopupDateField dtCadastro;
	@AutoGenerated
	private MaskedTextField txSaldo;
	@AutoGenerated
	private TextField txUtilizado;
	@AutoGenerated
	private MaskedTextField txQuantidade;
	private PontoAbonoFormController controller;
	@AutoGenerated
	private TextArea txaObservacao;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public PontoAbonoFormView(PontoAbonoFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setWidth("100%");

		gridLayout_1.setRows(2);

		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		gridLayout_1.addComponent(gridLayout_2, 0, 0);

		// gridLayout_3
		gridLayout_3 = buildGridLayout_3();
		gridLayout_1.addComponent(gridLayout_3, 0, 1);

		return gridLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setWidth("100%");
		gridLayout_2.setColumns(7);
		gridLayout_2.setRows(2);

		// txQuantidade
		txQuantidade = ComponentUtil.buildMaskedTextField("Quantidade", "##");
		gridLayout_2.addComponent(txQuantidade, 0, 0);

		txUtilizado = ComponentUtil.buildMaskedTextField("Utilizado", "##");
		gridLayout_2.addComponent(txUtilizado, 1, 0);

		// txSaldo
		txSaldo = ComponentUtil.buildMaskedTextField("Saldo", "##");
		gridLayout_2.addComponent(txSaldo, 2, 0);

		// dtCadastro
		dtCadastro = ComponentUtil.buildPopupDateField("Data Cadastro");
		gridLayout_2.addComponent(dtCadastro, 3, 0);

		// dtUtilizacao
		dtUtilizacao = ComponentUtil.buildPopupDateField("Data Utilização");
		gridLayout_2.addComponent(dtUtilizacao, 4, 0);

		// cmbColaborador
		cmbColaborador = ComponentUtil.buildComboBox("Colaborador");
		gridLayout_2.addComponent(cmbColaborador, 5, 0);

		txaObservacao = ComponentUtil.buildTextArea("Observação");
		gridLayout_2.addComponent(txaObservacao, 0, 1, 5, 1);

		return gridLayout_2;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_3() {
		// common part: create layout
		gridLayout_3 = new GridLayout();
		gridLayout_3.setImmediate(false);
		gridLayout_3.setSpacing(true);
		gridLayout_3.setWidth("100%");

		// subFormComponent$3_1
		subFormComponent = buildSubForm();
		subFormComponent.setHeight("200px");
		subFormComponent.setWidth("98%");
		gridLayout_3.addComponent(subFormComponent, 0, 0);

		return gridLayout_3;
	}

	private SubFormComponent<PontoAbonoUtilizacao, Integer> buildSubForm() {
		SubFormComponent<PontoAbonoUtilizacao, Integer> subForm = new SubFormComponent<PontoAbonoUtilizacao, Integer>(
				PontoAbonoUtilizacao.class, new String[] { "dataUtilizacao",
						"observacao" }, new String[] { "Data Utilização",
						"Observação" }) {

			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {

						if ("dataUtilizacao".equals(propertyId)) {
							DateField dateField = new DateField();
							dateField.setSizeFull();
							return dateField;
						} else if ("observacao".equals(propertyId)) {
							TextField textField = new TextField();
							textField.setSizeFull();
							textField.setNullRepresentation("");
							return textField;
						}

						return null;
					}

				};
			}

			@Override
			public boolean validateItems(List<PontoAbonoUtilizacao> items) {
				return true;
			}

			protected PontoAbonoUtilizacao getNovo() {
				PontoAbonoUtilizacao pontoAbonoUtilizacao = controller
						.novoPontoAbonoUtilizacao();
				return pontoAbonoUtilizacao;
			}

			protected void getRemoverSelecionados(
					List<PontoAbonoUtilizacao> values) {
				controller.removerPontoAbonoUtilizacao(values);
			}
		};

		return subForm;
	}

	public void carregarColaboradores(List<Colaborador> colaboradores) {
		this.cmbColaborador.removeAllItems();
		for (Colaborador colaborador : colaboradores) {
			this.cmbColaborador.addItem(colaborador);
		}
	}

	public void preencheForm(PontoAbono currentBean) {
		dtCadastro.setValue(currentBean.getDataCadastro());
		dtUtilizacao.setValue(currentBean.getInicioUtilizacao());
		txaObservacao.setValue(currentBean.getObservacao());
		txQuantidade.setValue(String.valueOf(currentBean.getQuantidade()));
		txSaldo.setValue(String.valueOf(currentBean.getSaldo()));
		txSaldo.setValue(String.valueOf(currentBean.getUtilizado()));
		cmbColaborador.setValue(currentBean.getColaborador());

		fillSubForm(currentBean
				.getPontoAbonoUtilizacoes());

	}

	public void fillSubForm(
			List<PontoAbonoUtilizacao> pontoAbonoUtilizacoes) {
		this.subFormComponent.fillWith(pontoAbonoUtilizacoes);

	}

	public void preencheBean(PontoAbono currentBean) {
		currentBean.setDataCadastro(dtCadastro.getValue());
		currentBean.setInicioUtilizacao(dtUtilizacao.getValue());
		currentBean.setObservacao(txaObservacao.getValue());
		currentBean.setQuantidade(Integer.parseInt(txQuantidade.getValue()));
		currentBean.setSaldo(Integer.parseInt(txSaldo.getValue()));
		currentBean.setUtilizado(Integer.parseInt(txSaldo.getValue()));
		currentBean.setColaborador((Colaborador) cmbColaborador.getValue());

	}

	public ComboBox getCmbColaborador() {
		return cmbColaborador;
	}

	public void setCmbColaborador(ComboBox cmbColaborador) {
		this.cmbColaborador = cmbColaborador;
	}

	public PopupDateField getDtUtilizacao() {
		return dtUtilizacao;
	}

	public void setDtUtilizacao(PopupDateField dtUtilizacao) {
		this.dtUtilizacao = dtUtilizacao;
	}

	public PopupDateField getDtCadastro() {
		return dtCadastro;
	}

	public void setDtCadastro(PopupDateField dtCadastro) {
		this.dtCadastro = dtCadastro;
	}

	public MaskedTextField getTxSaldo() {
		return txSaldo;
	}

	public void setTxSaldo(MaskedTextField txSaldo) {
		this.txSaldo = txSaldo;
	}

	public TextField getTxUtilizado() {
		return txUtilizado;
	}

	public void setTxUtilizado(TextField txUtilizado) {
		this.txUtilizado = txUtilizado;
	}

	public MaskedTextField getTxQuantidade() {
		return txQuantidade;
	}

	public void setTxQuantidade(MaskedTextField txQuantidade) {
		this.txQuantidade = txQuantidade;
	}

	public TextArea getTxaObservacao() {
		return txaObservacao;
	}

	public void setTxaObservacao(TextArea txaObservacao) {
		this.txaObservacao = txaObservacao;
	}
}
