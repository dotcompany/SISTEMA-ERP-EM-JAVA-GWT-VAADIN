package dc.visao.comercial;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.comercial.TipoNotaFiscalFormController;
import dc.controller.comercial.VendaFormController;
import dc.entidade.comercial.VendaDetalhe;
import dc.entidade.produto.Produto;
import dc.entidade.suprimentos.ContagemEstoqueDetalhe;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;
import dc.visao.suprimentos.ContagemEstoqueFormController;
import dc.visao.suprimentos.NotaFiscalFormView.TIPO_OPERACAO;

public class VendaFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	VendaFormController controller;

	@AutoGenerated
	private GridLayout fields;

	ComboBox cmbTipoVenda,cmbOrcamento,cmbTipoNotaFiscal,cmbVendedor,cmbCliente,
	cmbTransportadora,cmbCondicoesPagamento,cmbFormaPagamento,cmbFrete;

	PopupDateField dataVenda,dataSaida;
	TextField txtHoraSaida,txtNumeroFatura,txtLocalEntrega,txtLocalCobranca,
	txtTaxaDesconto,txtValorDesconto,txtValorTotal;
	
	TextField txtValorSubTotal,txtValorFrete,txtTaxaComissao,txtValorComissao,txtObservacoes;
	
	private SubFormComponent<VendaDetalhe, Integer> vendaDetalheSubForm;
	
	@AutoGenerated
	private TabSheet subForms;
	
	public VendaFormView(VendaFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		fields = buildFields();
		mainLayout.addComponent(fields);
		
		subForms = buildSubForms();
		mainLayout.addComponent(subForms);
		return mainLayout;

	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(8, 8);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

		cmbTipoVenda = ComponentUtil.buildComboBox("Tipo de Venda");
		carregarTipoVenda();
		cmbTipoVenda
		.addValueChangeListener(new Property.ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				TIPO_VENDA tipo = (TIPO_VENDA)event.getProperty()
						.getValue();

				if(tipo==null){
					cmbOrcamento.setReadOnly(true);
				}else{

					if(tipo.equals(TIPO_VENDA.ORCAMENTO)){
						cmbOrcamento.setReadOnly(false);
					}else{
						cmbOrcamento.setReadOnly(true);
					}
				}
			}
		});
		

		cmbOrcamento = ComponentUtil.buildComboBox("Orçamento");
		cmbOrcamento.setReadOnly(true);
		
		cmbTipoNotaFiscal = ComponentUtil.buildComboBox("Tipo Nota Fiscal");
		
		cmbVendedor = ComponentUtil.buildComboBox("Vendedor");
		cmbCliente = ComponentUtil.buildComboBox("Cliente");
		
		cmbTransportadora = ComponentUtil.buildComboBox("Transportadora");
	    cmbCondicoesPagamento = ComponentUtil.buildComboBox("Condição de Pagamento");	
	
	    cmbFormaPagamento = ComponentUtil.buildComboBox("Forma Pagamento");
	    cmbFrete = ComponentUtil.buildComboBox("Frete");
	    dataVenda = ComponentUtil.buildPopupDateField("Data Venda");
	    dataSaida = ComponentUtil.buildPopupDateField("Data Saida");
	    txtHoraSaida = ComponentUtil.buildTextField("Hora Saida");
	    txtNumeroFatura = ComponentUtil.buildTextField("Numero da Fatura");
	    
	    fields.addComponent(cmbTipoVenda,0,0);
	    
		fields.addComponent(cmbOrcamento,0,1);
        fields.addComponent(cmbTipoNotaFiscal,1,1);
        fields.addComponent(cmbVendedor,2,1);
		fields.addComponent(cmbCliente,3,1); 
        
		fields.addComponent(cmbTransportadora,0,2);
		fields.addComponent(cmbCondicoesPagamento,1,2);
		
		fields.addComponent(cmbFormaPagamento,2,2);
		fields.addComponent(cmbFrete,3,2);
		
		fields.addComponent(dataVenda,0,3);
		fields.addComponent(dataSaida,1,3);
		fields.addComponent(txtHoraSaida,2,3);
		fields.addComponent(txtNumeroFatura,3,3);
				
		txtLocalEntrega = ComponentUtil.buildTextField("Local Entrega");
		txtLocalCobranca = ComponentUtil.buildTextField("Local Cobrança");
		fields.addComponent(txtLocalEntrega,0,4,2,4);
		fields.addComponent(txtLocalCobranca,3,4,5,4);
		
		txtValorSubTotal = ComponentUtil.buildTextField("Valor SubTotal");
		txtValorFrete = ComponentUtil.buildTextField("Valor Frete");
		txtTaxaComissao = ComponentUtil.buildTextField("Taxa Comissão");
				
		txtValorComissao = ComponentUtil.buildTextField("Valor Comissão");
		txtTaxaDesconto  = ComponentUtil.buildTextField("Taxa Desconto");
		txtValorDesconto = ComponentUtil.buildTextField("Valor Desconto");
		txtValorTotal = ComponentUtil.buildTextField("Valor Total");
		
		fields.addComponent(txtValorSubTotal,0,5);
		fields.addComponent(txtValorFrete,1,5);
		fields.addComponent(txtTaxaComissao,2,5);
		
		fields.addComponent(txtValorComissao,3,5);
		fields.addComponent(txtTaxaDesconto,4,5);
		fields.addComponent(txtValorDesconto,5,5);
		fields.addComponent(txtValorTotal,6,5);
		
		txtObservacoes = ComponentUtil.buildTextField("Observações");
		fields.addComponent(txtObservacoes,0,6);
		
		
		
		return fields;

	}

	public enum TIPO_VENDA {

		ORCAMENTO("Do Orçamento", "1"),VENDA_DIRETA("Venda Direta", "2");

		private TIPO_VENDA(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TIPO_VENDA getTipoVenda(String codigo) {
			if (codigo.equals("0")) {
				return ORCAMENTO;
			}
			if (codigo.equals("1")) {
				return VENDA_DIRETA;
			} 
			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	public void carregarTipoVenda(){
		cmbTipoVenda.removeAllItems();
		cmbTipoVenda.addItem(TIPO_VENDA.ORCAMENTO);
		cmbTipoVenda.addItem(TIPO_VENDA.VENDA_DIRETA);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildSubForms() {
		
		subForms = new TabSheet();
		subForms.setImmediate(true);
		
		
		vendaDetalheSubForm = new SubFormComponent<VendaDetalhe, Integer>(VendaDetalhe.class, new String[] { 
		"quantidade" }, new String[] {"Quantidade"}) {
			//"produto" }, new String[] {"Produto" }) {
			
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {
						
						
						
						 if ("quantidade".equals(propertyId)) {
								TextField textField = ComponentUtil.buildNumberField(null);
								return textField;
							}
					 
						 
						
						return null;
					}
				};
			}
			
			protected VendaDetalhe getNovo() {
				VendaDetalhe detalhe = controller.novoDetalhe();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<VendaDetalhe> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};
		subForms.addTab(vendaDetalheSubForm, "Itens da Venda", null);
		return subForms ;

	}


}